#########################################################################
#####################  A U T O G E N E R A T E D ########################
#########################################################################
#
# The contents of this POD file are auto-generated.  Any changes you make
# will be lost. If you need to change the generated text edit _gen_pod()
# at the end of DBIx/Class/Schema/Loader/Optional/Dependencies.pm
#


=head1 NAME

DBIx::Class::Schema::Loader::Optional::Dependencies - Optional module dependency specifications (for module authors)

=head1 SYNOPSIS

Somewhere in your build-file (e.g. L<Module::Install>'s Makefile.PL):

  ...

  configure_requires 'DBIx::Class::Schema::Loader' => '0.07017';

  require DBIx::Class::Schema::Loader::Optional::Dependencies;

  my $use_moose_deps = DBIx::Class::Schema::Loader::Optional::Dependencies->req_list_for ('use_moose');

  for (keys %$use_moose_deps) {
    requires $_ => $use_moose_deps->{$_};
  }

  ...

Note that there are some caveats regarding C<configure_requires()>, more info
can be found at L<Module::Install/configure_requires>


=head1 DESCRIPTION

Some of the features of L<DBIx::Class::Schema::Loader> have external
module dependencies on their own. In order not to burden the average user
with modules he will never use, these optional dependencies are not included
in the base Makefile.PL. Instead an exception with a descriptive message is
thrown when a specific feature is missing one or several modules required for
its operation. This module is the central holding place for  the current list
of such dependencies.


=head1 CURRENT REQUIREMENT GROUPS

Dependencies are organized in C<groups> and each group can list one or more
required modules, with an optional minimum version (or 0 for any version).


=head2 dbicdump config file

Modules required for using a config file with dbicdump

=over

=item * Config::Any

=back

Requirement group: B<dbicdump_config>

=head2 dbicdump config file testing

Modules required for using testing using a config file with dbicdump

=over

=item * Config::Any

=item * Config::General

=back

Requirement group: B<test_dbicdump_config>

=head2 use_moose

Modules required for the use_moose option

=over

=item * Moose >= 1.12

=item * MooseX::MarkAsMethods >= 0.13

=item * MooseX::NonMoose >= 0.16

=item * namespace::autoclean >= 0.09

=back

Requirement group: B<use_moose>

=head1 METHODS

=head2 req_group_list

=over

=item Arguments: $none

=item Returns: \%list_of_requirement_groups

=back

This method should be used by DBIx::Class packagers, to get a hashref of all
dependencies keyed by dependency group. Each key (group name) can be supplied
to one of the group-specific methods below.


=head2 req_list_for

=over

=item Arguments: $group_name

=item Returns: \%list_of_module_version_pairs

=back

This method should be used by DBIx::Class extension authors, to determine the
version of modules a specific feature requires in the B<current> version of
L<DBIx::Class::Schema::Loader>. See the L</SYNOPSIS> for a real-world
example.


=head2 req_ok_for

=over

=item Arguments: $group_name

=item Returns: 1|0

=back

Returns true or false depending on whether all modules required by C<$group_name> are present on the system and loadable

=head2 req_missing_for

=over

=item Arguments: $group_name

=item Returns: $error_message_string

=back

Returns a single line string suitable for inclusion in larger error messages.
This method would normally be used by L<DBIx::Class::Schema::Loader>
maintainers, to indicate to the user that he needs to install specific modules
before he will be able to use a specific feature.

For example if some of the requirements for C<use_moose> are not available,
the returned string could look like:

 Moose >= 0 (see use_moose for details)

The author is expected to prepend the necessary text to this message before
returning the actual error seen by the user.


=head2 req_errorlist_for

=over

=item Arguments: $group_name

=item Returns: \%list_of_loaderrors_per_module

=back

Returns a hashref containing the actual errors that occured while attempting
to load each module in the requirement group.


=head1 AUTHOR

See L<DBIx::Class/CONTRIBUTORS>.

=head1 LICENSE

You may distribute this code under the same terms as Perl itself