.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojo::Log 3"
.TH Mojo::Log 3 "2012-02-26" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojo::Log \- Simple logger for Mojo
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Mojo::Log;
\&
\&  # Create a logging object that will log to STDERR by default
\&  my $log = Mojo::Log\->new;
\&
\&  # Customize the log location and minimum log level
\&  my $log = Mojo::Log\->new(
\&    path  => \*(Aq/var/log/mojo.log\*(Aq,
\&    level => \*(Aqwarn\*(Aq,
\&  );
\&
\&  # Log messages
\&  $log\->debug("Why isn\*(Aqt this working?");
\&  $log\->info("FYI: it happened again");
\&  $log\->warn("This might be a problem");
\&  $log\->error("Garden variety error");
\&  $log\->fatal("Boom!");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojo::Log is a simple logger for Mojo projects.
.SH "EVENTS"
.IX Header "EVENTS"
Mojo::Log can emit the following events.
.ie n .SS """message"""
.el .SS "\f(CWmessage\fP"
.IX Subsection "message"
.Vb 4
\&  $log\->on(message => sub {
\&    my ($log, $level, @messages) = @_;
\&    ...
\&  });
.Ve
.PP
Emitted when a new message gets logged.
.PP
.Vb 5
\&  $log\->unsubscribe(\*(Aqmessage\*(Aq);
\&  $log\->on(message => sub {
\&    my ($log, $level, @messages) = @_;
\&    say "$level: ", @messages;
\&  });
.Ve
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojo::Log implements the following attributes.
.ie n .SS """handle"""
.el .SS "\f(CWhandle\fP"
.IX Subsection "handle"
.Vb 2
\&  my $handle = $log\->handle;
\&  $log       = $log\->handle(IO::File\->new);
.Ve
.PP
Logfile handle used by default \f(CW\*(C`message\*(C'\fR event, defaults to opening the
value of \f(CW\*(C`path\*(C'\fR or \f(CW\*(C`STDERR\*(C'\fR.
.ie n .SS """level"""
.el .SS "\f(CWlevel\fP"
.IX Subsection "level"
.Vb 2
\&  my $level = $log\->level;
\&  $log      = $log\->level(\*(Aqdebug\*(Aq);
.Ve
.PP
Active log level, defaults to the value of the \f(CW\*(C`MOJO_LOG_LEVEL\*(C'\fR environment
variable or \f(CW\*(C`debug\*(C'\fR.
.PP
These levels are currently available:
.ie n .IP """debug""" 2
.el .IP "\f(CWdebug\fR" 2
.IX Item "debug"
.PD 0
.ie n .IP """info""" 2
.el .IP "\f(CWinfo\fR" 2
.IX Item "info"
.ie n .IP """warn""" 2
.el .IP "\f(CWwarn\fR" 2
.IX Item "warn"
.ie n .IP """error""" 2
.el .IP "\f(CWerror\fR" 2
.IX Item "error"
.ie n .IP """fatal""" 2
.el .IP "\f(CWfatal\fR" 2
.IX Item "fatal"
.PD
.ie n .SS """path"""
.el .SS "\f(CWpath\fP"
.IX Subsection "path"
.Vb 2
\&  my $path = $log\->path
\&  $log     = $log\->path(\*(Aq/var/log/mojo.log\*(Aq);
.Ve
.PP
Logfile path used by \f(CW\*(C`handle\*(C'\fR.
.SH "METHODS"
.IX Header "METHODS"
Mojo::Log inherits all methods from Mojo::EventEmitter and implements
the following new ones.
.ie n .SS """new"""
.el .SS "\f(CWnew\fP"
.IX Subsection "new"
.Vb 1
\&  my $log = Mojo::Log\->new;
.Ve
.PP
Construct a new Mojo::Log object and subscribe to \f(CW\*(C`message\*(C'\fR event with
default logger.
.ie n .SS """debug"""
.el .SS "\f(CWdebug\fP"
.IX Subsection "debug"
.Vb 1
\&  $log = $log\->debug(\*(AqYou screwed up, but that is ok\*(Aq);
.Ve
.PP
Log debug message.
.ie n .SS """error"""
.el .SS "\f(CWerror\fP"
.IX Subsection "error"
.Vb 1
\&  $log = $log\->error(\*(AqYou really screwed up this time\*(Aq);
.Ve
.PP
Log error message.
.ie n .SS """fatal"""
.el .SS "\f(CWfatal\fP"
.IX Subsection "fatal"
.Vb 1
\&  $log = $log\->fatal(\*(AqIts over...\*(Aq);
.Ve
.PP
Log fatal message.
.ie n .SS """format"""
.el .SS "\f(CWformat\fP"
.IX Subsection "format"
.Vb 2
\&  my $message = $log\->format(\*(Aqdebug\*(Aq, \*(AqHi there!\*(Aq);
\&  my $message = $log\->format(\*(Aqdebug\*(Aq, \*(AqHi\*(Aq, \*(Aqthere!\*(Aq);
.Ve
.PP
Format log message.
.ie n .SS """info"""
.el .SS "\f(CWinfo\fP"
.IX Subsection "info"
.Vb 1
\&  $log = $log\->info(\*(AqYou are bad, but you prolly know already\*(Aq);
.Ve
.PP
Log info message.
.ie n .SS """is_level"""
.el .SS "\f(CWis_level\fP"
.IX Subsection "is_level"
.Vb 1
\&  my $success = $log\->is_level(\*(Aqdebug\*(Aq);
.Ve
.PP
Check log level.
.ie n .SS """is_debug"""
.el .SS "\f(CWis_debug\fP"
.IX Subsection "is_debug"
.Vb 1
\&  my $success = $log\->is_debug;
.Ve
.PP
Check for debug log level.
.ie n .SS """is_error"""
.el .SS "\f(CWis_error\fP"
.IX Subsection "is_error"
.Vb 1
\&  my $success = $log\->is_error;
.Ve
.PP
Check for error log level.
.ie n .SS """is_fatal"""
.el .SS "\f(CWis_fatal\fP"
.IX Subsection "is_fatal"
.Vb 1
\&  my $success = $log\->is_fatal;
.Ve
.PP
Check for fatal log level.
.ie n .SS """is_info"""
.el .SS "\f(CWis_info\fP"
.IX Subsection "is_info"
.Vb 1
\&  my $success = $log\->is_info;
.Ve
.PP
Check for info log level.
.ie n .SS """is_warn"""
.el .SS "\f(CWis_warn\fP"
.IX Subsection "is_warn"
.Vb 1
\&  my $success = $log\->is_warn;
.Ve
.PP
Check for warn log level.
.ie n .SS """log"""
.el .SS "\f(CWlog\fP"
.IX Subsection "log"
.Vb 1
\&  $log = $log\->log(debug => \*(AqThis should work\*(Aq);
.Ve
.PP
Emit \f(CW\*(C`message\*(C'\fR event.
.ie n .SS """warn"""
.el .SS "\f(CWwarn\fP"
.IX Subsection "warn"
.Vb 1
\&  $log = $log\->warn(\*(AqDont do that Dave...\*(Aq);
.Ve
.PP
Log warn message.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, <http://mojolicio.us>.
