.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DateFormat 3"
.TH DateFormat 3 "2011-11-01" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Log::Log4perl::DateFormat \- Log4perl advanced date formatter helper class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Log::Log4perl::DateFormat;
\&
\&    my $format = Log::Log4perl::DateFormat\->new("HH:mm:ss,SSS");
\&
\&    # Simple time, resolution in seconds
\&    my $time = time();
\&    print $format\->format($time), "\en";
\&        # => "17:02:39,000"
\&
\&    # Advanced time, resultion in milliseconds
\&    use Time::HiRes;
\&    my ($secs, $msecs) = Time::HiRes::gettimeofday();
\&    print $format\->format($secs, $msecs), "\en";
\&        # => "17:02:39,959"
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Log::Log4perl::DateFormat\*(C'\fR is a low-level helper class for the 
advanced date formatting functions in \f(CW\*(C`Log::Log4perl::Layout::PatternLayout\*(C'\fR.
.PP
Unless you're writing your own Layout class like
Log::Log4perl::Layout::PatternLayout, there's probably not much use
for you to read this.
.PP
\&\f(CW\*(C`Log::Log4perl::DateFormat\*(C'\fR is a formatter which allows dates to be
formatted according to the log4j spec on
.PP
.Vb 1
\&    http://download.oracle.com/javase/1.4.2/docs/api/java/text/SimpleDateFormat.html
.Ve
.PP
which allows the following placeholders to be recognized and processed:
.PP
.Vb 10
\&    Symbol Meaning              Presentation    Example
\&    \-\-\-\-\-\- \-\-\-\-\-\-\-              \-\-\-\-\-\-\-\-\-\-\-\-    \-\-\-\-\-\-\-
\&    G      era designator       (Text)          AD
\&    e      epoch seconds        (Number)        1315011604
\&    y      year                 (Number)        1996
\&    M      month in year        (Text & Number) July & 07
\&    d      day in month         (Number)        10
\&    h      hour in am/pm (1~12) (Number)        12
\&    H      hour in day (0~23)   (Number)        0
\&    m      minute in hour       (Number)        30
\&    s      second in minute     (Number)        55
\&    S      millisecond          (Number)        978
\&    E      day in week          (Text)          Tuesday
\&    D      day in year          (Number)        189
\&    F      day of week in month (Number)        2 (2nd Wed in July)
\&    w      week in year         (Number)        27
\&    W      week in month        (Number)        2
\&    a      am/pm marker         (Text)          PM
\&    k      hour in day (1~24)   (Number)        24
\&    K      hour in am/pm (0~11) (Number)        0
\&    z      time zone            (Text)          Pacific Standard Time
\&    Z      RFC 822 time zone    (Text)          \-0800
\&    \*(Aq      escape for text      (Delimiter)
\&    \*(Aq\*(Aq     single quote         (Literal)       \*(Aq
.Ve
.PP
For example, if you want to format the current Unix time in 
\&\f(CW"MM/dd HH:mm"\fR format, all you have to do is this:
.PP
.Vb 1
\&    use Log::Log4perl::DateFormat;
\&
\&    my $format = Log::Log4perl::DateFormat\->new("MM/dd HH:mm");
\&
\&    my $time = time();
\&    print $format\->format($time), "\en";
.Ve
.PP
While the \f(CW\*(C`new()\*(C'\fR method is expensive, because it parses the format
strings and sets up all kinds of structures behind the scenes, 
followup calls to \f(CW\*(C`format()\*(C'\fR are fast, because \f(CW\*(C`DateFormat\*(C'\fR will
just call \f(CW\*(C`localtime()\*(C'\fR and \f(CW\*(C`sprintf()\*(C'\fR once to return the formatted
date/time string.
.PP
So, typically, you would initialize the formatter once and then reuse
it over and over again to display all kinds of time values.
.PP
Also, for your convenience, 
the following predefined formats are available, just as outlined in the
log4j spec:
.PP
.Vb 5
\&    Format   Equivalent                     Example
\&    ABSOLUTE "HH:mm:ss,SSS"                 "15:49:37,459"
\&    DATE     "dd MMM yyyy HH:mm:ss,SSS"     "06 Nov 1994 15:49:37,459"
\&    ISO8601  "yyyy\-MM\-dd HH:mm:ss,SSS"      "1999\-11\-27 15:49:37,459"
\&    APACHE   "[EEE MMM dd HH:mm:ss yyyy]"   "[Wed Mar 16 15:49:37 2005]"
.Ve
.PP
So, instead of passing
.PP
.Vb 1
\&    Log::Log4perl::DateFormat\->new("HH:mm:ss,SSS");
.Ve
.PP
you could just as well say
.PP
.Vb 1
\&    Log::Log4perl::DateFormat\->new("ABSOLUTE");
.Ve
.PP
and get the same result later on.
.SS "Known Shortcomings"
.IX Subsection "Known Shortcomings"
The following placeholders are currently \fInot\fR recognized, unless
someone (and that could be you :) implements them:
.PP
.Vb 6
\&    F day of week in month
\&    w week in year 
\&    W week in month
\&    k hour in day 
\&    K hour in am/pm
\&    z timezone (but we got \*(AqZ\*(Aq for the numeric time zone value)
.Ve
.PP
Also, \f(CW\*(C`Log::Log4perl::DateFormat\*(C'\fR just knows about English week and
month names, internationalization support has to be added.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2002\-2009 by Mike Schilli <m@perlmeister.com> 
and Kevin Goess <cpan@goess.org>.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
