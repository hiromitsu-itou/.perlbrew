.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Facebook::Graph 3"
.TH Facebook::Graph 3 "2011-10-19" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Facebook::Graph \- A fast and easy way to integrate your apps with Facebook.
.SH "VERSION"
.IX Header "VERSION"
version 1.0301
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& my $fb = Facebook::Graph\->new;
\& my $sarah_bownds = $fb\->fetch(\*(Aqsarahbownds\*(Aq);
\& my $perl_page = $fb\->fetch(\*(Aq16665510298\*(Aq);
.Ve
.PP
Or better yet:
.PP
.Vb 6
\& my $sarah_bownds = $fb\->query
\&    \->find(\*(Aqsarahbownds\*(Aq)
\&    \->include_metadata
\&    \->select_fields(qw( id name picture ))
\&    \->request
\&    \->as_hashref;
\&    
\& my $sarahs_picture_uri = $fb\->picture(\*(Aqsarahbownds\*(Aq)\->get_large\->uri_as_string;
.Ve
.PP
Or fetching a response from a \s-1URI\s0 you already have:
.PP
.Vb 3
\& my $response = $fb\->query
\&    \->request(\*(Aqhttps://graph.facebook.com/btaylor\*(Aq)
\&    \->as_hashref;
.Ve
.SS "Building A Privileged App"
.IX Subsection "Building A Privileged App"
.Vb 5
\& my $fb = Facebook::Graph\->new(
\&    app_id          => $facebook_application_id,
\&    secret          => $facebook_application_secret,
\&    postback        => \*(Aqhttps://www.yourapplication.com/facebook/oauth/postback\*(Aq,
\& );
.Ve
.PP
Get the user to authorize your app (only needed if you want to fetch non-public information or publish stuff):
.PP
.Vb 4
\& my $uri = $fb
\&    \->authorize
\&    \->extend_permissions(qw(offline_access publish_stream))
\&    \->uri_as_string;
\&
\& # redirect the user\*(Aqs browser to $uri
.Ve
.PP
Handle the Facebook authorization code postback:
.PP
.Vb 2
\& my $q = Plack::Request\->new($env);
\& $fb\->request_access_token($q\->query_param(\*(Aqcode\*(Aq));
.Ve
.PP
Or if you already had the access token:
.PP
.Vb 1
\& $fb\->access_token($token);
.Ve
.PP
Get some info:
.PP
.Vb 3
\& my $user = $fb\->fetch(\*(Aqme\*(Aq);
\& my $friends = $fb\->fetch(\*(Aqme/friends\*(Aq);
\& my $sarah_bownds = $fb\->fetch(\*(Aqsarahbownds\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a Perl interface to the Facebook Graph \s-1API\s0 <http://developers.facebook.com/docs/api>. With this module you can currently query public Facebook data, query privileged Facebook data, and build a privileged Facebook application. See the \s-1TODO\s0 for all that this module cannot yet do.
.PP
For example code, see Facebook::Graph::Cookbook.
.PP
\&\fB\s-1WARNING:\s0\fR The work on this module has only just begun because the Graph \s-1API\s0 itself isn't very new, and I'm only working on it as I have some tuits. Therefore things are potentially subject to change drastically with each release.
.SH "METHODS"
.IX Header "METHODS"
.SS "new ( [ params ] )"
.IX Subsection "new ( [ params ] )"
The constructor.
.PP
\fIparams\fR
.IX Subsection "params"
.PP
A hash of base parameters, just so you don't have to pass them around. If you only want to do public queries then these params are not needed.
.IP "access_token" 4
.IX Item "access_token"
An access token string used to make Facebook requests as a privileged user. Required if you want to make privileged queries or perform privileged actions on Facebook objects.
.IP "app_id" 4
.IX Item "app_id"
The application id that you get from Facebook after registering (<http://developers.facebook.com/setup/>) your application on their site. Required if you'll be calling the \f(CW\*(C`request_access_token\*(C'\fR, \f(CW\*(C`convert_sessions\*(C'\fR, or \f(CW\*(C`authorize\*(C'\fR methods.
.IP "secret" 4
.IX Item "secret"
The application secret that you get from Facebook after registering your application. Required if you'll be calling the \f(CW\*(C`request_access_token\*(C'\fR or \f(CW\*(C`convert_sessions\*(C'\fR methods.
.IP "postback" 4
.IX Item "postback"
The \s-1URI\s0 that Facebook should post your authorization code back to. Required if you'll be calling the \f(CW\*(C`request_access_token\*(C'\fR or \f(CW\*(C`authorize\*(C'\fR methods.
.Sp
\&\fB\s-1NOTE:\s0\fR It must be a sub \s-1URI\s0 of the \s-1URI\s0 that you put in the Application Settings > Connect > Connect \s-1URL\s0 field of your application's profile on Facebook.
.SS "authorize ( )"
.IX Subsection "authorize ( )"
Creates a Facebook::Graph::Authorize object, which can be used to get permissions from a user for your application.
.SS "request_access_token ( code )"
.IX Subsection "request_access_token ( code )"
Creates a Facebook::Graph::AccessToken object and fetches an access token from Facebook, which will allow everything you do with Facebook::Graph to work within user privileges rather than through the public interface. Returns a Facebook::Graph::AccessToken::Response object, and also sets the \f(CW\*(C`access_token\*(C'\fR property in the Facebook::Graph object.
.PP
\fIcode\fR
.IX Subsection "code"
.PP
An authorization code string that you should have gotten by going through the \f(CW\*(C`authorize\*(C'\fR process.
.SS "query ( )"
.IX Subsection "query ( )"
Creates a Facebook::Graph::Query object, which can be used to fetch and search data from Facebook.
.SS "fetch ( id )"
.IX Subsection "fetch ( id )"
Returns a hash reference of an object from facebook. A quick way to grab an object from Facebook. These two statements are identical:
.PP
.Vb 1
\& my $sarah = $fb\->fetch(\*(Aqsarahbownds\*(Aq);
\& 
\& my $sarah = $fb\->query\->find(\*(Aqsarahbownds\*(Aq)\->request\->as_hashref;
.Ve
.PP
\fIid\fR
.IX Subsection "id"
.PP
An profile id like \f(CW\*(C`sarahbownds\*(C'\fR or an object id like \f(CW16665510298\fR for the Perl page.
.SS "picture ( id )"
.IX Subsection "picture ( id )"
Returns a Facebook::Graph::Picture object, which can be used to generate the URLs of the pictures of any object on Facebook.
.PP
\fIid\fR
.IX Subsection "id"
.PP
An profile id like \f(CW\*(C`sarahbownds\*(C'\fR or an object id like \f(CW16665510298\fR for the Perl page.
.SS "add_post ( [ id ] )"
.IX Subsection "add_post ( [ id ] )"
Creates a Facebook::Graph::Publish::Post object, which can be used to publish data to a user's feed/wall.
.PP
\fIid\fR
.IX Subsection "id"
.PP
Optionally provide an object id to place it on. Requires that you have administrative access to that page/object.
.SS "add_checkin ( [ id ] )"
.IX Subsection "add_checkin ( [ id ] )"
Creates a Facebook::Graph::Publish::Checkin object, which can be used to publish a checkin to a location.
.PP
\fIid\fR
.IX Subsection "id"
.PP
Optionally provide an user id to check in. Requires that you have administrative access to that user.
.SS "add_like ( id )"
.IX Subsection "add_like ( id )"
Creates a Facebook::Graph::Publish::Like object to tell everyone about a post you like.
.PP
\fIid\fR
.IX Subsection "id"
.PP
The id of a post you like.
.SS "add_comment ( id )"
.IX Subsection "add_comment ( id )"
Creates a Facebook::Graph::Publish::Comment object that you can use to comment on a note.
.PP
\fIid\fR
.IX Subsection "id"
.PP
The id of the post you want to comment on.
.SS "add_note ( )"
.IX Subsection "add_note ( )"
Creates a Facebook::Graph::Publish::Note object, which can be used to publish notes.
.SS "add_link ( )"
.IX Subsection "add_link ( )"
Creates a Facebook::Graph::Publish::Link object, which can be used to publish links.
.SS "add_event ( [id] )"
.IX Subsection "add_event ( [id] )"
Creates a Facebook::Graph::Publish::Event object, which can be used to publish events.
.PP
\fIid\fR
.IX Subsection "id"
.PP
Optionally provide an object id to place it on. Requires that you have administrative access to that page/object.
.SS "rsvp_maybe ( id )"
.IX Subsection "rsvp_maybe ( id )"
\&\s-1RSVP\s0 as 'maybe' to an event.
.PP
\fIid\fR
.IX Subsection "id"
.PP
The id of an event.
.SS "rsvp_attending ( id )"
.IX Subsection "rsvp_attending ( id )"
\&\s-1RSVP\s0 as 'attending' to an event.
.PP
\fIid\fR
.IX Subsection "id"
.PP
The id of an event.
.SS "rsvp_declined ( id )"
.IX Subsection "rsvp_declined ( id )"
\&\s-1RSVP\s0 as 'declined' to an event.
.PP
\fIid\fR
.IX Subsection "id"
.PP
The id of an event.
.SS "convert_sessions ( sessions )"
.IX Subsection "convert_sessions ( sessions )"
A utility method to convert old sessions into access tokens that can be used with the Graph \s-1API\s0. Returns an array reference of hash references of access tokens.
.PP
.Vb 7
\& [
\&   {
\&     "access_token": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
\&     "expires": 1271649600,
\&   },
\&   ...
\& ]
.Ve
.PP
See also Facebook::Graph::Session.
.PP
\fIsessions\fR
.IX Subsection "sessions"
.PP
An array reference of session ids from the old Facebook \s-1API\s0.
.SS "parse_signed_request ( signed_request )"
.IX Subsection "parse_signed_request ( signed_request )"
Allows the decoding of signed requests for canvas applications to ensure data passed back from Facebook isn't tampered with. You can read more about this at <http://developers.facebook.com/docs/authentication/canvas>.
.PP
\fIsigned_request\fR
.IX Subsection "signed_request"
.PP
A signature string passed from Facebook. To capture a signed request your app must be displayed within the Facebook canvas page and then you must pull the query parameter called \f(CW\*(C`signed_request\*(C'\fR from the query string.
.PP
\&\fB\s-1NOTE:\s0\fR To get this passed to your app you must enable it in your migration settings for your app (<http://www.facebook.com/developers/>).
.SH "EXCEPTIONS"
.IX Header "EXCEPTIONS"
This module throws exceptions when it encounters a problem. It uses Ouch to throw the exception, and the Exception typically takes 3 parts: code, message, and a data portion that is the \s-1URI\s0 that was originally requested. For example:
.PP
.Vb 8
\& eval { $fb\->call_some_method };
\& if (kiss 500) {
\&   say "error: ". $@\->message;
\&   say "uri: ".$@\->data;
\& }
\& else {
\&   throw $@; # rethrow the error
\& }
.Ve
.SH "TODO"
.IX Header "TODO"
I still need to add publishing albums/photos, deleting of content, impersonation, and analytics to have a feature complete \s-1API\s0. In addition, the module could use a lot more tests.
.SH "PREREQS"
.IX Header "PREREQS"
Any::Moose
\&\s-1JSON\s0
\&\s-1LWP\s0
LWP::Protocol::https
Mozilla::CA
\&\s-1URI\s0
DateTime
DateTime::Format::Strptime
MIME::Base64::URLSafe
URI::Encode
Ouch
.SS "Optional"
.IX Subsection "Optional"
Digest::SHA is used for signed requests. If you don't plan on using the signed request feature, then you do not need to install Digest::SHA.
.SH "SUPPORT"
.IX Header "SUPPORT"
.IP "Repository" 4
.IX Item "Repository"
http://github.com/rizen/Facebook\-Graph <http://github.com/rizen/Facebook-Graph>
.IP "Bug Reports" 4
.IX Item "Bug Reports"
http://github.com/rizen/Facebook\-Graph/issues <http://github.com/rizen/Facebook-Graph/issues>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
If you're looking for a fully featured Facebook client in Perl I highly recommend WWW::Facebook::API. It does just about everything, it just uses the old Facebook \s-1API\s0.
.SH "AUTHOR"
.IX Header "AUTHOR"
\&\s-1JT\s0 Smith <jt_at_plainblack_dot_com>
.SH "LEGAL"
.IX Header "LEGAL"
Facebook::Graph is Copyright 2010 Plain Black Corporation (<http://www.plainblack.com>) and is licensed under the same terms as Perl itself.
