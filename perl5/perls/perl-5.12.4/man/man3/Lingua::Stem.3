.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Lingua::Stem 3"
.TH Lingua::Stem 3 "2012-02-09" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Lingua::Stem \- Stemming of words
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Lingua::Stem qw(stem);
\&    my $stemmmed_words_anon_array   = stem(@words);
\&
\&    or for the OO inclined,
\&
\&    use Lingua::Stem;
\&    my $stemmer = Lingua::Stem\->new(\-locale => \*(AqEN\-UK\*(Aq);
\&    $stemmer\->stem_caching({ \-level => 2 });
\&    my $stemmmed_words_anon_array   = $stemmer\->stem(@words);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This routine applies stemming algorithms to its parameters,
returning the stemmed words as appropriate to the selected
locale.
.PP
You can import some or all of the class methods.
.PP
use Lingua::Stem qw (stem clear_stem_cache stem_caching
                     add_exceptions delete_exceptions
                     get_exceptions set_locale get_locale
                     :all :locale :exceptions :stem :caching);
.PP
.Vb 6
\& :all        \- imports  stem add_exceptions delete_exceptions get_exceptions
\&               set_locale get_locale
\& :stem       \- imports  stem
\& :caching    \- imports  stem_caching clear_stem_cache
\& :locale     \- imports  set_locale get_locale
\& :exceptions \- imports  add_exceptions delete_exceptions get_exceptions
.Ve
.PP
Currently supported locales are:
.PP
.Vb 10
\&      DA          \- Danish
\&      DE          \- German
\&      EN          \- English (also EN\-US and EN\-UK)
\&      FR          \- French
\&      GL          \- Galician
\&      IT          \- Italian
\&      NO          \- Norwegian
\&      PT          \- Portuguese
\&      RU          \- Russian (also RU\-RU and RU\-RU.KOI8\-R)
\&      SV          \- Swedish
.Ve
.PP
If you have the memory and lots of stemming to do,
I \fBstrongly\fR suggest using cache level 2 and processing
lists in 'big chunks' (long lists) for best performance.
.SS "Comparision with Lingua::Stem::Snowball"
.IX Subsection "Comparision with Lingua::Stem::Snowball"
It functions fairly similarly to the Lingua::Stem::Snowball
suite of stemmers, with the most significant differences being
.PP
1) Lingua::Stem is a 'pure perl' (no compiled \s-1XS\s0 code is needed) suite.
   Lingua::Stem::Snowball is \s-1XS\s0 based (must be compiled).
.PP
2) Lingua::Stem works with Perl 5.6 or later
   Lingua::Stem::Snowball works with Perl 5.8 or later
.PP
3) Lingua::Stem has an 'exceptions' system allowing you to override stemming on a 'case by case' basis.
   Lingua::Stem::Snowball does not have an 'exceptions' system.
.PP
4) A somewhat different set of supported languages:
.PP
.Vb 10
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | Language   | ISO code | Lingua::Stem | Lingua::Stem::Snowball |
\& |\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|
\& | Danish     | da       |      yes     |          yes           |
\& | Dutch      | nl       |       no     |          yes           |
\& | English    | en       |      yes     |          yes           |
\& | Finnish    | fi       |       no     |          yes           |
\& | French     | fr       |      yes     |          yes           |
\& | Galacian   | gl       |      yes     |           no           |
\& | German     | de       |      yes     |          yes           |
\& | Italian    | it       |      yes     |          yes           |
\& | Norwegian  | no       |      yes     |          yes           |
\& | Portuguese | pt       |      yes     |          yes           |
\& | Russian    | ru       |      yes     |          yes           |
\& | Spanish    | es       |       no     |          yes           |
\& | Swedish    | sv       |      yes     |          yes           |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.Ve
.PP
5) Lingua::Stem is faster for 'stem' (circa 30% faster than Lingua::Stem::Snowball)
.PP
6) Lingua::Stem::Snowball is faster for 'stem_in_place' (circa 30% faster than Lingua::Stem)
.PP
7) Lingua::Stem::Snowball is more consistent with regard to character set issues.
.PP
8) Lingua::Stem::Snowball is under active development. Lingua::Stem is currently fairly static.
.PP
Some benchmarks using Lingua::Stem 0.82 and Lingua::Stem::Snowball 0.94
gives an idea of how various options impact performance. The dataset was
The Works of Edgar Allen Poe, volumes 1\-5 from the Gutenberg Project processed
10 times in a row as single batch of words (processing a long text one word at a time is
very inefficient and drops the performance of Lingua::Stem by about 90%:
So \*(L"Don't Do That\*(R" ;) )
.PP
The benchmarks were run on a 3.06 Ghz P4 with \s-1HT\s0 on Fedora Core 5 Linux using Perl 5.8.8.
.PP
.Vb 11
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | source: collected_works_poe.txt | words: 454691 | unique words: 22802  |
\& |\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|
\& | module                          | config        | avg secs | words/sec |
\& |\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|
\& | Lingua::Stem 0.82               | no cache      | 1.922    |  236560   |
\& | Lingua::Stem 0.82               | cache level 2 | 1.235    |  368292   |
\& | Lingua::Stem 0.82               | cachelv2, sip | 0.798    |  569494   |
\& | Lingua::Stem::Snowball 0.94     | stem          | 1.622    |  280276   |
\& | Lingua::Stem::Snowball 0.94     | stem_in_place | 0.627    |  725129   |
\& +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.Ve
.PP
The script for the benchmark is included in the examples/ directory of this
distribution as benchmark_stemmers.plx.
.SH "CHANGES"
.IX Header "CHANGES"
.Vb 6
\& 0.84 2010.04.29 \- Documentation fixes to the En stemmer and removal
\&                   of the accidentally included lib/Lingua/test.pl file
\&                   Thanks goes to Aaron Naiman for bringing the
\&                   documentation error to my attention and to
\&                   Alexandr Ciornii and \*(Aqkmx\*(Aq for the pointing out
\&                   the problem with the test.pl file.
\&
\& 0.83 2007.06.23 \- Disabled Italian locale build tests due to
\&                   changes in Lingua::Stem::It breaking the tests.
\&
\& 0.82 2006.07.23 \- Added \*(Aqstem_in_place\*(Aq to base package.
\&                   Tweaks to documentation and build tests.
\&
\& 0.81 2004.07.26 \- Minor documentation tweak. No functional change.
\&
\& 0.80 2004.07.25 \- Added \*(AqRU\*(Aq, \*(AqRU_RU\*(Aq, \*(AqRU_RU.KOI\-8\*(Aq locale.
\&                   Added support for Lingua::Stem::Ru to
\&                   Makefile.PL and autoloader.
\&
\&                   Added documentation stressing use of caching
\&                   and batches for performance. Added support
\&                   for \*(Aq_\*(Aq as a seperator in the locale strings.
\&                   Added example benchmark script. Expanded copyright
\&                   credits.
\&
\& 0.70 2004.04.26 \- Added FR locale and documentation fixes
\&                   to Lingua::Stem::Gl
\&
\& 0.61 2003.09.28 \- Documentation fixes. No functional changes.
\&
\& 0.60 2003.04.05 \- Added more locales by wrappering various stemming
\&                   implementations. Documented currently supported
\&                   list of locales.
\&
\& 0.50 2000.09.14 \- Fixed major implementation error. Starting with
\&                   version 0.30 I forgot to include rulesets 2,3 and 4
\&                   for Porter\*(Aqs algorithm. The resulting stemming results
\&                   were very poor. Thanks go to <csyap@netfision.com>
\&                   for bringing the problem to my attention.
\&
\&                   Unfortunately, the fix inherently generates *different*
\&                   stemming results than 0.30 and 0.40 did. If you
\&                   need identically broken output \- use locale \*(Aqen\-broken\*(Aq.
\&
\& 0.40 2000.08.25 \- Added stem caching support as an option. This
\&                   can provide a large speedup to the operation
\&                   of the stemmer. Caching is default turned off
\&                   to maximize compatibility with previous versions.
\&
\& 0.30 1999.06.24 \- Replaced core of \*(AqEn\*(Aq stemmers with code from
\&                   Jim Richardson <jimr@maths.usyd.edu.au>
\&                   Aliased \*(Aqen\-us\*(Aq and \*(Aqen\-uk\*(Aq to \*(Aqen\*(Aq
\&                   Fixed \*(AqSYNOPSIS\*(Aq to correct return value
\&                   type for stemmed words (SYNOPIS error spotted
\&                   by <Arved_37@chebucto.ns.ca>)
\&
\& 0.20 1999.06.15 \- Changed to \*(Aq.pm\*(Aq module, moved into Lingua:: namespace,
\&                   added OO interface, optionalized the export of routines
\&                   into the caller\*(Aqs namespace, added named parameter
\&                   initialization, stemming exceptions, autoloaded
\&                   locale support and isolated case flattening to
\&                   localized stemmers prevent i18n problems later.
\&
\&                   Input and output text are assumed to be in UTF8
\&                   encoding (no operational impact right now, but
\&                   will be important when extending the module to
\&                   non\-English).
.Ve
.SH "METHODS"
.IX Header "METHODS"
.IP "new(...);" 4
.IX Item "new(...);"
Returns a new instance of a Lingua::Stem object and, optionally, selection
of the locale to be used for stemming.
.Sp
Examples:
.Sp
.Vb 2
\&  # By default the locale is en
\&  $us_stemmer = Lingua::Stem\->new;
\&
\&  # Turn on the cache
\&  $us_stemmer\->stem_caching({ \-level => 2 });
\&
\&  # Overriding the default for a specific instance
\&  $uk_stemmer = Lingua::Stem\->new({ \-locale => \*(Aqen\-uk\*(Aq });
\&
\&  # Overriding the default for a specific instance and changing the default
\&  $uk_stemmer = Lingua::Stem\->new({ \-default_locale => \*(Aqen\-uk\*(Aq });
.Ve
.IP "set_locale($locale);" 4
.IX Item "set_locale($locale);"
Sets the locale to one of the recognized locales.
locale identifiers are converted to lowercase.
.Sp
Called as a class method, it changes the default locale for all
subseqently generated object instances.
.Sp
Called as an instance method, it only changes the locale for
that particular instance.
.Sp
\&'croaks' if passed an unknown locale.
.Sp
Examples:
.Sp
.Vb 2
\& # Change default locale
\& Lingua::Stem::set_locale(\*(Aqen\-uk\*(Aq); # UK\*(Aqs spellings
\&
\& # Change instance locale
\& $self\->set_locale(\*(Aqen\-us\*(Aq);  # US\*(Aqs spellings
.Ve
.IP "get_locale;" 4
.IX Item "get_locale;"
Called as a class method, returns the current default locale.
.Sp
Example:
.Sp
.Vb 1
\& $default_locale = Lingua::Stem::get_locale;
.Ve
.Sp
Called as an instance method, returns the locale for the instance
.Sp
.Vb 1
\& $instance_locale = $stemmer\->get_locale;
.Ve
.IP "add_exceptions($exceptions_hash_ref);" 4
.IX Item "add_exceptions($exceptions_hash_ref);"
Exceptions allow overriding the stemming algorithm on a case by case
basis. It is done on an exact match and substitution basis: If a passed
word is identical to the exception it will be replaced by the specified
value. No case adjustments are performed.
.Sp
Called as a class method, adds exceptions to the default exceptions list
used for subsequently instantations of Lingua::Stem objects.
.Sp
Example:
.Sp
.Vb 4
\& # adding default exceptions
\& Lingua::Stem::add_exceptions({ \*(Aqemily\*(Aq => \*(Aqemily\*(Aq,
\&                                \*(Aqdriven\*(Aq => \*(Aqdriven\*(Aq,
\&                            });
.Ve
.Sp
Called as an instance method, adds exceptions only to the specific
instance.
.Sp
.Vb 2
\& # adding instance exceptions
\& $stemmer\->add_exceptions({ \*(Aqsteely\*(Aq => \*(Aqsteely\*(Aq });
.Ve
.Sp
The exceptions shortcut the normal stemming \- if an exception matches
no further stemming is performed after the substitution.
.Sp
Adding an exception with the same key value as an already defined
exception replaces the pre-existing exception with the new value.
.IP "delete_exceptions(@exceptions_list);" 4
.IX Item "delete_exceptions(@exceptions_list);"
The mirror of add_exceptions, this allows the _removal_ of exceptions
from either the defaults for the class or from the instance.
.Sp
.Vb 2
\& # Deletion of exceptions from class default exceptions
\& Lingua::Stem::delete_exceptions(\*(Aqaragorn\*(Aq,\*(Aqfrodo\*(Aq,\*(Aqsamwise\*(Aq);
\&
\& # Deletion of exceptions from instance
\& $stemmer\->delete_exceptions(\*(Aqsmaug\*(Aq,\*(Aqsauron\*(Aq,\*(Aqgollum\*(Aq);
\&
\& # Deletion of all class default exceptions
\& delete_exceptions;
\&
\& # Deletion of all exceptions from instance
\& $stemmer\->delete_exceptions;
.Ve
.IP "get_exceptions;" 4
.IX Item "get_exceptions;"
As a class method with no parameters it returns all the default exceptions
as an anonymous hash of 'exception' => 'replace with' pairs.
.Sp
Example:
.Sp
.Vb 2
\& # Returns all class default exceptions
\& $exceptions = Lingua::Stem::get_exceptions;
.Ve
.Sp
As a class method with parameters, it returns the default exceptions listed
in the parameters as an anonymous hash of 'exception' => 'replace with' pairs.
If a parameter specifies an undefined 'exception', the value is set to undef.
.Sp
.Vb 2
\& # Returns class default exceptions for \*(Aqemily\*(Aq and \*(Aqgeorge\*(Aq
\& $exceptions = Lingua::Stem::get_exceptions(\*(Aqemily\*(Aq,\*(Aqgeorge\*(Aq);
.Ve
.Sp
As an instance method, with no parameters it returns the currently active
exceptions for the instance.
.Sp
.Vb 2
\& # Returns all instance exceptions
\& $exceptions = $stemmer\->get_exceptions;
.Ve
.Sp
As an instance method with parameters, it returns the instance exceptions listed
in the parameters as an anonymous hash of 'exception' => 'replace with' pairs.
If a parameter specifies an undefined 'exception', the value is set to undef.
.Sp
.Vb 2
\& # Returns instance exceptions for \*(Aqlisa\*(Aq and \*(Aqbart\*(Aq
\& $exceptions = $stemmer\->get_exceptions(\*(Aqlisa\*(Aq,\*(Aqbart\*(Aq);
.Ve
.IP "stem(@list);" 4
.IX Item "stem(@list);"
Called as a class method, it applies the default settings
and stems the list of passed words, returning an anonymous
array with the stemmed words in the same order as the passed
list of words.
.Sp
Example:
.Sp
.Vb 2
\&    # Default settings applied
\&    my $anon_array_of_stemmed_words = Lingua::Stem::stem(@words);
.Ve
.Sp
Called as an instance method, it applies the instance's settings
and stems the list of passed words, returning an anonymous
array with the stemmed words in the same order as the passed
list of words.
.Sp
.Vb 2
\&   # Instance\*(Aqs settings applied
\&   my $stemmed_words = $stemmer\->stem(@words);
.Ve
.Sp
The stemmer performs best when handed long lists of words
rather than one word at a time. The cache also provides
a huge speed up if you are processing lots of text.
.IP "stem_in_place(@list);" 4
.IX Item "stem_in_place(@list);"
Stems the passed list of words 'in place'. It returns a reference to the modified list.
This is about 60% faster than the 'stem' method but modifies the original list. This currently
only works for the English locales.
.Sp
.Vb 1
\& Example:
\&
\&  my @words = ( \*(Aqa\*(Aq, \*(Aqlist\*(Aq, \*(Aqof\*(Aq, \*(Aqwords\*(Aq );
\&  my $stemmed_list_of_words = stem_in_place(@words);
\&
\&  # \*(Aq$stemmed_list_of_words\*(Aq refers to the @words list
\&  # after \*(Aqstem_in_place\*(Aq has executed
.Ve
.Sp
\&\fB\s-1DO\s0 \s-1NOT\s0\fR use this method of stemming if you need to keep the original list of words. Its
performance gain derives entirely from the fact it \fBdoes not\fR make a copy the original list
but instead overwrites the original list.
.Sp
If you try something like
.Sp
.Vb 2
\&  my @words_for_stemming = @words;
\&  my $stemmed_list_of_words = stem_in_place(@words_for_stemming);
.Ve
.Sp
thinking you will get a speed boost while keeping the original list, you won't: You wipe out
the speed gain completely with your copying of the original list. You should just use the 'stem'
method instead on the original list of words if you need to keep the original list.
.IP "clear_stem_cache;" 4
.IX Item "clear_stem_cache;"
Clears the stemming cache for the current locale. Can be called as either
a class method or an instance method.
.Sp
.Vb 1
\&    $stemmer\->clear_stem_cache;
\&
\&    clear_stem_cache;
.Ve
.IP "stem_caching ({ \-level => 0|1|2 });" 4
.IX Item "stem_caching ({ -level => 0|1|2 });"
Sets stemming cache level for the current locale. Can be called as either
a class method or an instance method.
.Sp
.Vb 1
\&    $stemmer\->stem_caching({ \-level => 1 });
\&
\&    stem_caching({ \-level => 1 });
.Ve
.Sp
For the sake of maximum compatibility with previous versions,
stem caching is set to '\-level => 0' by default.
.Sp
\&'\-level' definitions
.Sp
.Vb 1
\& \*(Aq0\*(Aq means \*(Aqno caching\*(Aq. This is the default level.
\&
\& \*(Aq1\*(Aq means \*(Aqcache per run\*(Aq. This caches stemming results during each
\&    call to \*(Aqstem\*(Aq.
\&
\& \*(Aq2\*(Aq means \*(Aqcache indefinitely\*(Aq. This caches stemming results until
\&    either the process exits or the \*(Aqclear_stem_cache\*(Aq method is called.
.Ve
.Sp
stem caching is global to the locale. If you turn on stem caching for one
instance of a locale stemmer, all instances using the same locale will have it
turned on as well.
.Sp
I \fB\s-1STRONGLY\s0\fR suggest turning caching on if you have enough memory and
are processing a lot of data.
.SH "VERSION"
.IX Header "VERSION"
.Vb 1
\& 0.84 2008.07.27
.Ve
.SH "NOTES"
.IX Header "NOTES"
It started with the 'Text::Stem' module which has been adapted into
a more general framework and moved into the more
language oriented 'Lingua' namespace and re-organized to support a \s-1OOP\s0
interface as well as switch core 'En' locale stemmers.
.PP
Version 0.40 added a cache for stemmed words. This can provide up
to a several fold performance improvement.
.PP
Organization is such that extending this module to any number
of languages should be direct and simple.
.PP
Case flattening is a function of the language, so the 'exceptions'
methods have to be used appropriately to the language. For 'En'
family stemming, use lower case words, only, for exceptions.
.SH "AUTHORS"
.IX Header "AUTHORS"
.Vb 2
\& Benjamin Franz <snowhare@nihongo.org>
\& Jim Richardson  <imr@maths.usyd.edu.au>
.Ve
.SH "CREDITS"
.IX Header "CREDITS"
.Vb 8
\& Jim Richardson             <imr@maths.usyd.edu.au>
\& Ulrich Pfeifer             <pfeifer@ls6.informatik.uni\-dortmund.de>
\& Aldo Calpini               <dada@perl.it>
\& xern                       <xern@cpan.org>
\& Ask Solem Hoel             <ask@unixmonks.net>
\& Dennis Haney               <davh@davh.dk>
\& Se\*'bastien Darribere\-Pleyt  <sebastien.darribere@lefute.com>
\& Aleksandr Guidrevitch      <pillgrim@mail.ru>
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 7
\& Lingua::Stem::En            Lingua::Stem::En            Lingua::Stem::Da
\& Lingua::Stem::De            Lingua::Stem::Gl            Lingua::Stem::No
\& Lingua::Stem::Pt            Lingua::Stem::Sv            Lingua::Stem::It
\& Lingua::Stem::Fr            Lingua::Stem::Ru            Text::German
\& Lingua::PT::Stemmer         Lingua::GL::Stemmer         Lingua::Stem::Snowball::No
\& Lingua::Stem::Snowball::Se  Lingua::Stem::Snowball::Da  Lingua::Stem::Snowball::Sv
\& Lingua::Stemmer::GL         Lingua::Stem::Snowball
\&
\& http://snowball.tartarus.org
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1999\-2004
.PP
Freerun Technologies, Inc (Freerun),
Jim Richardson, University of Sydney <imr@maths.usyd.edu.au>
and Benjamin Franz <snowhare@nihongo.org>. All rights reserved.
.PP
Text::German was written and is copyrighted by Ulrich Pfeifer.
.PP
Lingua::Stem::Snowball::Da was written and is copyrighted by
Dennis Haney and Ask Solem Hoel.
.PP
Lingua::Stem::It was written and is copyrighted by Aldo Calpini.
.PP
Lingua::Stem::Snowball::No, Lingua::Stem::Snowball::Se, Lingua::Stem::Snowball::Sv were
written and are copyrighted by Ask Solem Hoel.
.PP
Lingua::Stemmer::GL and Lingua::PT::Stemmer were written and are copyrighted by Xern.
.PP
Lingua::Stem::Fr was written and is copyrighted by  Aldo Calpini and SA\*~Xbastien Darribere-Pley.
.PP
Lingua::Stem::Ru was written and is copyrighted by Aleksandr Guidrevitch.
.PP
This software may be freely copied and distributed under the same
terms and conditions as Perl.
.SH "BUGS"
.IX Header "BUGS"
None known.
.SH "TODO"
.IX Header "TODO"
Add more languages. Extend regression tests. Add support for the
Lingua::Stem::Snowball family of stemmers as an alternative core stemming
engine. Extend 'stem_in_place' functionality to non-English stemmers.
