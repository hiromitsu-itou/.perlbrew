.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LWP::Online 3"
.TH LWP::Online 3 "2011-07-08" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
LWP::Online \- Does your process have access to the web
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use LWP::Online \*(Aqonline\*(Aq;
\&  
\&  # "Is the internet working?"
\&  die "NO INTARWWEB!!!" unless online();
\&  
\&  # The above means something like this
\&  unless ( online(\*(Aqhttp\*(Aq) ) {
\&      die "No basic http access to the web";
\&  }
\&  
\&  # Special syntax for use in test scripts that need
\&  # "real" access to the internet. Scripts will automatically
\&  # skip if connection fails.
\&  use LWP::Online \*(Aq:skip_all\*(Aq;
\&  use Test::More tests => 4; #after LWP::Online
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module attempts to answer, as accurately as it can, one of the
nastiest technical questions there is.
.PP
\&\fBAm I on the internet?\fR
.PP
The answer is useful in a wide range of decisions. For example...
.PP
\&\fIShould my test scripts run the online portion of the tests or
just skip them?\fR
.PP
\&\fIDo I try to fetch fresh data from the server?\fR
.PP
\&\fIIf my request to the server breaks, is it because I'm offline, or
because the server is offline?\fR
.PP
And so on, and so forth.
.PP
But a host of networking and security issues make this problem
very difficult. There are firewalls, proxies (both well behaved and
badly behaved). We might not have \s-1DNS\s0. We might not have a network
card at all!
.PP
You might have network access, but only to a for-money wireless network
that responds to ever \s-1HTTP\s0 request with a page asking you to enter your
credit card details for paid access. Which means you don't \*(L"\s-1REALLY\s0\*(R" have
access.
.PP
The mere nature of the question makes it practically unsolvable.
.PP
But with the answer being so useful, and the only other alternative being
to ask the user \*(L"duh... are you online?\*(R" (when you might not have a user
at all) it's my gut feeling that it is worthwhile at least making an
attempt to solve the problem, if only in a limited way.
.SS "Why LWP::Online? Why not Net::Online?"
.IX Subsection "Why LWP::Online? Why not Net::Online?"
The nice thing about LWP::Online is that \s-1LWP\s0 deals with a whole range of
different transports, and is very commonly installed. \s-1HTTP\s0, \s-1HTTPS\s0, \s-1FTP\s0,
and so on and so forth.
.PP
Attempting to do a more generalised Net::Online that might also check for
\&\s-1SSH\s0 and so on would end up most likely having to install a whole bunch of
modules that you most likely will never use.
.PP
So \s-1LWP\s0 forms a nice base on which to write a module that covers most of
the situations in which you might care, while keeping the dependency
overhead down to a minimum.
.SS "Scope"
.IX Subsection "Scope"
\&\*(L"Am I online?\*(R" is inherently an Open Problem.
.PP
That is, it's a problem that had no clean permanent solution, and for
which you could just keep writing more and more functionality
indefinitely, asymtopically approaching 100% correctness but never
reaching it.
.PP
And so this module is intended to do as good a job as possible, without
having to resort to asking any human questions (who may well get it wrong
anyway), and limiting itself to a finite amount of programming work and
a reasonable level of memory overhead to load the code.
.PP
It is thus understood the module will \fBnever\fR be perfect, and that if
any new functionality is desired, it needs to be able to implemented by
the person that desires the new behaviour, and in a reasonably small
amount of additional code.
.PP
This module is also \fBnot\fR intended to compensate for malicious behaviour
of any kind, it is quite possible that some malicious person might proxy
fake versions of sites that pass our content checks and then proceed
to show you other bad pages.
.SS "Test Mode"
.IX Subsection "Test Mode"
.Vb 1
\&  use LWP::Online \*(Aq:skip_all\*(Aq;
.Ve
.PP
As a convenience when writing tests scripts base on Test::More, the
special ':skip_all' param can be provided when loading \fBLWP::Online\fR.
.PP
This implements the functional equivalent of the following.
.PP
.Vb 8
\&  BEGIN {
\&    require Test::More;
\&    unless ( LWP::Online::online() ) {
\&      Test::More\->import(
\&        skip_all => \*(AqTest requires a working internet connection\*(Aq
\&      );
\&    }
\&  }
.Ve
.PP
The :skip_all special import flag can be mixed with regular imports.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "online"
.IX Subsection "online"
.Vb 2
\&  # Default check (uses http)
\&  online() or die "No Internet";
\&  
\&  # The above is equivalent to
\&  online(\*(Aqhttp\*(Aq) or die "No Internet";
.Ve
.PP
The importable \fBonline\fR function is the main functionality provided
by \fBLWP::Online\fR. It takes a single optional transport name ('http'
by default) and checks that \s-1LWP\s0 connectivity is available for that
transport.
.PP
Because it is intended as a Do What You Mean function, it checks not
only that a network connection is available, and http requests return
content, but also that it returns the \s-1CORRECT\s0 content instead of
unexpected content supplied by a man in the middle.
.PP
For example, many wireless connections require login or payment, and
will return a service provider page for any \s-1URI\s0 that you attempt to
fetch.
.PP
The set of websites used for the testing is the Google, Amazon,
Yahoo and \s-1CNN\s0 websites. The check is for a copyright statement on their
homepage, and the function returns true as soon as two of the website
return correctly, making the method relatively redundant.
.PP
Returns true if the computer is \*(L"online\*(R" (has a working connection via
\&\s-1LWP\s0) or false if not.
.SS "offline"
.IX Subsection "offline"
The importable \fBoffline\fR function is provided as a convenience.
.PP
It provides a simple pass-through (including any params) to the \fBonline\fR
function, but with a negated result.
.SH "TO DO"
.IX Header "TO DO"
\&\- Add more transport types that can be checked, somehow keeping the
code growth under control.
.SH "SUPPORT"
.IX Header "SUPPORT"
This module is stored in an Open Repository at the following address.
.PP
http://svn.ali.as/cpan/trunk/LWP\-Online <http://svn.ali.as/cpan/trunk/LWP-Online>
.PP
Write access to the repository is made available automatically to any
published \s-1CPAN\s0 author, and to most other volunteers on request.
.PP
If you are able to submit your bug report in the form of new (failing)
unit tests (which for this module will be extremely difficult), or can
apply your fix directly instead of submitting a patch, you are \fBstrongly\fR
encouraged to do so as the author currently maintains over 100 modules
and it can take some time to deal with non-Critical bug reports or patches.
.PP
This will guarentee that your issue will be addressed in the next
release of the module.
.PP
If you cannot provide a direct test or fix, or don't have time to do so,
then regular bug reports are still accepted and appreciated via the \s-1CPAN\s0
bug tracker.
.PP
http://rt.cpan.org/NoAuth/ReportBug.html?Queue=LWP\-Online <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=LWP-Online>
.PP
For other issues, for commercial enhancement or support, or to have your
write access enabled for the repository, contact the author at the email
address above.
.SH "AUTHOR"
.IX Header "AUTHOR"
Adam Kennedy <adamk@cpan.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
LWP::Simple
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2006 \- 2011 Adam Kennedy.
.PP
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
