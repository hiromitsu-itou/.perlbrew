.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Imager::Probe 3"
.TH Imager::Probe 3 "2011-11-25" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Imager::Probe \- hot needle of inquiry for libraries
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  require Imager::Probe;
\&
\&  my %probe = 
\&    (
\&     # short name of what we\*(Aqre looking for (displayed to user)
\&     name => "FOO",
\&     # pkg\-config lookup
\&     pkg => [ qw/name1 name2 name3/ ],
\&     # perl subs that probe for the library
\&     code => [ \e&foo_probe1, \e&foo_probe2 ],
\&     # or just: code => \e&foo_probe,
\&     inccheck => sub { ... },
\&     libcheck => sub { ... },
\&     # search for this library if libcheck not supplied
\&     libbase => "foo",
\&     # library link time options, uses libbase to build options otherwise
\&     libopts => "\-lfoo",
\&     # C code to check the library is sane
\&     testcode => "...",
\&     # header files needed
\&     testcodeheaders => [ "stdio.h", "foo.h" ],
\&    );
\&  my $result = Imager::Probe\->probe(\e%probe)
\&    or print "Foo library not found: ",Imager::Probe\->error;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Does the probes that were hidden in Imager's \fIMakefile.PL\fR, pulled
out so the file format libraries can be externalized.
.PP
The return value is either nothing if the probe fails, or a hash
containing:
.IP "\(bu" 4
\&\f(CW\*(C`INC\*(C'\fR \- \f(CW\*(C`\-I\*(C'\fR and other C options
.IP "\(bu" 4
\&\f(CW\*(C`LIBS\*(C'\fR \- \f(CW\*(C`\-L\*(C'\fR, \f(CW\*(C`\-l\*(C'\fR and other link-time options
.IP "\(bu" 4
\&\f(CW\*(C`DEFINE\*(C'\fR \- \f(CW\*(C`\-D\*(C'\fR options, if any.
.PP
The possible values for the hash supplied to the \fIprobe()\fR method are:
.IP "\(bu" 4
\&\f(CW\*(C`pkg\*(C'\fR \- an array of \fIpkg-config\fR names to probe for.  If the
\&\fIpkg-config\fR checks pass, \f(CW\*(C`inccheck\*(C'\fR and \f(CW\*(C`libcheck\*(C'\fR aren't used.
.IP "\(bu" 4
\&\f(CW\*(C`inccheck\*(C'\fR \- a code reference that checks if the supplied include
directory contains the required header files.
.IP "\(bu" 4
\&\f(CW\*(C`libcheck\*(C'\fR \- a code reference that checks if the supplied library
directory contains the required library files.  Note: the
\&\fIMakefile.PL\fR version of this was supplied all of the library file
names instead.
.IP "\(bu" 4
\&\f(CW\*(C`libbase\*(C'\fR \- if \f(CW\*(C`inccheck\*(C'\fR is supplied, but \f(CW\*(C`libcheck\*(C'\fR isn't, then a
\&\f(CW\*(C`libcheck\*(C'\fR that checks for \f(CW\*(C`lib\*(C'\fR\fIlibbase\fR\fI\f(CI$Config\fI{_a}\fR and
\&\f(CW\*(C`lib\*(C'\fR\fIlibbase\fR.\fI\f(CI$Config\fI{so}\fR is created.  If \f(CW\*(C`libopts\*(C'\fR isn't
supplied then that can be synthesized as \f(CW\*(C`\-l\*(C'\fR\f(CW\*(C`<\f(CIlibbase\f(CW\*(C'\fR>.
.IP "\(bu" 4
\&\f(CW\*(C`libopts\*(C'\fR \- if the libraries are found via \f(CW\*(C`inccheck\*(C'\fR/\f(CW\*(C`libcheck\*(C'\fR,
these are the \f(CW\*(C`\-l\*(C'\fR options to supply during the link phase.
.IP "\(bu" 4
\&\f(CW\*(C`code\*(C'\fR \- a code reference to perform custom checks.  Returns the
probe result directly.  Can also be an array ref of functions to call.
.IP "\(bu" 4
\&\f(CW\*(C`testcode\*(C'\fR \- test C code that is run with Devel::CheckLib.  You also
need to set \f(CW\*(C`testcodeheaders\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`testcodeprologue\*(C'\fR \- C code to insert between the headers and the
main function.
.IP "\(bu" 4
\&\f(CW\*(C`incpath\*(C'\fR \- \f(CW$Config{path_sep}\fR separated list of header file
directories to check, or a reference to an array of such.
.IP "\(bu" 4
\&\f(CW\*(C`libpath\*(C'\fR \- \f(CW$Config{path_sep}\fR separated list of library file
directories to check, or a reference to an array of such.
