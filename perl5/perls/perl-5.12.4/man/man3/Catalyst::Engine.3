.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Catalyst::Engine 3"
.TH Catalyst::Engine 3 "2011-11-18" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::Engine \- The Catalyst Engine
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See Catalyst.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "$self\->finalize_body($c)"
.el .SS "\f(CW$self\fP\->finalize_body($c)"
.IX Subsection "$self->finalize_body($c)"
Finalize body.  Prints the response output.
.ie n .SS "$self\->finalize_cookies($c)"
.el .SS "\f(CW$self\fP\->finalize_cookies($c)"
.IX Subsection "$self->finalize_cookies($c)"
Create CGI::Simple::Cookie objects from \f(CW$c\fR\->res\->cookies, and set them as
response headers.
.ie n .SS "$self\->finalize_error($c)"
.el .SS "\f(CW$self\fP\->finalize_error($c)"
.IX Subsection "$self->finalize_error($c)"
Output an appropriate error message. Called if there's an error in \f(CW$c\fR
after the dispatch has finished. Will output debug messages if Catalyst
is in debug mode, or a `please come back later` message otherwise.
.ie n .SS "$self\->finalize_headers($c)"
.el .SS "\f(CW$self\fP\->finalize_headers($c)"
.IX Subsection "$self->finalize_headers($c)"
Abstract method, allows engines to write headers to response
.ie n .SS "$self\->finalize_read($c)"
.el .SS "\f(CW$self\fP\->finalize_read($c)"
.IX Subsection "$self->finalize_read($c)"
.ie n .SS "$self\->finalize_uploads($c)"
.el .SS "\f(CW$self\fP\->finalize_uploads($c)"
.IX Subsection "$self->finalize_uploads($c)"
Clean up after uploads, deleting temp files.
.ie n .SS "$self\->prepare_body($c)"
.el .SS "\f(CW$self\fP\->prepare_body($c)"
.IX Subsection "$self->prepare_body($c)"
sets up the Catalyst::Request object body using HTTP::Body
.ie n .SS "$self\->prepare_body_chunk($c)"
.el .SS "\f(CW$self\fP\->prepare_body_chunk($c)"
.IX Subsection "$self->prepare_body_chunk($c)"
Add a chunk to the request body.
.ie n .SS "$self\->prepare_body_parameters($c)"
.el .SS "\f(CW$self\fP\->prepare_body_parameters($c)"
.IX Subsection "$self->prepare_body_parameters($c)"
Sets up parameters from body.
.ie n .SS "$self\->prepare_connection($c)"
.el .SS "\f(CW$self\fP\->prepare_connection($c)"
.IX Subsection "$self->prepare_connection($c)"
Abstract method implemented in engines.
.ie n .SS "$self\->prepare_cookies($c)"
.el .SS "\f(CW$self\fP\->prepare_cookies($c)"
.IX Subsection "$self->prepare_cookies($c)"
Parse cookies from header. Sets a CGI::Simple::Cookie object.
.ie n .SS "$self\->prepare_headers($c)"
.el .SS "\f(CW$self\fP\->prepare_headers($c)"
.IX Subsection "$self->prepare_headers($c)"
.ie n .SS "$self\->prepare_parameters($c)"
.el .SS "\f(CW$self\fP\->prepare_parameters($c)"
.IX Subsection "$self->prepare_parameters($c)"
sets up parameters from query and post parameters.
.ie n .SS "$self\->prepare_path($c)"
.el .SS "\f(CW$self\fP\->prepare_path($c)"
.IX Subsection "$self->prepare_path($c)"
abstract method, implemented by engines.
.ie n .SS "$self\->prepare_request($c)"
.el .SS "\f(CW$self\fP\->prepare_request($c)"
.IX Subsection "$self->prepare_request($c)"
.ie n .SS "$self\->prepare_query_parameters($c)"
.el .SS "\f(CW$self\fP\->prepare_query_parameters($c)"
.IX Subsection "$self->prepare_query_parameters($c)"
process the query string and extract query parameters.
.ie n .SS "$self\->prepare_read($c)"
.el .SS "\f(CW$self\fP\->prepare_read($c)"
.IX Subsection "$self->prepare_read($c)"
prepare to read from the engine.
.ie n .SS "$self\->prepare_request(@arguments)"
.el .SS "\f(CW$self\fP\->prepare_request(@arguments)"
.IX Subsection "$self->prepare_request(@arguments)"
Populate the context object from the request object.
.ie n .SS "$self\->prepare_uploads($c)"
.el .SS "\f(CW$self\fP\->prepare_uploads($c)"
.IX Subsection "$self->prepare_uploads($c)"
.ie n .SS "$self\->prepare_write($c)"
.el .SS "\f(CW$self\fP\->prepare_write($c)"
.IX Subsection "$self->prepare_write($c)"
Abstract method. Implemented by the engines.
.ie n .SS "$self\->read($c, [$maxlength])"
.el .SS "\f(CW$self\fP\->read($c, [$maxlength])"
.IX Subsection "$self->read($c, [$maxlength])"
Reads from the input stream by calling \f(CW\*(C`$self\->read_chunk\*(C'\fR.
.PP
Maintains the read_length and read_position counters as data is read.
.ie n .SS "$self\->read_chunk($c, $buffer, $length)"
.el .SS "\f(CW$self\fP\->read_chunk($c, \f(CW$buffer\fP, \f(CW$length\fP)"
.IX Subsection "$self->read_chunk($c, $buffer, $length)"
Each engine implements read_chunk as its preferred way of reading a chunk
of data. Returns the number of bytes read. A return of 0 indicates that
there is no more data to be read.
.ie n .SS "$self\->read_length"
.el .SS "\f(CW$self\fP\->read_length"
.IX Subsection "$self->read_length"
The length of input data to be read.  This is obtained from the Content-Length
header.
.ie n .SS "$self\->read_position"
.el .SS "\f(CW$self\fP\->read_position"
.IX Subsection "$self->read_position"
The amount of input data that has already been read.
.ie n .SS "$self\->run($app, $server)"
.el .SS "\f(CW$self\fP\->run($app, \f(CW$server\fP)"
.IX Subsection "$self->run($app, $server)"
Start the engine. Builds a \s-1PSGI\s0 application and calls the
run method on the server passed in, which then causes the
engine to loop, handling requests..
.ie n .SS "build_psgi_app ($app, @args)"
.el .SS "build_psgi_app ($app, \f(CW@args\fP)"
.IX Subsection "build_psgi_app ($app, @args)"
Builds and returns a \s-1PSGI\s0 application closure, wrapping it in the reverse proxy
middleware if the using_frontend_proxy config setting is set.
.ie n .SS "$self\->write($c, $buffer)"
.el .SS "\f(CW$self\fP\->write($c, \f(CW$buffer\fP)"
.IX Subsection "$self->write($c, $buffer)"
Writes the buffer to the client.
.ie n .SS "$self\->unescape_uri($uri)"
.el .SS "\f(CW$self\fP\->unescape_uri($uri)"
.IX Subsection "$self->unescape_uri($uri)"
Unescapes a given \s-1URI\s0 using the most efficient method available.  Engines such
as Apache may implement this using Apache's C\-based modules, for example.
.ie n .SS "$self\->finalize_output"
.el .SS "\f(CW$self\fP\->finalize_output"
.IX Subsection "$self->finalize_output"
<obsolete>, see finalize_body
.ie n .SS "$self\->env"
.el .SS "\f(CW$self\fP\->env"
.IX Subsection "$self->env"
Hash containing environment variables including many special variables inserted
by \s-1WWW\s0 server \- like SERVER_*, REMOTE_*, HTTP_* ...
.PP
Before accessing environment variables consider whether the same information is
not directly available via Catalyst objects \f(CW$c\fR\->request, \f(CW$c\fR\->engine ...
.PP
\&\s-1BEWARE:\s0 If you really need to access some environment variable from your Catalyst
application you should use \f(CW$c\fR\->engine\->env\->{\s-1VARNAME\s0} instead of \f(CW$ENV\fR{\s-1VARNAME\s0},
as in some environments the \f(CW%ENV\fR hash does not contain what you would expect.
.SH "AUTHORS"
.IX Header "AUTHORS"
Catalyst Contributors, see Catalyst.pm
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This library is free software. You can redistribute it and/or modify it under
the same terms as Perl itself.
