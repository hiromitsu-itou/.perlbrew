.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Facebook::Graph::Cookbook::Recipe1 3"
.TH Facebook::Graph::Cookbook::Recipe1 3 "2011-10-19" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Facebook::Graph::Cookbook::Recipe1 \- Building Privileged Applications
.SH "VERSION"
.IX Header "VERSION"
version 1.0301
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Let's build a privileged Facebook application from nothing.
.SS "Things To Think About"
.IX Subsection "Things To Think About"
Though templating systems such as Template::Toolkit and web frameworks such as Dancer and content management systems such as WebGUI <http://www.webgui.org/> are out of scope for this document, when you build your own application, you should definitely consider using them.
.PP
For simplicity sake, in this recipe we'll be storing important information directly in the code. This is a terrible practice. Instead use a config file system like Config::JSON to store your settings.
.SS "Assumptions"
.IX Subsection "Assumptions"
This recipe assumes that you know and have Plack installed and that you have a Facebook (<http://www.facebook.com>) account.
.PP
You'll also have to be able to point a domain name to a server that is accessible from the Internet. \s-1DNS\s0 and server configuration are way beyond the scope of this document.
.SH "RECIPE"
.IX Header "RECIPE"
.SS "Step 1: Set up the developer application on Facebook."
.IX Subsection "Step 1: Set up the developer application on Facebook."
Go to <http://apps.facebook.com/developer>.
.PP
Click \*(L"Allow\*(R".
.SS "Step 2: Create your application."
.IX Subsection "Step 2: Create your application."
Go to <http://www.facebook.com/developers/createapp.php> or click \*(L"Set Up New Application\*(R" from the developer application.
.PP
Fill in an application name. The only restriction is that it can't use a Facebook trademark or be similar to official Facebook application names.
.PP
Agree to the terms of servce.
.PP
Click \*(L"Create Application\*(R".
.SS "Step 3: The Connect tab."
.IX Subsection "Step 3: The Connect tab."
After creating your application, go to the \*(L"Connect\*(R" tab.
.PP
Fill in the \*(L"Connect \s-1URL\s0\*(R" field. It should be something like \f(CW\*(C`http://www.yourapplication.com/facebook/\*(C'\fR. It is the base \s-1URL\s0 to where you'll be deploying your application. The trailing slash is required.
.PP
Click \*(L"save\*(R".
.SS "Step 4: Note your application settings."
.IX Subsection "Step 4: Note your application settings."
You either want to make note of your \*(L"Application \s-1ID\s0\*(R" and your \*(L"Application Secret\*(R" or bookmark this page so you can come back to it. You'll need these later.
.SS "Step 5: Create app.psgi."
.IX Subsection "Step 5: Create app.psgi."
Create a file called \f(CW\*(C`app.psgi\*(C'\fR. Start it off like this:
.PP
.Vb 5
\& use strict;
\& use Plack::App::URLMap;
\& use Plack::Request;
\& use Facebook::Graph;
\& use URI;
\&
\& my $urlmap = Plack::App::URLMap\->new;
\& 
\& # your code will go here
\&
\& $urlmap\->to_app;
.Ve
.PP
All the code we have you add should go in the \f(CW\*(C`# your code will go here\*(C'\fR block, in the order that we have you add it.
.SS "Step 6: Create your Facebook::Graph object."
.IX Subsection "Step 6: Create your Facebook::Graph object."
Now we can finally start building Facebook::Graph into our app.
.PP
.Vb 5
\& my $fb = Facebook::Graph\->new(
\&    postback    => \*(Aqhttp://www.yourapplication.com/facebook/postback\*(Aq,
\&    app_id      => \*(AqPut Your Application ID Here\*(Aq,
\&    secret      => \*(AqPut Your Application Secret Here\*(Aq,
\& );
.Ve
.PP
Now you need the \s-1URL\s0 you entered in step 3, and the application \s-1ID\s0 and secret you got in step 4.
.PP
On the end of the url, add \f(CW\*(C`postback\*(C'\fR. This could be anything really, but it needs to be separate from the Connect \s-1URL\s0.
.SS "Step 7: Create your application's connect page."
.IX Subsection "Step 7: Create your application's connect page."
Now we need to create the authorization redirect. This is where we tell Facebook what permissions we want. There is a complete list of permissions documented at <http://developers.facebook.com/docs/authentication/permissions>.
.PP
If we only wanted basic permissions we can leave the \f(CW\*(C`extend_permissions\*(C'\fR call out. But for this app let's say we want access to the user's email address and we want to be able to interact with the user's account even when they aren't online.
.PP
.Vb 12
\& my $connect = sub {
\&    my $env = shift;
\&    my $request = Plack::Request\->new( $env );
\&    my $response = $request\->new_response;
\&    $response\->redirect(
\&        $fb
\&        \->authorize
\&        \->extend_permissions( qw(email offline_access) )
\&        \->uri_as_string
\&    );
\&    return $response\->finalize;
\& };
\&
\& $urlmap\->map("/facebook" => $connect);
.Ve
.PP
We map the subroutine we created to \f(CW\*(C`/facebook\*(C'\fR because we'll likely have other things we want to display at \f(CW\*(C`/\*(C'\fR. If we wanted to display something else at \f(CW\*(C`/facebook\*(C'\fR we could have mapped this function to \f(CW\*(C`/facebook/authorize\*(C'\fR. It really doesn't matter what \s-1URL\s0 we use here, all that matters is that when we want our users to authenticate against Facebook, this is the \s-1URL\s0 that we're going to send them to in our application.
.SS "Step 8: Create the Facebook access token postback page."
.IX Subsection "Step 8: Create the Facebook access token postback page."
Our connect/authorization page will redirect the user to Facebook to authorize our app. Now we need to create the page that the user will be redirected back to from Facebook. This is the \f(CW\*(C`postback\*(C'\fR that we created in step 6.
.PP
.Vb 3
\& my $postback = sub {
\&    my $env = shift;
\&    my $request = Plack::Request\->new( $env );
\&
\&    # turn our authorization code into an access token
\&    $fb\->request_access_token($request\->param(\*(Aqcode\*(Aq));
\&
\&    # store our access token to a database, a cookie, or pass it throuh the URL
\&    my $uri = URI\->new(\*(Aqhttp://www.yourapplication.com/search\*(Aq);
\&    $uri\->query_form( access_token => $fb\->access_token );
\&
\&    my $response = $request\->new_response;
\&    $response\->redirect( $uri\->as_string );
\&    return $response\->finalize;
\& };
\&
\& $urlmap\->map("/facebook/postback" => $postback);
.Ve
.PP
It's really stupid of us to pass our access token along the \s-1URL\s0 especially since we requested \f(CW\*(C`offline_access\*(C'\fR. We're only doing it here to demonstrate the usage of it. If you're requesting offline access, you should keep the access token locked away in a secure database. If you want to pass it along the \s-1URL\s0, or store it in a cookie, you should \fBnot\fR request \f(CW\*(C`offline_access\*(C'\fR.
.SS "Step 9: Let's do something already!"
.IX Subsection "Step 9: Let's do something already!"
So now that we finally have an access token we can start making privileged requests. That works like this:
.PP
.Vb 3
\& my $search = sub {
\&    my $env = shift;
\&    my $request = Plack::Request\->new( $env );
\&
\&    # display a search
\&    my $out = \*(Aq<html>
\&    <body>
\&    <form>
\&    <input type="hidden" name="access_token" value="\*(Aq. $request\->param(\*(Aqaccess_token\*(Aq) .\*(Aq">
\&    <input type="text" name="q" value="\*(Aq. $request\->param(\*(Aqq\*(Aq) .\*(Aq">
\&    <input type="submit" value="Search">
\&    </form>
\&    <pre>
\&    \*(Aq;
\&
\&    # display the results if a search is made
\&    if ($request\->param(\*(Aqq\*(Aq)) {
\&        $fb\->access_token( $request\->param(\*(Aqaccess_token\*(Aq) );
\&        my $response = $fb\->query
\&            \->search($request\->param(\*(Aqq\*(Aq), \*(Aquser\*(Aq)
\&            \->limit_results(10)
\&            \->request;
\&        $out .= eval{$response\->as_json};
\&        if ($@) {
\&            $out .= \*(AqERROR: \*(Aq.$@\->[1];
\&        }
\&    }
\&
\&    # close everything up
\&    $out .= \*(Aq
\&    </pre>
\&    </body>
\&    </html>
\&    \*(Aq;
\&
\&    my $response = $request\->new_response;
\&    $response\->status(200);
\&    $response\->content_type(\*(Aqtext/html\*(Aq);
\&    $response\->body($out);
\&    return $response\->finalize;
\& };
\&
\& $urlmap\->map("/search" => $search);
.Ve
.SS "Step 10: Start the application and let's test this puppy out."
.IX Subsection "Step 10: Start the application and let's test this puppy out."
On your server (the one that www.yourapplication.com points to) run the following command (assuming you're in the folder with app.psgi).
.PP
.Vb 1
\& sudo plackup \-\-port 80 app.psgi
.Ve
.PP
Now we point our browser to:
.PP
.Vb 1
\& http://www.yourapplication.com/facebook
.Ve
.PP
Voila! You have created an authenticated Facebook app. If you would like to see this full program check out \f(CW\*(C`eg/recipe1.psgi\*(C'\fR inside this distribution of Facebook::Graph.
.SH "CAVEATS"
.IX Header "CAVEATS"
You should never design an application using all the poor stuff we've done here, like using a shared Facebook::Graph object, not using a Framework/CMS or at least Plack::Builder, not using a templating system, passing the offline access token through the \s-1URL\s0, etc. We've made comments about these things as we did them to warn you. These choices were made here \fBonly\fR because this is example code who's primary purpose is to show you how to use Facebook::Graph, and not best practices for web development.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
For more recipes, check out the Facebook::Graph::Cookbook.
.SH "LEGAL"
.IX Header "LEGAL"
Facebook::Graph is Copyright 2010 Plain Black Corporation (<http://www.plainblack.com>) and is licensed under the same terms as Perl itself.
