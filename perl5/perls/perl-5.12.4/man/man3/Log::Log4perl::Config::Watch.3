.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Config::Watch 3"
.TH Config::Watch 3 "2010-08-31" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Log::Log4perl::Config::Watch \- Detect file changes
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Log::Log4perl::Config::Watch;
\&
\&    my $watcher = Log::Log4perl::Config::Watch\->new(
\&                          file            => "/data/my.conf",
\&                          check_interval  => 30,
\&                  );
\&
\&    while(1) {
\&        if($watcher\->change_detected()) {
\&            print "Change detected!\en";
\&        }
\&        sleep(1);
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module helps detecting changes in files. Although it comes with the
\&\f(CW\*(C`Log::Log4perl\*(C'\fR distribution, it can be used independently.
.PP
The constructor defines the file to be watched and the check interval 
in seconds. Subsequent calls to \f(CW\*(C`change_detected()\*(C'\fR will
.IP "\(bu" 4
return a false value immediately without doing physical file checks
if \f(CW\*(C`check_interval\*(C'\fR hasn't elapsed.
.IP "\(bu" 4
perform a physical test on the specified file if the number
of seconds specified in \f(CW\*(C`check_interval\*(C'\fR 
have elapsed since the last physical check. If the file's modification
date has changed since the last physical check, it will return a true 
value, otherwise a false value is returned.
.PP
Bottom line: \f(CW\*(C`check_interval\*(C'\fR allows you to call the function
\&\f(CW\*(C`change_detected()\*(C'\fR as often as you like, without paying the performing
a significant performance penalty because file system operations 
are being performed (however, you pay the price of not knowing about
file changes until \f(CW\*(C`check_interval\*(C'\fR seconds have elapsed).
.PP
The module clearly distinguishes system time from file system time. 
If your (e.g. \s-1NFS\s0 mounted) file system is off by a constant amount
of time compared to the executing computer's clock, it'll just
work fine.
.PP
To disable the resource-saving delay feature, just set \f(CW\*(C`check_interval\*(C'\fR 
to 0 and \f(CW\*(C`change_detected()\*(C'\fR will run a physical file test on
every call.
.PP
If you already have the current time available, you can pass it
on to \f(CW\*(C`change_detected()\*(C'\fR as an optional parameter, like in
.PP
.Vb 1
\&    change_detected($time)
.Ve
.PP
which then won't trigger a call to \f(CW\*(C`time()\*(C'\fR, but use the value
provided.
.SS "\s-1SIGNAL\s0 \s-1MODE\s0"
.IX Subsection "SIGNAL MODE"
Instead of polling time and file changes, \f(CW\*(C`new()\*(C'\fR can be instructed 
to set up a signal handler. If you call the constructor like
.PP
.Vb 4
\&    my $watcher = Log::Log4perl::Config::Watch\->new(
\&                          file    => "/data/my.conf",
\&                          signal  => \*(AqHUP\*(Aq
\&                  );
.Ve
.PP
then a signal handler will be installed, setting the object's variable 
\&\f(CW\*(C`$self\->{signal_caught}\*(C'\fR to a true value when the signal arrives.
Comes with all the problems that signal handlers go along with.
.SS "\s-1TRIGGER\s0 \s-1CHECKS\s0"
.IX Subsection "TRIGGER CHECKS"
To trigger a physical file check on the next call to \f(CW\*(C`change_detected()\*(C'\fR
regardless if \f(CW\*(C`check_interval\*(C'\fR has expired or not, call
.PP
.Vb 1
\&    $watcher\->force_next_check();
.Ve
.PP
on the watcher object.
.SS "\s-1DETECT\s0 \s-1MOVED\s0 \s-1FILES\s0"
.IX Subsection "DETECT MOVED FILES"
The watcher can also be used to detect files that have moved. It will 
not only detect if a watched file has disappeared, but also if it has
been replaced by a new file in the meantime.
.PP
.Vb 4
\&    my $watcher = Log::Log4perl::Config::Watch\->new(
\&        file           => "/data/my.conf",
\&        check_interval => 30,
\&    );
\&
\&    while(1) {
\&        if($watcher\->file_has_moved()) {
\&            print "File has moved!\en";
\&        }
\&        sleep(1);
\&    }
.Ve
.PP
The parameters \f(CW\*(C`check_interval\*(C'\fR and \f(CW\*(C`signal\*(C'\fR limit the number of physical 
file system checks, simililarily as with \f(CW\*(C`change_detected()\*(C'\fR.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2002\-2009 by Mike Schilli <m@perlmeister.com> 
and Kevin Goess <cpan@goess.org>.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
