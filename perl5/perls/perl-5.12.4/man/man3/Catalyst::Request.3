.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Catalyst::Request 3"
.TH Catalyst::Request 3 "2011-11-18" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::Request \- provides information about the current client request
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&    $req = $c\->request;
\&    $req\->action;
\&    $req\->address;
\&    $req\->arguments;
\&    $req\->args;
\&    $req\->base;
\&    $req\->body;
\&    $req\->body_parameters;
\&    $req\->content_encoding;
\&    $req\->content_length;
\&    $req\->content_type;
\&    $req\->cookie;
\&    $req\->cookies;
\&    $req\->header;
\&    $req\->headers;
\&    $req\->hostname;
\&    $req\->input;
\&    $req\->query_keywords;
\&    $req\->match;
\&    $req\->method;
\&    $req\->param;
\&    $req\->parameters;
\&    $req\->params;
\&    $req\->path;
\&    $req\->protocol;
\&    $req\->query_parameters;
\&    $req\->read;
\&    $req\->referer;
\&    $req\->secure;
\&    $req\->captures; # previously knows as snippets
\&    $req\->upload;
\&    $req\->uploads;
\&    $req\->uri;
\&    $req\->user;
\&    $req\->user_agent;
.Ve
.PP
See also Catalyst, Catalyst::Request::Upload.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the Catalyst Request class, which provides an interface to data for the
current client request. The request object is prepared by Catalyst::Engine,
thus hiding the details of the particular engine implementation.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "$req\->action"
.el .SS "\f(CW$req\fP\->action"
.IX Subsection "$req->action"
[\s-1DEPRECATED\s0] Returns the name of the requested action.
.PP
Use \f(CW\*(C`$c\->action\*(C'\fR instead (which returns a
Catalyst::Action object).
.ie n .SS "$req\->address"
.el .SS "\f(CW$req\fP\->address"
.IX Subsection "$req->address"
Returns the \s-1IP\s0 address of the client.
.ie n .SS "$req\->arguments"
.el .SS "\f(CW$req\fP\->arguments"
.IX Subsection "$req->arguments"
Returns a reference to an array containing the arguments.
.PP
.Vb 1
\&    print $c\->request\->arguments\->[0];
.Ve
.PP
For example, if your action was
.PP
.Vb 1
\&    package MyApp::Controller::Foo;
\&
\&    sub moose : Local {
\&        ...
\&    }
.Ve
.PP
and the \s-1URI\s0 for the request was \f(CW\*(C`http://.../foo/moose/bah\*(C'\fR, the string \f(CW\*(C`bah\*(C'\fR
would be the first and only argument.
.PP
Arguments get automatically URI-unescaped for you.
.ie n .SS "$req\->args"
.el .SS "\f(CW$req\fP\->args"
.IX Subsection "$req->args"
Shortcut for \*(L"arguments\*(R".
.ie n .SS "$req\->base"
.el .SS "\f(CW$req\fP\->base"
.IX Subsection "$req->base"
Contains the \s-1URI\s0 base. This will always have a trailing slash. Note that the
\&\s-1URI\s0 scheme (e.g., http vs. https) must be determined through heuristics;
depending on your server configuration, it may be incorrect. See \f(CW$req\fR\->secure
for more info.
.PP
If your application was queried with the \s-1URI\s0
\&\f(CW\*(C`http://localhost:3000/some/path\*(C'\fR then \f(CW\*(C`base\*(C'\fR is \f(CW\*(C`http://localhost:3000/\*(C'\fR.
.ie n .SS "$req\->body"
.el .SS "\f(CW$req\fP\->body"
.IX Subsection "$req->body"
Returns the message body of the request, as returned by HTTP::Body: a string,
unless Content-Type is \f(CW\*(C`application/x\-www\-form\-urlencoded\*(C'\fR, \f(CW\*(C`text/xml\*(C'\fR, or
\&\f(CW\*(C`multipart/form\-data\*(C'\fR, in which case a File::Temp object is returned.
.ie n .SS "$req\->body_parameters"
.el .SS "\f(CW$req\fP\->body_parameters"
.IX Subsection "$req->body_parameters"
Returns a reference to a hash containing body (\s-1POST\s0) parameters. Values can
be either a scalar or an arrayref containing scalars.
.PP
.Vb 2
\&    print $c\->request\->body_parameters\->{field};
\&    print $c\->request\->body_parameters\->{field}\->[0];
.Ve
.PP
These are the parameters from the \s-1POST\s0 part of the request, if any.
.ie n .SS "$req\->body_params"
.el .SS "\f(CW$req\fP\->body_params"
.IX Subsection "$req->body_params"
Shortcut for body_parameters.
.ie n .SS "$req\->content_encoding"
.el .SS "\f(CW$req\fP\->content_encoding"
.IX Subsection "$req->content_encoding"
Shortcut for \f(CW$req\fR\->headers\->content_encoding.
.ie n .SS "$req\->content_length"
.el .SS "\f(CW$req\fP\->content_length"
.IX Subsection "$req->content_length"
Shortcut for \f(CW$req\fR\->headers\->content_length.
.ie n .SS "$req\->content_type"
.el .SS "\f(CW$req\fP\->content_type"
.IX Subsection "$req->content_type"
Shortcut for \f(CW$req\fR\->headers\->content_type.
.ie n .SS "$req\->cookie"
.el .SS "\f(CW$req\fP\->cookie"
.IX Subsection "$req->cookie"
A convenient method to access \f(CW$req\fR\->cookies.
.PP
.Vb 2
\&    $cookie  = $c\->request\->cookie(\*(Aqname\*(Aq);
\&    @cookies = $c\->request\->cookie;
.Ve
.ie n .SS "$req\->cookies"
.el .SS "\f(CW$req\fP\->cookies"
.IX Subsection "$req->cookies"
Returns a reference to a hash containing the cookies.
.PP
.Vb 1
\&    print $c\->request\->cookies\->{mycookie}\->value;
.Ve
.PP
The cookies in the hash are indexed by name, and the values are CGI::Simple::Cookie
objects.
.ie n .SS "$req\->header"
.el .SS "\f(CW$req\fP\->header"
.IX Subsection "$req->header"
Shortcut for \f(CW$req\fR\->headers\->header.
.ie n .SS "$req\->headers"
.el .SS "\f(CW$req\fP\->headers"
.IX Subsection "$req->headers"
Returns an HTTP::Headers object containing the headers for the current request.
.PP
.Vb 1
\&    print $c\->request\->headers\->header(\*(AqX\-Catalyst\*(Aq);
.Ve
.ie n .SS "$req\->hostname"
.el .SS "\f(CW$req\fP\->hostname"
.IX Subsection "$req->hostname"
Returns the hostname of the client. Use \f(CW\*(C`$req\->uri\->host\*(C'\fR to get the hostname of the server.
.ie n .SS "$req\->input"
.el .SS "\f(CW$req\fP\->input"
.IX Subsection "$req->input"
Alias for \f(CW$req\fR\->body.
.ie n .SS "$req\->query_keywords"
.el .SS "\f(CW$req\fP\->query_keywords"
.IX Subsection "$req->query_keywords"
Contains the keywords portion of a query string, when no '=' signs are
present.
.PP
.Vb 1
\&    http://localhost/path?some+keywords
\&
\&    $c\->request\->query_keywords will contain \*(Aqsome keywords\*(Aq
.Ve
.ie n .SS "$req\->match"
.el .SS "\f(CW$req\fP\->match"
.IX Subsection "$req->match"
This contains the matching part of a Regex action. Otherwise
it returns the same as 'action', except for default actions,
which return an empty string.
.ie n .SS "$req\->method"
.el .SS "\f(CW$req\fP\->method"
.IX Subsection "$req->method"
Contains the request method (\f(CW\*(C`GET\*(C'\fR, \f(CW\*(C`POST\*(C'\fR, \f(CW\*(C`HEAD\*(C'\fR, etc).
.ie n .SS "$req\->param"
.el .SS "\f(CW$req\fP\->param"
.IX Subsection "$req->param"
Returns \s-1GET\s0 and \s-1POST\s0 parameters with a \s-1CGI\s0.pm\-compatible param method. This
is an alternative method for accessing parameters in \f(CW$c\fR\->req\->parameters.
.PP
.Vb 3
\&    $value  = $c\->request\->param( \*(Aqfoo\*(Aq );
\&    @values = $c\->request\->param( \*(Aqfoo\*(Aq );
\&    @params = $c\->request\->param;
.Ve
.PP
Like \s-1CGI\s0, and \fBunlike\fR earlier versions of Catalyst, passing multiple
arguments to this method, like this:
.PP
.Vb 1
\&    $c\->request\->param( \*(Aqfoo\*(Aq, \*(Aqbar\*(Aq, \*(Aqgorch\*(Aq, \*(Aqquxx\*(Aq );
.Ve
.PP
will set the parameter \f(CW\*(C`foo\*(C'\fR to the multiple values \f(CW\*(C`bar\*(C'\fR, \f(CW\*(C`gorch\*(C'\fR and
\&\f(CW\*(C`quxx\*(C'\fR. Previously this would have added \f(CW\*(C`bar\*(C'\fR as another value to \f(CW\*(C`foo\*(C'\fR
(creating it if it didn't exist before), and \f(CW\*(C`quxx\*(C'\fR as another value for
\&\f(CW\*(C`gorch\*(C'\fR.
.PP
\&\fB\s-1NOTE\s0\fR this is considered a legacy interface and care should be taken when
using it. \f(CW\*(C`scalar $c\->req\->param( \*(Aqfoo\*(Aq )\*(C'\fR will return only the first
\&\f(CW\*(C`foo\*(C'\fR param even if multiple are present; \f(CW\*(C`$c\->req\->param( \*(Aqfoo\*(Aq )\*(C'\fR will
return a list of as many are present, which can have unexpected consequences
when writing code of the form:
.PP
.Vb 4
\&    $foo\->bar(
\&        a => \*(Aqb\*(Aq,
\&        baz => $c\->req\->param( \*(Aqbaz\*(Aq ),
\&    );
.Ve
.PP
If multiple \f(CW\*(C`baz\*(C'\fR parameters are provided this code might corrupt data or
cause a hash initialization error. For a more straightforward interface see
\&\f(CW\*(C`$c\->req\->parameters\*(C'\fR.
.ie n .SS "$req\->parameters"
.el .SS "\f(CW$req\fP\->parameters"
.IX Subsection "$req->parameters"
Returns a reference to a hash containing \s-1GET\s0 and \s-1POST\s0 parameters. Values can
be either a scalar or an arrayref containing scalars.
.PP
.Vb 2
\&    print $c\->request\->parameters\->{field};
\&    print $c\->request\->parameters\->{field}\->[0];
.Ve
.PP
This is the combination of \f(CW\*(C`query_parameters\*(C'\fR and \f(CW\*(C`body_parameters\*(C'\fR.
.ie n .SS "$req\->params"
.el .SS "\f(CW$req\fP\->params"
.IX Subsection "$req->params"
Shortcut for \f(CW$req\fR\->parameters.
.ie n .SS "$req\->path"
.el .SS "\f(CW$req\fP\->path"
.IX Subsection "$req->path"
Returns the path, i.e. the part of the \s-1URI\s0 after \f(CW$req\fR\->base, for the current request.
.PP
.Vb 1
\&    http://localhost/path/foo
\&
\&    $c\->request\->path will contain \*(Aqpath/foo\*(Aq
.Ve
.ie n .SS "$req\->path_info"
.el .SS "\f(CW$req\fP\->path_info"
.IX Subsection "$req->path_info"
Alias for path, added for compatibility with \s-1CGI\s0.
.ie n .SS "$req\->protocol"
.el .SS "\f(CW$req\fP\->protocol"
.IX Subsection "$req->protocol"
Returns the protocol (\s-1HTTP/1\s0.0 or \s-1HTTP/1\s0.1) used for the current request.
.ie n .SS "$req\->query_parameters"
.el .SS "\f(CW$req\fP\->query_parameters"
.IX Subsection "$req->query_parameters"
.ie n .SS "$req\->query_params"
.el .SS "\f(CW$req\fP\->query_params"
.IX Subsection "$req->query_params"
Returns a reference to a hash containing query string (\s-1GET\s0) parameters. Values can
be either a scalar or an arrayref containing scalars.
.PP
.Vb 2
\&    print $c\->request\->query_parameters\->{field};
\&    print $c\->request\->query_parameters\->{field}\->[0];
.Ve
.ie n .SS "$req\->read( [$maxlength] )"
.el .SS "\f(CW$req\fP\->read( [$maxlength] )"
.IX Subsection "$req->read( [$maxlength] )"
Reads a chunk of data from the request body. This method is intended to be
used in a while loop, reading \f(CW$maxlength\fR bytes on every call. \f(CW$maxlength\fR
defaults to the size of the request if not specified.
.PP
You have to set MyApp\->config(parse_on_demand => 1) to use this directly.
.ie n .SS "$req\->referer"
.el .SS "\f(CW$req\fP\->referer"
.IX Subsection "$req->referer"
Shortcut for \f(CW$req\fR\->headers\->referer. Returns the referring page.
.ie n .SS "$req\->secure"
.el .SS "\f(CW$req\fP\->secure"
.IX Subsection "$req->secure"
Returns true or false, indicating whether the connection is secure
(https). Note that the \s-1URI\s0 scheme (e.g., http vs. https) must be determined
through heuristics, and therefore the reliability of \f(CW$req\fR\->secure will depend
on your server configuration. If you are serving secure pages on the standard
\&\s-1SSL\s0 port (443) and/or setting the \s-1HTTPS\s0 environment variable, \f(CW$req\fR\->secure
should be valid.
.ie n .SS "$req\->captures"
.el .SS "\f(CW$req\fP\->captures"
.IX Subsection "$req->captures"
Returns a reference to an array containing captured args from chained
actions or regex captures.
.PP
.Vb 1
\&    my @captures = @{ $c\->request\->captures };
.Ve
.ie n .SS "$req\->snippets"
.el .SS "\f(CW$req\fP\->snippets"
.IX Subsection "$req->snippets"
\&\f(CW\*(C`captures\*(C'\fR used to be called snippets. This is still available for backwards
compatibility, but is considered deprecated.
.ie n .SS "$req\->upload"
.el .SS "\f(CW$req\fP\->upload"
.IX Subsection "$req->upload"
A convenient method to access \f(CW$req\fR\->uploads.
.PP
.Vb 3
\&    $upload  = $c\->request\->upload(\*(Aqfield\*(Aq);
\&    @uploads = $c\->request\->upload(\*(Aqfield\*(Aq);
\&    @fields  = $c\->request\->upload;
\&
\&    for my $upload ( $c\->request\->upload(\*(Aqfield\*(Aq) ) {
\&        print $upload\->filename;
\&    }
.Ve
.ie n .SS "$req\->uploads"
.el .SS "\f(CW$req\fP\->uploads"
.IX Subsection "$req->uploads"
Returns a reference to a hash containing uploads. Values can be either a
Catalyst::Request::Upload object, or an arrayref of
Catalyst::Request::Upload objects.
.PP
.Vb 2
\&    my $upload = $c\->request\->uploads\->{field};
\&    my $upload = $c\->request\->uploads\->{field}\->[0];
.Ve
.ie n .SS "$req\->uri"
.el .SS "\f(CW$req\fP\->uri"
.IX Subsection "$req->uri"
Returns a \s-1URI\s0 object for the current request. Stringifies to the \s-1URI\s0 text.
.ie n .SS "$req\->mangle_params( { key => 'value' }, $appendmode);"
.el .SS "\f(CW$req\fP\->mangle_params( { key => 'value' }, \f(CW$appendmode\fP);"
.IX Subsection "$req->mangle_params( { key => 'value' }, $appendmode);"
Returns a hashref of parameters stemming from the current request's params,
plus the ones supplied.  Keys for which no current param exists will be
added, keys with undefined values will be removed and keys with existing
params will be replaced.  Note that you can supply a true value as the final
argument to change behavior with regards to existing parameters, appending
values rather than replacing them.
.PP
A quick example:
.PP
.Vb 3
\&  # URI query params foo=1
\&  my $hashref = $req\->mangle_params({ foo => 2 });
\&  # Result is query params of foo=2
.Ve
.PP
versus append mode:
.PP
.Vb 3
\&  # URI query params foo=1
\&  my $hashref = $req\->mangle_params({ foo => 2 }, 1);
\&  # Result is query params of foo=1&foo=2
.Ve
.PP
This is the code behind \f(CW\*(C`uri_with\*(C'\fR.
.ie n .SS "$req\->uri_with( { key => 'value' } );"
.el .SS "\f(CW$req\fP\->uri_with( { key => 'value' } );"
.IX Subsection "$req->uri_with( { key => 'value' } );"
Returns a rewritten \s-1URI\s0 object for the current request. Key/value pairs
passed in will override existing parameters. You can remove an existing
parameter by passing in an undef value. Unmodified pairs will be
preserved.
.PP
You may also pass an optional second parameter that puts \f(CW\*(C`uri_with\*(C'\fR into
append mode:
.PP
.Vb 1
\&  $req\->uri_with( { key => \*(Aqvalue\*(Aq }, { mode => \*(Aqappend\*(Aq } );
.Ve
.PP
See \f(CW\*(C`mangle_params\*(C'\fR for an explanation of this behavior.
.ie n .SS "$req\->remote_user"
.el .SS "\f(CW$req\fP\->remote_user"
.IX Subsection "$req->remote_user"
Returns the value of the \f(CW\*(C`REMOTE_USER\*(C'\fR environment variable.
.ie n .SS "$req\->user_agent"
.el .SS "\f(CW$req\fP\->user_agent"
.IX Subsection "$req->user_agent"
Shortcut to \f(CW$req\fR\->headers\->user_agent. Returns the user agent (browser)
version string.
.SS "meta"
.IX Subsection "meta"
Provided by Moose
.SH "AUTHORS"
.IX Header "AUTHORS"
Catalyst Contributors, see Catalyst.pm
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This library is free software. You can redistribute it and/or modify
it under the same terms as Perl itself.
