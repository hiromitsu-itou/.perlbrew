.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Catalyst::Manual::Tutorial::06_Authorization 3"
.TH Catalyst::Manual::Tutorial::06_Authorization 3 "2011-09-04" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::Manual::Tutorial::06_Authorization \- Catalyst Tutorial \- Chapter 6: Authorization
.SH "OVERVIEW"
.IX Header "OVERVIEW"
This is \fBChapter 6 of 10\fR for the Catalyst tutorial.
.PP
Tutorial Overview
.IP "1." 4
Introduction
.IP "2." 4
Catalyst Basics
.IP "3." 4
More Catalyst Basics
.IP "4." 4
Basic \s-1CRUD\s0
.IP "5." 4
Authentication
.IP "6." 4
\&\fB06_Authorization\fR
.IP "7." 4
Debugging
.IP "8." 4
Testing
.IP "9." 4
Advanced \s-1CRUD\s0
.IP "10." 4
Appendices
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This chapter of the tutorial adds role-based authorization to the
existing authentication implemented in
Chapter 5.  It provides
simple examples of how to use roles in both \s-1TT\s0 templates and controller
actions.  The first half looks at basic authorization concepts. The
second half looks at how moving your authorization code to your model
can simplify your code and make things easier to maintain.
.PP
Source code for the tutorial in included in the \fI/home/catalyst/Final\fR
directory of the Tutorial Virtual machine (one subdirectory per
chapter).  There are also instructions for downloading the code in
Catalyst::Manual::Tutorial::01_Intro.
.SH "BASIC AUTHORIZATION"
.IX Header "BASIC AUTHORIZATION"
In this section you learn the basics of how authorization works under
Catalyst.
.SS "Update Plugins to Include Support for Authorization"
.IX Subsection "Update Plugins to Include Support for Authorization"
Edit \f(CW\*(C`lib/MyApp.pm\*(C'\fR and add \f(CW\*(C`Authorization::Roles\*(C'\fR to the list:
.PP
.Vb 5
\&    # Load plugins
\&    use Catalyst qw/
\&        \-Debug
\&        ConfigLoader
\&        Static::Simple
\&    
\&        StackTrace
\&    
\&        Authentication
\&        Authorization::Roles
\&    
\&        Session
\&        Session::Store::File
\&        Session::State::Cookie
\&
\&        StatusMessage
\&    /;
.Ve
.PP
Once again, include this additional plugin as a new dependency in the
Makefile.PL file like this:
.PP
.Vb 1
\&    requires \*(AqCatalyst::Plugin::Authorization::Roles\*(Aq;
.Ve
.ie n .SS "Add Role-Specific Logic to the ""Book List"" Template"
.el .SS "Add Role-Specific Logic to the ``Book List'' Template"
.IX Subsection "Add Role-Specific Logic to the Book List Template"
Open \f(CW\*(C`root/src/books/list.tt2\*(C'\fR in your editor and add the following
lines to the bottom of the file:
.PP
.Vb 2
\&    ...
\&    <p>Hello [% c.user.username %], you have the following roles:</p>
\&    
\&    <ul>
\&      [% # Dump list of roles \-%]
\&      [% FOR role = c.user.roles %]<li>[% role %]</li>[% END %]
\&    </ul>
\&    
\&    <p>
\&    [% # Add some simple role\-specific logic to template %]
\&    [% # Use $c\->check_user_roles() to check authz \-%]
\&    [% IF c.check_user_roles(\*(Aquser\*(Aq) %]
\&      [% # Give normal users a link for \*(Aqlogout\*(Aq %]
\&      <a href="[% c.uri_for(\*(Aq/logout\*(Aq) %]">User Logout</a>
\&    [% END %]
\&    
\&    [% # Can also use $c\->user\->check_roles() to check authz \-%]
\&    [% IF c.check_user_roles(\*(Aqadmin\*(Aq) %]
\&      [% # Give admin users a link for \*(Aqcreate\*(Aq %]
\&      <a href="[% c.uri_for(c.controller.action_for(\*(Aqform_create\*(Aq)) %]">Admin Create</a>
\&    [% END %]
\&    </p>
.Ve
.PP
This code displays a different combination of links depending on the
roles assigned to the user.
.SS "Limit Books::add to 'admin' Users"
.IX Subsection "Limit Books::add to 'admin' Users"
\&\f(CW\*(C`IF\*(C'\fR statements in \s-1TT\s0 templates simply control the output that is sent
to the user's browser; it provides no real enforcement (if users know or
guess the appropriate URLs, they are still perfectly free to hit any
action within your application).  We need to enhance the controller
logic to wrap restricted actions with role-validation logic.
.PP
For example, we might want to restrict the \*(L"formless create\*(R" action to
admin-level users by editing \f(CW\*(C`lib/MyApp/Controller/Books.pm\*(C'\fR and
updating \f(CW\*(C`url_create\*(C'\fR to match the following code:
.PP
.Vb 1
\&    =head2 url_create
\&    
\&    Create a book with the supplied title and rating,
\&    with manual authorization
\&    
\&    =cut
\&    
\&    sub url_create :Chained(\*(Aqbase\*(Aq) :PathPart(\*(Aqurl_create\*(Aq) :Args(3) {
\&        # In addition to self & context, get the title, rating & author_id args
\&        # from the URL.  Note that Catalyst automatically puts extra information
\&        # after the "/<controller_name>/<action_name/" into @_
\&        my ($self, $c, $title, $rating, $author_id) = @_;
\&    
\&        # Check the user\*(Aqs roles
\&        if ($c\->check_user_roles(\*(Aqadmin\*(Aq)) {
\&            # Call create() on the book model object. Pass the table
\&            # columns/field values we want to set as hash values
\&            my $book = $c\->model(\*(AqDB::Book\*(Aq)\->create({
\&                    title   => $title,
\&                    rating  => $rating
\&                });
\&    
\&            # Add a record to the join table for this book, mapping to
\&            # appropriate author
\&            $book\->add_to_book_authors({author_id => $author_id});
\&            # Note: Above is a shortcut for this:
\&            # $book\->create_related(\*(Aqbook_authors\*(Aq, {author_id => $author_id});
\&    
\&            # Assign the Book object to the stash and set template
\&            $c\->stash(book     => $book,
\&                      template => \*(Aqbooks/create_done.tt2\*(Aq);
\&        } else {
\&            # Provide very simple feedback to the user.
\&            $c\->response\->body(\*(AqUnauthorized!\*(Aq);
\&        }
\&    }
.Ve
.PP
To add authorization, we simply wrap the main code of this method in an
\&\f(CW\*(C`if\*(C'\fR statement that calls \f(CW\*(C`check_user_roles\*(C'\fR.  If the user does not
have the appropriate permissions, they receive an \*(L"Unauthorized!\*(R"
message.  Note that we intentionally chose to display the message this
way to demonstrate that \s-1TT\s0 templates will not be used if the response
body has already been set.  In reality you would probably want to use a
technique that maintains the visual continuity of your template layout
(for example, using Catalyst::Plugin::StateMessage as shown in the
last chapter to
redirect to an \*(L"unauthorized\*(R" page).
.PP
\&\fB\s-1TIP\s0\fR: If you want to keep your existing \f(CW\*(C`url_create\*(C'\fR method, you can
create a new copy and comment out the original by making it look like a
Pod comment.  For example, put something like \f(CW\*(C`=begin\*(C'\fR before
\&\f(CW\*(C`sub add : Local {\*(C'\fR and \f(CW\*(C`=end\*(C'\fR after the closing \f(CW\*(C`}\*(C'\fR.
.SS "Try Out Authentication And Authorization"
.IX Subsection "Try Out Authentication And Authorization"
Make sure the development server is running:
.PP
.Vb 1
\&    $ script/myapp_server.pl \-r
.Ve
.PP
Now trying going to <http://localhost:3000/books/list> and you should
be taken to the login page (you might have to \f(CW\*(C`Shift+Reload\*(C'\fR or
\&\f(CW\*(C`Ctrl+Reload\*(C'\fR your browser and/or click the \*(L"User Logout\*(R" link on the
book list page).  Try logging in with both \f(CW\*(C`test01\*(C'\fR and \f(CW\*(C`test02\*(C'\fR (both
use a password of \f(CW\*(C`mypass\*(C'\fR) and notice how the roles information
updates at the bottom of the \*(L"Book List\*(R" page. Also try the \*(L"User
Logout\*(R" link on the book list page.
.PP
Now the \*(L"url_create\*(R" \s-1URL\s0 will work if you are already logged in as user
\&\f(CW\*(C`test01\*(C'\fR, but receive an authorization failure if you are logged in as
\&\f(CW\*(C`test02\*(C'\fR.  Try:
.PP
.Vb 1
\&    http://localhost:3000/books/url_create/test/1/6
.Ve
.PP
while logged in as each user.  Use one of the \*(L"logout\*(R" links (or go to
<http://localhost:3000/logout> in your browser directly) when you are
done.
.SH "ENABLE MODEL-BASED AUTHORIZATION"
.IX Header "ENABLE MODEL-BASED AUTHORIZATION"
Hopefully it's fairly obvious that adding detailed permission checking
logic to our controllers and view templates isn't a very clean or
scalable way to build role-based permissions into out application.  As
with many other aspects of \s-1MVC\s0 web development, the goal is to have your
controllers and views be an \*(L"thin\*(R" as possible, with all of the \*(L"fancy
business logic\*(R" built into your model.
.PP
For example, let's add a method to our \f(CW\*(C`Books.pm\*(C'\fR Result Class to check
if a user is allowed to delete a book.  Open
\&\f(CW\*(C`lib/MyApp/Schema/Result/Book.pm\*(C'\fR and add the following method (be sure
to add it below the "\f(CW\*(C`DO NOT MODIFY ...\*(C'\fR" line):
.PP
.Vb 1
\&    =head2 delete_allowed_by
\&    
\&    Can the specified user delete the current book?
\&    
\&    =cut
\&    
\&    sub delete_allowed_by {
\&        my ($self, $user) = @_;
\&    
\&        # Only allow delete if user has \*(Aqadmin\*(Aq role
\&        return $user\->has_role(\*(Aqadmin\*(Aq);
\&    }
.Ve
.PP
Here we call a \f(CW\*(C`has_role\*(C'\fR method on our user object, so we should add
this method to our Result Class.  Open
\&\f(CW\*(C`lib/MyApp/Schema/Result/User.pm\*(C'\fR and add the following method below
the "\f(CW\*(C`DO NOT MODIFY ...\*(C'\fR" line:
.PP
.Vb 1
\&    =head2 has_role
\&    
\&    Check if a user has the specified role
\&    
\&    =cut
\&    
\&    use Perl6::Junction qw/any/;
\&    sub has_role {
\&        my ($self, $role) = @_;
\&    
\&        # Does this user posses the required role?
\&        return any(map { $_\->role } $self\->roles) eq $role;
\&    }
.Ve
.PP
Let's also add \f(CW\*(C`Perl6::Junction\*(C'\fR to the requirements listed in
Makefile.PL:
.PP
.Vb 1
\&    requires \*(AqPerl6::Junction\*(Aq;
.Ve
.PP
\&\fBNote:\fR Feel free to use \f(CW\*(C`grep\*(C'\fR in lieu of \f(CW\*(C`Perl6::Junction::any\*(C'\fR if
you prefer.  Also, please don't let the use of the \f(CW\*(C`Perl6::Junction\*(C'\fR
module above lead you to believe that Catalyst is somehow dependent on
Perl 6... we are simply using that module for its
easy-to-read <http://blogs.perl.org/users/marc_sebastian_jakobs/2009/11/my-favorite-module-of-the-month-perl6junction.html>
\&\f(CW\*(C`any\*(C'\fR function.
.PP
Now we need to add some enforcement inside our controller.  Open
\&\f(CW\*(C`lib/MyApp/Controller/Books.pm\*(C'\fR and update the \f(CW\*(C`delete\*(C'\fR method to
match the following code:
.PP
.Vb 1
\&    =head2 delete
\&    
\&    Delete a book
\&    
\&    =cut
\&    
\&    sub delete :Chained(\*(Aqobject\*(Aq) :PathPart(\*(Aqdelete\*(Aq) :Args(0) {
\&        my ($self, $c) = @_;
\&    
\&        # Check permissions
\&        $c\->detach(\*(Aq/error_noperms\*(Aq)
\&            unless $c\->stash\->{object}\->delete_allowed_by($c\->user\->get_object);
\&    
\&        # Use the book object saved by \*(Aqobject\*(Aq and delete it along
\&        # with related \*(Aqbook_authors\*(Aq entries
\&        $c\->stash\->{object}\->delete;
\&    
\&        # Redirect the user back to the list page
\&        $c\->response\->redirect($c\->uri_for($self\->action_for(\*(Aqlist\*(Aq),
\&            {mid => $c\->set_status_msg("Deleted book $id")}));
\&    }
.Ve
.PP
Here, we \f(CW\*(C`detach\*(C'\fR to an error page if the user is lacking the
appropriate permissions.  For this to work, we need to make arrangements
for the '/error_noperms' action to work.  Open
\&\f(CW\*(C`lib/MyApp/Controller/Root.pm\*(C'\fR and add this method:
.PP
.Vb 1
\&    =head2 error_noperms
\&    
\&    Permissions error screen
\&    
\&    =cut
\&    
\&    sub error_noperms :Chained(\*(Aq/\*(Aq) :PathPart(\*(Aqerror_noperms\*(Aq) :Args(0) {
\&        my ($self, $c) = @_;
\&    
\&        $c\->stash(template => \*(Aqerror_noperms.tt2\*(Aq);
\&    }
.Ve
.PP
And also add the template file by putting the following text into
\&\f(CW\*(C`root/src/error_noperms.tt2\*(C'\fR:
.PP
.Vb 1
\&    <span class="error">Permission Denied</span>
.Ve
.PP
Log in as \f(CW\*(C`test01\*(C'\fR and create several new books using the \f(CW\*(C`url_create\*(C'\fR
feature:
.PP
.Vb 1
\&    http://localhost:3000/books/url_create/Test/1/4
.Ve
.PP
Then, while still logged in as \f(CW\*(C`test01\*(C'\fR, click the \*(L"Delete\*(R" link next
to one of these books.  The book should be removed and you should see
the usual green \*(L"Book deleted\*(R" message.  Next, click the \*(L"User Logout\*(R"
link and log back in as \f(CW\*(C`test02\*(C'\fR.  Now try deleting one of the books.
You should be taken to the red \*(L"Permission Denied\*(R" message on our error
page.
.PP
Use one of the 'Logout' links (or go to the
<http://localhost:3000/logout> \s-1URL\s0 directly) when you are done.
.PP
You can jump to the next chapter of the tutorial here:
Debugging
.SH "AUTHOR"
.IX Header "AUTHOR"
Kennedy Clark, \f(CW\*(C`hkclark@gmail.com\*(C'\fR
.PP
Feel free to contact the author for any errors or suggestions, but the
best way to report issues is via the \s-1CPAN\s0 \s-1RT\s0 Bug system at
https://rt.cpan.org/Public/Dist/Display.html?Name=Catalyst\-Manual <https://rt.cpan.org/Public/Dist/Display.html?Name=Catalyst-Manual>.
.PP
Copyright 2006\-2011, Kennedy Clark, under the
Creative Commons Attribution Share-Alike License Version 3.0
(http://creativecommons.org/licenses/by\-sa/3.0/us/ <http://creativecommons.org/licenses/by-sa/3.0/us/>).
