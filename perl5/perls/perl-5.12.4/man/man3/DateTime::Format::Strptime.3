.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DateTime::Format::Strptime 3"
.TH DateTime::Format::Strptime 3 "2010-10-17" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DateTime::Format::Strptime \- Parse and format strp and strf time patterns
.SH "VERSION"
.IX Header "VERSION"
version 1.5000
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use DateTime::Format::Strptime;
\&
\&  my $Strp = new DateTime::Format::Strptime(
\&                                pattern     => \*(Aq%T\*(Aq,
\&                                locale      => \*(Aqen_AU\*(Aq,
\&                                time_zone   => \*(AqAustralia/Melbourne\*(Aq,
\&                        );
\&
\&  my $dt = $Strp\->parse_datetime(\*(Aq23:16:42\*(Aq);
\&
\&  $Strp\->format_datetime($dt);
\&        # 23:16:42
\&
\&
\&
\&  # Croak when things go wrong:
\&  my $Strp = new DateTime::Format::Strptime(
\&                                pattern         => \*(Aq%T\*(Aq,
\&                                locale      => \*(Aqen_AU\*(Aq,
\&                                time_zone       => \*(AqAustralia/Melbourne\*(Aq,
\&                                on_error        => \*(Aqcroak\*(Aq,
\&                        );
\&
\&  $newpattern = $Strp\->pattern(\*(Aq%Q\*(Aq);
\&  # Unidentified token in pattern: %Q in %Q at line 34 of script.pl
\&
\&  # Do something else when things go wrong:
\&  my $Strp = new DateTime::Format::Strptime(
\&                                pattern         => \*(Aq%T\*(Aq,
\&                                locale      => \*(Aqen_AU\*(Aq,
\&                                time_zone       => \*(AqAustralia/Melbourne\*(Aq,
\&                                on_error        => \e&phone_police,
\&                        );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements most of \f(CWstrptime(3)\fR, the \s-1POSIX\s0 function that
is the reverse of \f(CWstrftime(3)\fR, for \f(CW\*(C`DateTime\*(C'\fR. While \f(CW\*(C`strftime\*(C'\fR
takes a \f(CW\*(C`DateTime\*(C'\fR and a pattern and returns a string, \f(CW\*(C`strptime\*(C'\fR takes
a string and a pattern and returns the \f(CW\*(C`DateTime\*(C'\fR object
associated.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "\(bu" 4
new( pattern=>$strptime_pattern )
.Sp
Creates the format object. You must specify a pattern, you can also
specify a \f(CW\*(C`time_zone\*(C'\fR and a \f(CW\*(C`locale\*(C'\fR. If you specify a time zone
then any resulting \f(CW\*(C`DateTime\*(C'\fR object will be in that time zone. If you
do not specify a \f(CW\*(C`time_zone\*(C'\fR parameter, but there is a time zone in the
string you pass to \f(CW\*(C`parse_datetime\*(C'\fR, then the resulting \f(CW\*(C`DateTime\*(C'\fR will
use that time zone.
.Sp
You can optionally use an on_error parameter. This parameter has three
valid options:
.RS 4
.IP "\(bu" 4
\&'undef'
.Sp
(not undef, 'undef', it's a string not an undefined value)
.Sp
This is the default behavior. The module will return undef whenever it
gets upset. The error can be accessed using the \f(CW$object\fR\->errstr method.
This is the ideal behaviour for interactive use where a user might
provide an illegal pattern or a date that doesn't match the pattern.
.IP "\(bu" 4
\&'croak'
.Sp
(not croak, 'croak', it's a string, not a function)
.Sp
This used to be the default behaviour. The module will croak with an
error message whenever it gets upset.
.IP "\(bu" 4
sub{...} or \e&subname
.Sp
When given a code ref, the module will call that sub when it gets upset.
The sub receives two parameters: the object and the error message. Using
these two it is possible to emulate the 'undef' behavior. (Returning a
true value causes the method to return undef. Returning a false value
causes the method to bravely continue):
.Sp
sub{$_[0]\->{errmsg} = \f(CW$_\fR[1]; 1},
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
This class offers the following methods.
.IP "\(bu" 4
parse_datetime($string)
.Sp
Given a string in the pattern specified in the constructor, this method
will return a new \f(CW\*(C`DateTime\*(C'\fR object.
.Sp
If given a string that doesn't match the pattern, the formatter will
croak or return undef, depending on the setting of on_error in the constructor.
.IP "\(bu" 4
format_datetime($datetime)
.Sp
Given a \f(CW\*(C`DateTime\*(C'\fR object, this methods returns a string formatted in
the object's format. This method is synonymous with \f(CW\*(C`DateTime\*(C'\fR's
strftime method.
.IP "\(bu" 4
locale($locale)
.Sp
When given a locale or \f(CW\*(C`DateTime::Locale\*(C'\fR object, this method sets
its locale appropriately. If the locale is not understood, the method
will croak or return undef (depending on the setting of on_error in
the constructor)
.Sp
If successful this method returns the current locale. (After
processing as above).
.IP "\(bu" 4
pattern($strptime_pattern)
.Sp
When given a pattern, this method sets the object's pattern. If the
pattern is invalid, the method will croak or return undef (depending on
the value of the \f(CW\*(C`on_error\*(C'\fR parameter)
.Sp
If successful this method returns the current pattern. (After processing
as above)
.IP "\(bu" 4
time_zone($time_zone)
.Sp
When given a name, offset or \f(CW\*(C`DateTime::TimeZone\*(C'\fR object, this method
sets the object's time zone. This effects the \f(CW\*(C`DateTime\*(C'\fR object
returned by parse_datetime
.Sp
If the time zone is invalid, the method will croak or return undef
(depending on the value of the \f(CW\*(C`on_error\*(C'\fR parameter)
.Sp
If successful this method returns the current time zone. (After processing
as above)
.IP "\(bu" 4
errmsg
.Sp
If the on_error behavior of the object is 'undef', error messages with
this method so you can work out why things went wrong.
.Sp
This code emulates a \f(CW$DateTime::Format::Strptime\fR with
the \f(CW\*(C`on_error\*(C'\fR parameter equal to \f(CW\*(Aqcroak\*(Aq\fR:
.Sp
\&\f(CW\*(C`$Strp\-\*(C'\fRpattern($pattern) or die \f(CW$DateTime::Format::Strptime::errmsg\fR>
.SH "EXPORTS"
.IX Header "EXPORTS"
There are no methods exported by default, however the following are
available:
.IP "\(bu" 4
strptime($strptime_pattern, \f(CW$string\fR)
.Sp
Given a pattern and a string this function will return a new \f(CW\*(C`DateTime\*(C'\fR
object.
.IP "\(bu" 4
strftime($strftime_pattern, \f(CW$datetime\fR)
.Sp
Given a pattern and a \f(CW\*(C`DateTime\*(C'\fR object this function will return a
formatted string.
.SH "STRPTIME PATTERN TOKENS"
.IX Header "STRPTIME PATTERN TOKENS"
The following tokens are allowed in the pattern string for strptime
(parse_datetime):
.IP "\(bu" 4
%%
.Sp
The % character.
.IP "\(bu" 4
\&\f(CW%a\fR or \f(CW%A\fR
.Sp
The weekday name according to the current locale, in abbreviated form or
the full name.
.IP "\(bu" 4
\&\f(CW%b\fR or \f(CW%B\fR or \f(CW%h\fR
.Sp
The month name according to the current locale, in abbreviated form or
the full name.
.IP "\(bu" 4
\&\f(CW%C\fR
.Sp
The century number (0\-99).
.IP "\(bu" 4
\&\f(CW%d\fR or \f(CW%e\fR
.Sp
The day of month (1\-31).
.IP "\(bu" 4
\&\f(CW%D\fR
.Sp
Equivalent to \f(CW%m\fR/%d/%y. (This is the American style date, very confusing
to non-Americans, especially since \f(CW%d\fR/%m/%y is	widely used in Europe.
The \s-1ISO\s0 8601 standard pattern is \f(CW%F\fR.)
.IP "\(bu" 4
\&\f(CW%F\fR
.Sp
Equivalent to \f(CW%Y\fR\-%m\-%d. (This is the \s-1ISO\s0 style date)
.IP "\(bu" 4
\&\f(CW%g\fR
.Sp
The year corresponding to the \s-1ISO\s0 week number, but without the century
(0\-99).
.IP "\(bu" 4
\&\f(CW%G\fR
.Sp
The year corresponding to the \s-1ISO\s0 week number.
.IP "\(bu" 4
\&\f(CW%H\fR
.Sp
The hour (0\-23).
.IP "\(bu" 4
\&\f(CW%I\fR
.Sp
The hour on a 12\-hour clock (1\-12).
.IP "\(bu" 4
\&\f(CW%j\fR
.Sp
The day number in the year (1\-366).
.IP "\(bu" 4
\&\f(CW%m\fR
.Sp
The month number (1\-12).
.IP "\(bu" 4
\&\f(CW%M\fR
.Sp
The minute (0\-59).
.IP "\(bu" 4
\&\f(CW%n\fR
.Sp
Arbitrary whitespace.
.IP "\(bu" 4
\&\f(CW%N\fR
.Sp
Nanoseconds. For other sub-second values use \f(CW\*(C`%[number]N\*(C'\fR.
.IP "\(bu" 4
\&\f(CW%p\fR
.Sp
The equivalent of \s-1AM\s0 or \s-1PM\s0 according to the locale in use. (See
DateTime::Locale)
.IP "\(bu" 4
\&\f(CW%r\fR
.Sp
Equivalent to \f(CW%I:\fR%M:%S \f(CW%p\fR.
.IP "\(bu" 4
\&\f(CW%R\fR
.Sp
Equivalent to \f(CW%H:\fR%M.
.IP "\(bu" 4
\&\f(CW%s\fR
.Sp
Number of seconds since the Epoch.
.IP "\(bu" 4
\&\f(CW%S\fR
.Sp
The second (0\-60; 60 may occur for leap seconds. See
DateTime::LeapSecond).
.IP "\(bu" 4
\&\f(CW%t\fR
.Sp
Arbitrary whitespace.
.IP "\(bu" 4
\&\f(CW%T\fR
.Sp
Equivalent to \f(CW%H:\fR%M:%S.
.IP "\(bu" 4
\&\f(CW%U\fR
.Sp
The week number with Sunday the first day of the week (0\-53). The first
Sunday of January is the first day of week 1.
.IP "\(bu" 4
\&\f(CW%u\fR
.Sp
The weekday number (1\-7) with Monday = 1. This is the \f(CW\*(C`DateTime\*(C'\fR standard.
.IP "\(bu" 4
\&\f(CW%w\fR
.Sp
The weekday number (0\-6) with Sunday = 0.
.IP "\(bu" 4
\&\f(CW%W\fR
.Sp
The week number with Monday the first day of the week (0\-53). The first
Monday of January is the first day of week 1.
.IP "\(bu" 4
\&\f(CW%y\fR
.Sp
The year within century (0\-99). When a century is not otherwise
specified, values in the range 69\-99 refer to years in the twentieth
century (1969\-1999); values in the range 00\-68 refer to years in the
twenty-first century (2000\-2068).
.IP "\(bu" 4
\&\f(CW%Y\fR
.Sp
The year, including century (for example, 1991).
.IP "\(bu" 4
\&\f(CW%z\fR
.Sp
An \s-1RFC\-822/ISO\s0 8601 standard time zone specification. (For example
+1100) [See note below]
.IP "\(bu" 4
\&\f(CW%Z\fR
.Sp
The timezone name. (For example \s-1EST\s0 \*(-- which is ambiguous) [See note
below]
.IP "\(bu" 4
\&\f(CW%O\fR
.Sp
This extended token allows the use of Olson Time Zone names to appear
in parsed strings. \fB\s-1NOTE\s0\fR: This pattern cannot be passed to \f(CW\*(C`DateTime\*(C'\fR's
\&\f(CW\*(C`strftime()\*(C'\fR method, but can be passed to \f(CW\*(C`format_datetime()\*(C'\fR.
.SH "AUTHOR EMERITUS"
.IX Header "AUTHOR EMERITUS"
This module was created by Rick Measham.
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-datetime\-format\-strptime@rt.cpan.org\*(C'\fR, or through the web interface at
<http://rt.cpan.org>. I will be notified, and then you'll automatically be
notified of progress on your bug as I make changes.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\f(CW\*(C`datetime@perl.org\*(C'\fR mailing list.
.PP
http://datetime.perl.org/
.PP
perl, DateTime, DateTime::TimeZone, DateTime::Locale
.SH "AUTHOR"
.IX Header "AUTHOR"
Dave Rolsky <autarch@urth.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2010 by Dave Rolsky.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0
.Ve
