.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Pod::Coverage 3"
.TH Pod::Coverage 3 "2012-02-07" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Pod::Coverage \- Checks if the documentation of a module is comprehensive
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  # in the beginnning...
\&  perl \-MPod::Coverage=Pod::Coverage \-e666
\&
\&  # all in one invocation
\&  use Pod::Coverage package => \*(AqFishy\*(Aq;
\&
\&  # straight OO
\&  use Pod::Coverage;
\&  my $pc = Pod::Coverage\->new(package => \*(AqPod::Coverage\*(Aq);
\&  print "We rock!" if $pc\->coverage == 1;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Developers hate writing documentation.  They'd hate it even more if
their computer tattled on them, but maybe they'll be even more
thankful in the long run.  Even if not, \fIperlmodstyle\fR tells you to, so
you must obey.
.PP
This module provides a mechanism for determining if the pod for a
given module is comprehensive.
.PP
It expects to find either a \f(CW\*(C`=head(n>1)\*(C'\fR or an \f(CW\*(C`=item\*(C'\fR block documenting a
subroutine.
.PP
Consider:
 # an imaginary Foo.pm
 package Foo;
.PP
.Vb 1
\& =item foo
\&
\& The foo sub
\&
\& = cut
\&
\& sub foo {}
\& sub bar {}
\&
\& 1;
\& _\|_END_\|_
.Ve
.PP
In this example \f(CW\*(C`Foo::foo\*(C'\fR is covered, but \f(CW\*(C`Foo::bar\*(C'\fR is not, so the \f(CW\*(C`Foo\*(C'\fR
package is only 50% (0.5) covered
.SS "Methods"
.IX Subsection "Methods"
.ie n .IP "Pod::Coverage\->new(package => $package)" 4
.el .IP "Pod::Coverage\->new(package => \f(CW$package\fR)" 4
.IX Item "Pod::Coverage->new(package => $package)"
Creates a new Pod::Coverage object.
.Sp
\&\f(CW\*(C`package\*(C'\fR the name of the package to analyse
.Sp
\&\f(CW\*(C`private\*(C'\fR an array of regexen which define what symbols are regarded
as private (and so need not be documented) defaults to [ qr/^_/,
qr/^(un)?import$/, qr/^DESTROY$/, qr/^AUTOLOAD$/, qr/^bootstrap$/,
        qr/^(\s-1TIE\s0( \s-1SCALAR\s0 | \s-1ARRAY\s0 | \s-1HASH\s0 | \s-1HANDLE\s0 ) |
             \s-1FETCH\s0 | \s-1STORE\s0 | \s-1UNTIE\s0 | \s-1FETCHSIZE\s0 | \s-1STORESIZE\s0 |
             \s-1POP\s0 | \s-1PUSH\s0 | \s-1SHIFT\s0 | \s-1UNSHIFT\s0 | \s-1SPLICE\s0 | \s-1DELETE\s0 |
             \s-1EXISTS\s0 | \s-1EXTEND\s0 | \s-1CLEAR\s0 | \s-1FIRSTKEY\s0 | \s-1NEXTKEY\s0 | \s-1PRINT\s0 | \s-1PRINTF\s0 |
             \s-1WRITE\s0 | \s-1READLINE\s0 | \s-1GETC\s0 | \s-1READ\s0 | \s-1CLOSE\s0 | \s-1BINMODE\s0 | \s-1OPEN\s0 |
             \s-1EOF\s0 | \s-1FILENO\s0 | \s-1SEEK\s0 | \s-1TELL\s0 | \s-1SCALAR\s0 )$/x,
        qr/^( \s-1MODIFY\s0 | \s-1FETCH\s0 )_( \s-1REF\s0 | \s-1SCALAR\s0 | \s-1ARRAY\s0 | \s-1HASH\s0 | \s-1CODE\s0 |
                                 \s-1GLOB\s0 | \s-1FORMAT\s0 | \s-1IO\s0 )_ATTRIBUTES$/x,
        qr/^CLONE(_SKIP)?$/,
]
.Sp
This should cover all the usual magical methods for \fItie()\fRd objects,
attributes, generally all the methods that are typically not called by
a user, but instead being used internally by perl.
.Sp
\&\f(CW\*(C`also_private\*(C'\fR items are appended to the private list
.Sp
\&\f(CW\*(C`trustme\*(C'\fR an array of regexen which define what symbols you just want
us to assume are properly documented even if we can't find any docs
for them
.Sp
If \f(CW\*(C`pod_from\*(C'\fR is supplied, that file is parsed for the documentation,
rather than using Pod::Find
.Sp
If \f(CW\*(C`nonwhitespace\*(C'\fR is supplied, then only \s-1POD\s0 sections which have
non-whitespace characters will count towards being documented.
.ie n .IP "$object\->coverage" 4
.el .IP "\f(CW$object\fR\->coverage" 4
.IX Item "$object->coverage"
Gives the coverage as a value in the range 0 to 1
.ie n .IP "$object\->why_unrated" 4
.el .IP "\f(CW$object\fR\->why_unrated" 4
.IX Item "$object->why_unrated"
\&\f(CW\*(C`$object\->coverage\*(C'\fR may return \f(CW\*(C`undef\*(C'\fR, to indicate that it was
unable to deduce coverage for a package.  If this happens you should
be able to check \f(CW\*(C`why_unrated\*(C'\fR to get a useful excuse.
.ie n .IP "$object\->naked/$object\->uncovered" 4
.el .IP "\f(CW$object\fR\->naked/$object\->uncovered" 4
.IX Item "$object->naked/$object->uncovered"
Returns a list of uncovered routines, will implicitly call coverage if
it's not already been called.
.Sp
Note, private and 'trustme' identifiers will be skipped.
.ie n .IP "$object\->covered" 4
.el .IP "\f(CW$object\fR\->covered" 4
.IX Item "$object->covered"
Returns a list of covered routines, will implicitly call coverage if
it's not previously been called.
.Sp
As with \f(CW\*(C`naked\*(C'\fR, private and 'trustme' identifiers will be skipped.
.SS "Debugging support"
.IX Subsection "Debugging support"
In order to allow internals debugging, while allowing the optimiser to
do its thang, \f(CW\*(C`Pod::Coverage\*(C'\fR uses constant subs to define how it traces.
.PP
Use them like so
.PP
.Vb 2
\& sub Pod::Coverage::TRACE_ALL () { 1 }
\& use Pod::Coverage;
.Ve
.PP
Supported constants are:
.IP "\s-1TRACE_ALL\s0" 4
.IX Item "TRACE_ALL"
Trace everything.
.Sp
Well that's all there is so far, are you glad you came?
.SS "Inheritance interface"
.IX Subsection "Inheritance interface"
These abstract methods while functional in \f(CW\*(C`Pod::Coverage\*(C'\fR may make
your life easier if you want to extend \f(CW\*(C`Pod::Coverage\*(C'\fR to fit your
house style more closely.
.PP
\&\fB\s-1NOTE\s0\fR Please consider this interface as in a state of flux until
this comment goes away.
.ie n .IP "$object\->_CvGV($symbol)" 4
.el .IP "\f(CW$object\fR\->_CvGV($symbol)" 4
.IX Item "$object->_CvGV($symbol)"
Return the \s-1GV\s0 for the coderef supplied.  Used by \f(CW\*(C`_get_syms\*(C'\fR to identify
locally defined code.
.Sp
You probably won't need to override this one.
.ie n .IP "$object\->_get_syms($package)" 4
.el .IP "\f(CW$object\fR\->_get_syms($package)" 4
.IX Item "$object->_get_syms($package)"
return a list of symbols to check for from the specified packahe
.IP "_get_pods" 4
.IX Item "_get_pods"
Extract pod markers from the currently active package.
.Sp
Return an arrayref or undef on fail.
.IP "_private_check($symbol)" 4
.IX Item "_private_check($symbol)"
return true if the symbol should be considered private
.IP "_trustme_check($symbol)" 4
.IX Item "_trustme_check($symbol)"
return true if the symbol is a 'trustme' symbol
.SH "BUGS"
.IX Header "BUGS"
Due to the method used to identify documented subroutines
\&\f(CW\*(C`Pod::Coverage\*(C'\fR may completely miss your house style and declare your
code undocumented.  Patches and/or failing tests welcome.
.SH "TODO"
.IX Header "TODO"
.IP "Widen the rules for identifying documentation" 4
.IX Item "Widen the rules for identifying documentation"
.PD 0
.ie n .IP "Improve the code coverage of the test suite.  ""Devel::Cover"" rocks so hard." 4
.el .IP "Improve the code coverage of the test suite.  \f(CWDevel::Cover\fR rocks so hard." 4
.IX Item "Improve the code coverage of the test suite.  Devel::Cover rocks so hard."
.PD
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Test::More, Devel::Cover
.SH "AUTHORS"
.IX Header "AUTHORS"
Richard Clamp <richardc@unixbeard.net>
.PP
Michael Stevens <mstevens@etla.org>
.PP
some contributions from David Cantrell <david@cantrell.org.uk>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2001, 2003, 2004, 2006, 2007, 2009 Richard Clamp, Michael
Stevens. All rights reserved.  This program is free software; you can
redistribute it and/or modify it under the same terms as Perl itself.
