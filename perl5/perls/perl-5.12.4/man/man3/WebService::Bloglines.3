.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "WebService::Bloglines 3"
.TH WebService::Bloglines 3 "2006-11-12" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WebService::Bloglines \- Easy\-to\-use Interface for Bloglines Web Services
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use WebService::Bloglines;
\&
\&  my $bloglines = WebService::Bloglines\->new(
\&      username => $username,
\&      password => $password, # password is optional for notify()
\&      use_liberal => 1,
\&  );
\&
\&  # get the number of unread items using Notifer API
\&  my $notifier = $bloglines\->notify();
\&
\&  # list subscriptions using Sync API
\&  my $subscription = $bloglines\->listsubs();
\&
\&  # list all feeds
\&  my @feeds = $subscription\->feeds();
\&  for my $feed (@feeds) {
\&      my $title  = $feed\->{title};            # title of the feed
\&      my $url    = $feed\->{htmlUrl};          # URL for HTML
\&      my $type   = $feed\->{type};             # "rss"
\&      my $xml    = $feed\->{xmlUrl};           # URL for XML
\&      my $subid  = $feed\->{BloglinesSubId};   # Blogines SubId
\&      my $unread = $feed\->{BloglinesUnread};  # number of unread items
\&      my $ignore = $feed\->{BloglinesIgnore};  # flag to ignore update
\&  }
\&
\&  # list folders
\&  my @folders = $subscription\->folders();
\&  for my $folder (@folders) {
\&      my $title  = $folder\->{title};  # title of the folder
\&      my $unread = $folder\->{BloglinesUnread}; # number of unread items
\&      my $subid  = $folder\->{BloglinesSubId};  # Bloglines SubId
\&      my $ignore = $folder\->{BloglinesIgnore}; # flag to ignore update
\&      my @feeds  = $subscription\->feeds_in_folder($subid);
\&  }
\&
\&  # list feeds in root folder
\&  my @root_feeds = $subscription\->feeds_in_folder(); # no args or just use $subId = 0
\&
\&  # get new items using Sync API
\&  my $update = $bloglines\->getitems($subId);
\&  #  $update = $bloglines\->getitems($subId, 1);            # mark unread items as read
\&  #  $update = $bloglines\->getitems($subId, 1, $unixtime); # items from $unixtime
\&
\&  # get channel information
\&  my $feed = $update\->feed();
\&  $feed\->{title};       # channel/title
\&  $feed\->{link};        # channel/link
\&  $feed\->{description}; # channel/description
\&  $feed\->{bloglines}\->{siteid};      # bloglines::siteid
\&  $feed\->{language};    # language
\&
\&  for my $item ($update\->items) {
\&      my $title       = $item\->{title};
\&      my $creator     = $item\->{dc}\->{creator};
\&      my $link        = $item\->{link};
\&      my $guid        = $item\->{guid};
\&      my $description = $item\->{description};
\&      my $pubDate     = $item\->{pubDate}; # "Mon, 27 Sep 2004 8:04:17 GMT"
\&      my $itemid      = $item\->{bloglines}\->{itemid};
\&  }
\&
\&  # get all unread items in a single call
\&  my @updates = $bloglines\->getitems(0);
\&  for my $update (@updates) {
\&      my $feed = $update\->feed();
\&      for my $item ($update\->items) {
\&          ...
\&      }
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
WebService::Bloglines priovides you an Object Oriented interface for
Bloglines Web Services (\s-1BWS\s0). It currently supports Notifier \s-1API\s0 and
Sync \s-1API\s0. See http://www.bloglines.com/services/api/ for details.
.SH "METHODS"
.IX Header "METHODS"
\&\s-1TBD\s0.
.SH "TODO"
.IX Header "TODO"
.IP "\(bu" 4
Cleaner \s-1API\s0 to make users free from the difference between \s-1OPML\s0 and \s-1RSS\s0 stuff
.IP "\(bu" 4
Use LibXML to parse \s-1OPML\s0?
.SH "WARNING"
.IX Header "WARNING"
This module is in beta version. Object interface it provides may be changed later.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tatsuhiko Miyagawa <miyagawa@bulknews.net>
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
http://www.bloglines.com/
.PP
http://www.bloglines.com/services/api/
.PP
Blog Hacks: http://hacks.bloghackers.net/ (in Japanese)
