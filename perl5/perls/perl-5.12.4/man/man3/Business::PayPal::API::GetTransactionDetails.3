.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Business::PayPal::API::GetTransactionDetails 3"
.TH Business::PayPal::API::GetTransactionDetails 3 "2009-12-07" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Business::PayPal::API::GetTransactionDetails \- PayPal GetTransactionDetails API
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Business::PayPal::API::GetTransactionDetails;
\&  my $pp = new Business::PayPal::API::GetTransactionDetails ( ... );
.Ve
.PP
or
.PP
.Vb 3
\&  ## see Business::PayPal::API documentation for parameters
\&  use Business::PayPal::API qw(GetTransactionDetails);
\&  my $pp = new Business::PayPal::API( ... );
\&
\&  my %response = $pp\->GetTransactionDetails( TransactionID => $transid, );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBBusiness::PayPal::API::GetTransactionDetails\fR implements PayPal's
\&\fBGetTransactionDetails\fR \s-1API\s0 using SOAP::Lite to make direct \s-1API\s0 calls to
PayPal's \s-1SOAP\s0 \s-1API\s0 server. It also implements support for testing via
PayPal's \fIsandbox\fR. Please see Business::PayPal::API for details
on using the PayPal sandbox.
.SS "GetTransactionDetails"
.IX Subsection "GetTransactionDetails"
Implements PayPal's \fBGetTransactionDetails\fR \s-1API\s0 call. Supported
parameters include:
.PP
.Vb 1
\&  TransactionID
.Ve
.PP
as described in the PayPal \*(L"Web Services \s-1API\s0 Reference\*(R" document.
.PP
Returns a hash containing the transaction details, including these fields:
.PP
.Vb 3
\&  Business
\&  Receiver
\&  ReceiverID
\&
\&  Payer
\&  PayerID
\&  PayerStatus
\&
\&  Salutation
\&  FirstName
\&  MiddleName
\&  LastName
\&
\&  PayerCountry
\&  PayerBusiness
\&
\&  AddressOwner
\&  AddressStatus
\&  ADD_Name
\&  Street1
\&  Street2
\&  CityName
\&  StateOrProvince
\&  Country
\&  CountryName
\&  Phone
\&  PostalCode
\&
\&  TransactionID
\&  ParentTransactionID
\&  ReceiptID
\&  TransactionType
\&  PaymentType
\&  PaymentDate
\&  GrossAmount
\&  FeeAmount
\&  SettleAmount
\&  TaxAmount
\&  ExchangeRate
\&  PaymentStatus
\&  PendingReason
\&  ReasonCode
\&
\&  InvoiceID
\&  Custom
\&  Memo
\&  SalesTax
\&
\&  PII_SaleTax
\&  PII_Name
\&  PII_Number
\&  PII_Quantity
\&  PII_Amount
\&  PII_Options
\&
\&  PII_SubscriptionID
\&  PII_SubscriptionDate
\&  PII_EffectiveDate
\&  PII_RetryTime
\&  PII_Username
\&  PII_Password
\&  PII_Recurrences
\&  PII_reattempt
\&  PII_recurring
\&  PII_Amount
\&  PII_period
\&
\&  PII_BuyerID
\&  PII_ClosingDate
\&  PII_multiItem
.Ve
.PP
As described in the \s-1API\s0 document. Note: some fields have prefixes to
remove ambiguity for like-named fields (e.g., \*(L"\s-1PII_\s0\*(R").
.PP
If there are multiple PaymentItems, then an additional field
\&'PaymentItems' will be available with an arrayref of PaymentItem
records:
.PP
.Vb 8
\&  PaymentItems => [ { SalesTax => ..., 
\&                      Name     => \*(Aq...\*(Aq,
\&                      Number   => \*(Aq...\*(Aq,
\&                      Quantity => \*(Aq...\*(Aq,
\&                      Amount   => \*(Aq...\*(Aq,
\&                    },
\&                    { SalesTax => ..., etc. 
\&                    } ]
.Ve
.PP
Example:
.PP
.Vb 2
\&  my %resp = $pp\->GetTransactionDetails( TransactionID => $trans_id );
\&  print "Payer: $resp{Payer}\en";
\&
\&  for my $item ( @{ $resp{PaymentItems} } ) {
\&      print "Name: " . $item\->{Name} . "\en";
\&      print "Amt: " . $item\->{Amount} . "\en";
\&  }
.Ve
.SS "\s-1ERROR\s0 \s-1HANDLING\s0"
.IX Subsection "ERROR HANDLING"
See the \fB\s-1ERROR\s0 \s-1HANDLING\s0\fR section of \fBBusiness::PayPal::API\fR for
information on handling errors.
.SS "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
None by default.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
<https://developer.paypal.com/en_US/pdf/PP_APIReference.pdf>
.SH "AUTHOR"
.IX Header "AUTHOR"
Scot Wiersdorf <scott@perlcode.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2006 by Scott Wiersdorf
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.5 or,
at your option, any later version of Perl 5 you may have available.
