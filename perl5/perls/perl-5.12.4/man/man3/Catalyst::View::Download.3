.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Catalyst::View::Download 3"
.TH Catalyst::View::Download 3 "2011-11-03" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::View::Download
.SH "VERSION"
.IX Header "VERSION"
0.07
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&        # lib/MyApp/View/Download.pm
\&        package MyApp::View::Download;
\&        use base qw( Catalyst::View::Download );
\&        1;
\&
\&        # lib/MyApp/Controller/SomeController.pm
\&        sub example_action_1 : Local {
\&                my ($self, $c) = @_;
\&
\&    # \*(Aqplain\*(Aq, \*(Aqcsv\*(Aq, \*(Aqhtml\*(Aq, or \*(Aqxml\*(Aq
\&                my $content_type = $c\->request\->params\->{\*(Aqcontent_type\*(Aq} || \*(Aqplain\*(Aq; 
\&    
\&    # Set the content type so Catalyst::View::Download can determine how 
\&    # to process it.
\&                $c\->header(\*(AqContent\-Type\*(Aq => \*(Aqtext/\*(Aq.$content_type); 
\&
\&    # Or set the content type in the stash variable \*(Aqdownload\*(Aq 
\&    # to process it. (Note: this is configurable)
\&    $c\->stash\->{\*(Aqdownload\*(Aq} = \*(Aqtext/\*(Aq.$content_type; 
\&
\&                # Array reference of array references.
\&                my $data = [
\&                        [\*(Aqcol 1\*(Aq,\*(Aqcol 2\*(Aq,\*(Aqcol ...\*(Aq,\*(Aqcol N\*(Aq], # row 1
\&                        [\*(Aqcol 1\*(Aq,\*(Aqcol 2\*(Aq,\*(Aqcol ...\*(Aq,\*(Aqcol N\*(Aq], # row 2
\&                        [\*(Aqcol 1\*(Aq,\*(Aqcol 2\*(Aq,\*(Aqcol ...\*(Aq,\*(Aqcol N\*(Aq], # row ...
\&                        [\*(Aqcol 1\*(Aq,\*(Aqcol 2\*(Aq,\*(Aqcol ...\*(Aq,\*(Aqcol N\*(Aq]  # row N
\&                ];
\&
\&                # If the chosen content_type is \*(Aqcsv\*(Aq then the render function of 
\&    # Catalyst::View::Download::CSV will be called which uses the \*(Aqcsv\*(Aq 
\&    # stash key
\&                $c\->stash\->{\*(Aqcsv\*(Aq} = {
\&      data => $data
\&    };
\&
\&                use Data::Dumper;
\&
\&                # For html text in this example we just dump the example array in a basic
\&    # html document. Catalyst::View::Download::HTML can use either the \*(Aqhtml\*(Aq
\&    # stash key or just pull from $c\->response\->body
\&    $c\->stash\->{\*(Aqhtml\*(Aq} = {
\&        data => \*(Aq<!DOCTYPE html PUBLIC "\-//W3C//DTD XHTML 1.0 Strict//EN" 
\&"http://www.w3.org/TR/xhtml1/DTD/xhtml1\-strict.dtd"><html><head>
\&<title></title></head><body>\*(Aq.Dumper( $data ).\*(Aq</body></html>\*(Aq
\&    };
\&    
\&                # For plain text in this example we just dump the example array.
\&                # Catalyst::View::Download::Plain can use either the \*(Aqplain\*(Aq
\&    # stash key or just pull from $c\->response\->body.
\&    $c\->stash\->{\*(Aqplain\*(Aq} = {
\&      data => Dumper( $data )
\&    };
\&
\&                # Finally forward processing to the Download View
\&                $c\->forward(\*(AqMyApp::View::Download\*(Aq);
\&        }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A view module to help in the convenience of downloading data into many supportable formats.
.SH "SUBROUTINES"
.IX Header "SUBROUTINES"
.SS "process"
.IX Subsection "process"
This method will be called by Catalyst if it is asked to forward to a component without a specified action.
.SS "render"
.IX Subsection "render"
Allows others to use this view for much more fine-grained content generation.
.SH "CONFIG"
.IX Header "CONFIG"
.IP "stash_key" 4
.IX Item "stash_key"
Determines the key in the stash this view will look for when attempting to retrieve the type of format to process. If this key isn't found it will search for a Content-Type header for the format. Further if neither are found a default format will be applied.
.Sp
.Vb 1
\&        $c\->view(\*(AqMyApp::View::Download\*(Aq)\->config\->{\*(Aqstash_key\*(Aq} = \*(Aqcontent_type\*(Aq;
.Ve
.IP "default" 4
.IX Item "default"
Determines which Content-Type to use by default. Default: 'text/plain'
.Sp
.Vb 1
\&        $c\->view(\*(AqMyApp::View::Download\*(Aq)\->config(\*(Aqdefault\*(Aq => \*(Aqtext/plain\*(Aq);
.Ve
.IP "content_type" 4
.IX Item "content_type"
A hash ref of hash refs. Each key in content_type is Content-Type that is handled by this view.
.Sp
.Vb 4
\&        $c\->view(\*(AqMyApp::View::Download\*(Aq)\->config\->{\*(Aqcontent_type\*(Aq}{\*(Aqtext/csv\*(Aq} = {
\&                \*(Aqoutfile\*(Aq => \*(Aqsomefile.csv\*(Aq,
\&                \*(Aqmodule\*(Aq => \*(AqMy::Module\*(Aq
\&        };
.Ve
.Sp
The Content-Type key refers to it's own hash of parameters to determine the actions thie view should take for that Content-Type.
.Sp
\&'outfile' \- The name and extenstion of the file that will display by default in the download dialog box.
.Sp
\&'module' \- The name of the module that will handle data output. If there is a plus symbol '+' at the beginning of the module name, this will indicate that the module is a Catalyst::View module will will add 'Catalyst::View::' to the beginning of the module name.
.Sp
.Vb 4
\&  # Module Loaded: Catalyst::View::Download::CSV
\&        $c\->view(\*(AqMyApp::View::Download\*(Aq)
\&    \->config
\&    \->{\*(Aqcontent_type\*(Aq}{\*(Aqtext/csv\*(Aq}{\*(Aqmodule\*(Aq} = \*(Aq+Download::CSV\*(Aq; 
\&
\&  # Module Loaded: My::Module::CSV
\&        $c\->view(\*(AqMyApp::View::Download\*(Aq)
\&    \->config
\&    \->{\*(Aqcontent_type\*(Aq}{\*(Aqtext/csv\*(Aq}{\*(Aqmodule\*(Aq} = \*(AqMy::Module::CSV\*(Aq;
.Ve
.SH "Content-Type Module Requirements"
.IX Header "Content-Type Module Requirements"
Any module set as 'the' module for a certain Content-Type needs to have a subroutine named 'render' that returns the content to output with the following parameters handled.
.ie n .IP "$c" 4
.el .IP "\f(CW$c\fR" 4
.IX Item "$c"
The catalyst \f(CW$c\fR variable
.ie n .IP "$template" 4
.el .IP "\f(CW$template\fR" 4
.IX Item "$template"
In case a template file is needed for the module. This view will pass \f(CW$c\fR\->stash\->{template} as this value.
.ie n .IP "$args" 4
.el .IP "\f(CW$args\fR" 4
.IX Item "$args"
A list of arguments the module will use to process the data into content. This view will pass \f(CW$c\fR\->stash as this value.
.SH "CURRENT CONTENT-TYPES SUPPORTED"
.IX Header "CURRENT CONTENT-TYPES SUPPORTED"
.SS "text/csv"
.IX Subsection "text/csv"
Catalyst::View::Download has the following default configuration for this Content-Type
.PP
.Vb 4
\&        $c\->view(\*(AqMyApp::View::Download\*(Aq)\->config\->{\*(Aqcontent_type\*(Aq}{\*(Aqtext/csv\*(Aq} = {
\&                \*(Aqoutfile\*(Aq => \*(Aqdata.csv\*(Aq,
\&                \*(Aqmodule\*(Aq => \*(Aq+Download::CSV\*(Aq
\&        };
.Ve
.PP
See Catalyst::View::Download::CSV for more details.
.SS "text/html"
.IX Subsection "text/html"
Catalyst::View::Download has the following default configuration for this Content-Type
.PP
.Vb 4
\&  $c\->view(\*(AqMyApp::View::Download\*(Aq)\->config\->{\*(Aqcontent_type\*(Aq}{\*(Aqtext/html\*(Aq} = {
\&    \*(Aqoutfile\*(Aq => \*(Aqdata.html\*(Aq,
\&    \*(Aqmodule\*(Aq => \*(Aq+Download::HTML\*(Aq
\&  };
.Ve
.PP
See Catalyst::View::Download::HTML for more details.
.SS "text/plain"
.IX Subsection "text/plain"
Catalyst::View::Download has the following default configuration for this Content-Type
.PP
.Vb 1
\&        $c\->view(\*(AqMyApp::View::Download\*(Aq)\->config\->{\*(Aqdefault\*(Aq} = \*(Aqtext/plain\*(Aq;
\&
\&        $c\->view(\*(AqMyApp::View::Download\*(Aq)\->config\->{\*(Aqcontent_type\*(Aq}{\*(Aqtext/plain\*(Aq} = {
\&                \*(Aqoutfile\*(Aq => \*(Aqdata.txt\*(Aq,
\&                \*(Aqmodule\*(Aq => \*(Aq+Download::Plain\*(Aq
\&        };
.Ve
.PP
See Catalyst::View::Download::Plain for more details.
.SS "text/xml"
.IX Subsection "text/xml"
Catalyst::View::Download has the following default configuration for this Content-Type
.PP
.Vb 4
\&  $c\->view(\*(AqMyApp::View::Download\*(Aq)\->config\->{\*(Aqcontent_type\*(Aq}{\*(Aqtext/xml\*(Aq} = {
\&    \*(Aqoutfile\*(Aq => \*(Aqdata.xml\*(Aq,
\&    \*(Aqmodule\*(Aq => \*(Aq+Download::XML\*(Aq
\&  };
.Ve
.PP
See Catalyst::View::Download::XML for more details.
.SH "BUGS"
.IX Header "BUGS"
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Catalyst Catalyst::View
.SH "AUTHOR"
.IX Header "AUTHOR"
Travis Chase, \f(CW\*(C`<gaudeon at cpan.org>\*(C'\fR
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Thanks to following people for their constructive comments and help:
.IP "J. Shirley" 4
.IX Item "J. Shirley"
.PD 0
.IP "Jonathan Rockway" 4
.IX Item "Jonathan Rockway"
.IP "Jon Schutz" 4
.IX Item "Jon Schutz"
.IP "Kevin Frost" 4
.IX Item "Kevin Frost"
.IP "Michele Beltrame" 4
.IX Item "Michele Beltrame"
.IP "Dave Lambley" 4
.IX Item "Dave Lambley"
.PD
.PP
Thanks also to my company Ti4 Technologies for their financial support. <http://www.ti4tech.com/>
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2011 Travis Chase.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
