.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojolicious::Renderer 3"
.TH Mojolicious::Renderer 3 "2012-02-18" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Renderer \- MIME type based renderer
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Mojolicious::Renderer;
\&
\&  my $renderer = Mojolicious::Renderer\->new;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Renderer is the standard Mojolicious renderer. See
Mojolicious::Guides::Rendering for more.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojolicious::Renderer implements the following attributes.
.ie n .SS """cache"""
.el .SS "\f(CWcache\fP"
.IX Subsection "cache"
.Vb 2
\&  my $cache = $renderer\->cache;
\&  $renderer = $renderer\->cache(Mojo::Cache\->new);
.Ve
.PP
Renderer cache, defaults to a Mojo::Cache object. Note that this attribute
is \s-1EXPERIMENTAL\s0 and might change without warning!
.ie n .SS """default_format"""
.el .SS "\f(CWdefault_format\fP"
.IX Subsection "default_format"
.Vb 2
\&  my $default = $renderer\->default_format;
\&  $renderer   = $renderer\->default_format(\*(Aqhtml\*(Aq);
.Ve
.PP
The default format to render if \f(CW\*(C`format\*(C'\fR is not set in the stash. The
renderer will use \*(L"types\*(R" in Mojolicious to look up the content \s-1MIME\s0 type.
.ie n .SS """default_handler"""
.el .SS "\f(CWdefault_handler\fP"
.IX Subsection "default_handler"
.Vb 2
\&  my $default = $renderer\->default_handler;
\&  $renderer   = $renderer\->default_handler(\*(Aqepl\*(Aq);
.Ve
.PP
The default template handler to use for rendering in cases where auto
detection doesn't work, like for \f(CW\*(C`inline\*(C'\fR templates.
.IP "\fBepl\fR" 2
.IX Item "epl"
\&\f(CW\*(C`Embedded Perl Lite\*(C'\fR handled by Mojolicious::Plugin::EPLRenderer.
.IP "\fBep\fR" 2
.IX Item "ep"
\&\f(CW\*(C`Embedded Perl\*(C'\fR handled by Mojolicious::Plugin::EPRenderer.
.ie n .SS """default_template_class"""
.el .SS "\f(CWdefault_template_class\fP"
.IX Subsection "default_template_class"
.Vb 2
\&  my $default = $renderer\->default_template_class;
\&  $renderer   = $renderer\->default_template_class(\*(Aqmain\*(Aq);
.Ve
.PP
Class to use for finding templates in \f(CW\*(C`DATA\*(C'\fR section, defaults to \f(CW\*(C`main\*(C'\fR.
.ie n .SS """detect_templates"""
.el .SS "\f(CWdetect_templates\fP"
.IX Subsection "detect_templates"
.Vb 2
\&  my $detect = $renderer\->detect_templates;
\&  $renderer  = $renderer\->detect_templates(1);
.Ve
.PP
Template auto detection, the renderer will try to select the right template
and renderer automatically.
.ie n .SS """encoding"""
.el .SS "\f(CWencoding\fP"
.IX Subsection "encoding"
.Vb 2
\&  my $encoding = $renderer\->encoding;
\&  $renderer    = $renderer\->encoding(\*(Aqkoi8\-r\*(Aq);
.Ve
.PP
Will encode the content if set, defaults to \f(CW\*(C`UTF\-8\*(C'\fR.
.ie n .SS """handlers"""
.el .SS "\f(CWhandlers\fP"
.IX Subsection "handlers"
.Vb 2
\&  my $handlers = $renderer\->handlers;
\&  $renderer    = $renderer\->handlers({epl => sub {...}});
.Ve
.PP
Registered handlers.
.ie n .SS """helpers"""
.el .SS "\f(CWhelpers\fP"
.IX Subsection "helpers"
.Vb 2
\&  my $helpers = $renderer\->helpers;
\&  $renderer   = $renderer\->helpers({url_for => sub {...}});
.Ve
.PP
Registered helpers.
.ie n .SS """layout_prefix"""
.el .SS "\f(CWlayout_prefix\fP"
.IX Subsection "layout_prefix"
.Vb 2
\&  my $prefix = $renderer\->layout_prefix;
\&  $renderer  = $renderer\->layout_prefix(\*(Aqlayouts\*(Aq);
.Ve
.PP
Directory to look for layouts in, defaults to \f(CW\*(C`layouts\*(C'\fR.
.ie n .SS """paths"""
.el .SS "\f(CWpaths\fP"
.IX Subsection "paths"
.Vb 2
\&  my $paths = $renderer\->paths;
\&  $renderer = $renderer\->paths([\*(Aq/foo/bar/templates\*(Aq]);
.Ve
.PP
Directories to look for templates in.
.PP
.Vb 2
\&  # Add another "templates" directory
\&  push @{$renderer\->paths}, \*(Aq/foo/bar/templates\*(Aq;
.Ve
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Renderer inherits all methods from Mojo::Base and
implements the following ones.
.ie n .SS """new"""
.el .SS "\f(CWnew\fP"
.IX Subsection "new"
.Vb 1
\&  my $renderer = Mojolicious::Renderer\->new;
.Ve
.PP
Construct a new renderer.
.ie n .SS """add_handler"""
.el .SS "\f(CWadd_handler\fP"
.IX Subsection "add_handler"
.Vb 1
\&  $renderer = $renderer\->add_handler(epl => sub {...});
.Ve
.PP
Add a new handler to the renderer. See Mojolicious::Plugin::EPRenderer for
a sample renderer.
.ie n .SS """add_helper"""
.el .SS "\f(CWadd_helper\fP"
.IX Subsection "add_helper"
.Vb 1
\&  $renderer = $renderer\->add_helper(url_for => sub {...});
.Ve
.PP
Add a new helper to the renderer. See Mojolicious::Plugin::EPRenderer for
sample helpers.
.ie n .SS """get_data_template"""
.el .SS "\f(CWget_data_template\fP"
.IX Subsection "get_data_template"
.Vb 6
\&  my $template = $renderer\->get_data_template({
\&    template       => \*(Aqfoo/bar\*(Aq,
\&    format         => \*(Aqhtml\*(Aq,
\&    handler        => \*(Aqepl\*(Aq
\&    template_class => \*(Aqmain\*(Aq
\&  }, \*(Aqfoo.html.ep\*(Aq);
.Ve
.PP
Get a \s-1DATA\s0 template by name, usually used by handlers.
.ie n .SS """render"""
.el .SS "\f(CWrender\fP"
.IX Subsection "render"
.Vb 2
\&  my ($output, $type) = $renderer\->render($c);
\&  my ($output, $type) = $renderer\->render($c, $args);
.Ve
.PP
Render output through one of the Mojo renderers. This renderer requires some
configuration, at the very least you will need to have a default \f(CW\*(C`format\*(C'\fR
and a default \f(CW\*(C`handler\*(C'\fR as well as a \f(CW\*(C`template\*(C'\fR or \f(CW\*(C`text\*(C'\fR/\f(CW\*(C`json\*(C'\fR. See
\&\*(L"render\*(R" in Mojolicious::Controller for a more user-friendly interface.
.ie n .SS """template_name"""
.el .SS "\f(CWtemplate_name\fP"
.IX Subsection "template_name"
.Vb 5
\&  my $template = $renderer\->template_name({
\&    template => \*(Aqfoo/bar\*(Aq,
\&    format   => \*(Aqhtml\*(Aq,
\&    handler  => \*(Aqepl\*(Aq
\&  });
.Ve
.PP
Builds a template name based on an options hash with \f(CW\*(C`template\*(C'\fR, \f(CW\*(C`format\*(C'\fR
and \f(CW\*(C`handler\*(C'\fR.
.ie n .SS """template_path"""
.el .SS "\f(CWtemplate_path\fP"
.IX Subsection "template_path"
.Vb 5
\&  my $path = $renderer\->template_path({
\&    template => \*(Aqfoo/bar\*(Aq,
\&    format   => \*(Aqhtml\*(Aq,
\&    handler  => \*(Aqepl\*(Aq
\&  });
.Ve
.PP
Builds a full template path based on an options hash with \f(CW\*(C`template\*(C'\fR,
\&\f(CW\*(C`format\*(C'\fR and \f(CW\*(C`handler\*(C'\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, <http://mojolicio.us>.
