.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DateTime::Format::Builder::Parser::generic 3"
.TH DateTime::Format::Builder::Parser::generic 3 "2012-02-19" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DateTime::Format::Builder::Parser::generic \- Useful routines
.SH "METHODS"
.IX Header "METHODS"
.SS "Useful"
.IX Subsection "Useful"
\fInew\fR
.IX Subsection "new"
.PP
Standard constructor. Returns a blessed hash; any arguments are placed
in the hash. This is useful for storing information between methods.
.PP
\fIgeneric_parser\fR
.IX Subsection "generic_parser"
.PP
This is a method provided solely for the benefit of
\&\f(CW\*(C`Parser\*(C'\fR implementations. It semi-neatly abstracts
a lot of the work involved.
.PP
Basically, it takes parameters matching the assorted
callbacks from the parser declarations and makes a coderef
out of it all.
.PP
Currently recognized callbacks are:
.IP "\(bu" 4
on_match
.IP "\(bu" 4
on_fail
.IP "\(bu" 4
preprocess
.IP "\(bu" 4
postprocess
.SS "Methods for subclassing"
.IX Subsection "Methods for subclassing"
These are methods you should define when writing your own subclass.
.PP
\&\fBNote\fR: these methods do not exist in this class. There is no point
trying to call \f(CW\*(C`$self\->SUPER::do_match( ... )\*(C'\fR.
.PP
\fIdo_match\fR
.IX Subsection "do_match"
.PP
\&\f(CW\*(C`do_match\*(C'\fR is the first phase. Arguments are the date and \f(CW@args\fR.
\&\f(CW\*(C`self\*(C'\fR, \f(CW\*(C`label\*(C'\fR, \f(CW\*(C`args\*(C'\fR. Return value must be defined if you match
successfully.
.PP
\fIpost_match\fR
.IX Subsection "post_match"
.PP
\&\f(CW\*(C`post_match\*(C'\fR is called after the appropriate callback out of
\&\f(CW\*(C`on_match\*(C'\fR/\f(CW\*(C`on_fail\*(C'\fR is done. It's passed the date, the return
value from \f(CW\*(C`do_match\*(C'\fR and the parsing hash.
.PP
Its return value is used as the \f(CW\*(C`post\*(C'\fR argument to the \f(CW\*(C`postprocess\*(C'\fR
callback, and as the second argument to \f(CW\*(C`make\*(C'\fR.
.PP
\fImake\fR
.IX Subsection "make"
.PP
\&\f(CW\*(C`make\*(C'\fR takes the original input, the return value from \f(CW\*(C`post_match\*(C'\fR
and the parsing hash and should return a \f(CW\*(C`DateTime\*(C'\fR object or
undefined.
.SS "Delegations"
.IX Subsection "Delegations"
For use of \f(CW\*(C`Parser\*(C'\fR, this module also delegates \f(CW\*(C`valid_params\*(C'\fR and
\&\f(CW\*(C`params\*(C'\fR. This is just convenience to save typing the following:
.PP
.Vb 1
\&    DateTime::Format::Builder::Parser\->valid_params( blah )
.Ve
.PP
Instead we get to type:
.PP
.Vb 2
\&    $self\->valid_params( blah );
\&    _\|_PACKAGE_\|_\->valid_params( blah );
.Ve
.SH "WRITING A SUBCLASS"
.IX Header "WRITING A SUBCLASS"
Rather than attempt to explain how it all works, I think it's best if
you take a look at \fIRegex.pm\fR and \fIStrptime.pm\fR as examples and
work from there.
.SH "THANKS"
.IX Header "THANKS"
See DateTime::Format::Builder.
.SH "SUPPORT"
.IX Header "SUPPORT"
Support for this module is provided via the datetime@perl.org email
list. See http://lists.perl.org/ for more details.
.PP
Alternatively, log them via the \s-1CPAN\s0 \s-1RT\s0 system via the web or email:
.PP
.Vb 2
\&    http://perl.dellah.org/rt/dtbuilder
\&    bug\-datetime\-format\-builder@rt.cpan.org
.Ve
.PP
This makes it much easier for me to track things and thus means
your problem is less likely to be neglected.
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright X Iain Truskett, 2003. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.000 or,
at your option, any later version of Perl 5 you may have available.
.PP
The full text of the licences can be found in the \fIArtistic\fR and
\&\fI\s-1COPYING\s0\fR files included with this module, or in perlartistic and
perlgpl as supplied with Perl 5.8.1 and later.
.SH "AUTHOR"
.IX Header "AUTHOR"
Iain Truskett <spoon@cpan.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\f(CW\*(C`datetime@perl.org\*(C'\fR mailing list.
.PP
http://datetime.perl.org/
.PP
perl, DateTime, DateTime::Format::Builder,
DateTime::Format::Builder::Parser.
