.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojolicious::Routes 3"
.TH Mojolicious::Routes 3 "2012-03-14" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Routes \- Always find your destination with routes
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Mojolicious::Routes;
\&
\&  # New routes tree
\&  my $r = Mojolicious::Routes\->new;
\&
\&  # Normal route matching "/articles" with parameters "controller" and
\&  # "action"
\&  $r\->route(\*(Aq/articles\*(Aq)\->to(controller => \*(Aqarticle\*(Aq, action => \*(Aqlist\*(Aq);
\&
\&  # Route with a placeholder matching everything but "/" and "."
\&  $r\->route(\*(Aq/:controller\*(Aq)\->to(action => \*(Aqlist\*(Aq);
\&
\&  # Route with a placeholder and regex constraint
\&  $r\->route(\*(Aq/articles/:id\*(Aq, id => qr/\ed+/)
\&    \->to(controller => \*(Aqarticle\*(Aq, action => \*(Aqview\*(Aq);
\&
\&  # Route with an optional parameter "year"
\&  $r\->route(\*(Aq/archive/:year\*(Aq)
\&    \->to(controller => \*(Aqarchive\*(Aq, action => \*(Aqlist\*(Aq, year => undef);
\&
\&  # Nested route for two actions sharing the same "controller" parameter
\&  my $books = $r\->route(\*(Aq/books/:id\*(Aq)\->to(controller => \*(Aqbook\*(Aq);
\&  $books\->route(\*(Aq/edit\*(Aq)\->to(action => \*(Aqedit\*(Aq);
\&  $books\->route(\*(Aq/delete\*(Aq)\->to(action => \*(Aqdelete\*(Aq);
\&
\&  # Bridges can be used to chain multiple routes
\&  $r\->bridge\->to(controller => \*(Aqfoo\*(Aq, action =>\*(Aqauth\*(Aq)
\&    \->route(\*(Aq/blog\*(Aq)\->to(action => \*(Aqlist\*(Aq);
\&
\&  # Waypoints are similar to bridges and nested routes but can also match
\&  # if they are not the actual endpoint of the whole route
\&  my $b = $r\->waypoint(\*(Aq/books\*(Aq)\->to(controller => \*(Aqbooks\*(Aq, action => \*(Aqlist\*(Aq);
\&  $b\->route(\*(Aq/:id\*(Aq, id => qr/\ed+/)\->to(action => \*(Aqview\*(Aq);
\&
\&  # Simplified Mojolicious::Lite style route generation is also possible
\&  $r\->get(\*(Aq/\*(Aq)\->to(controller => \*(Aqblog\*(Aq, action => \*(Aqwelcome\*(Aq);
\&  my $blog = $r\->under(\*(Aq/blog\*(Aq);
\&  $blog\->post(\*(Aq/list\*(Aq)\->to(\*(Aqblog#list\*(Aq);
\&  $blog\->get(sub { shift\->render(text => \*(AqGo away!\*(Aq) });
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Routes is the core of the Mojolicious web framework. See
Mojolicious::Guides::Routing for more.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojolicious::Routes implements the following attributes.
.ie n .SS """block"""
.el .SS "\f(CWblock\fP"
.IX Subsection "block"
.Vb 2
\&  my $block = $r\->block;
\&  $r        = $r\->block(1);
.Ve
.PP
Allow this route to match even if it's not an endpoint, used for waypoints.
.ie n .SS """children"""
.el .SS "\f(CWchildren\fP"
.IX Subsection "children"
.Vb 2
\&  my $children = $r\->children;
\&  $r           = $r\->children([Mojolicious::Routes\->new]);
.Ve
.PP
The children of this routes object, used for nesting routes.
.ie n .SS """cache"""
.el .SS "\f(CWcache\fP"
.IX Subsection "cache"
.Vb 2
\&  my $cache = $r\->cache;
\&  $r        = $r\->cache(Mojo::Cache\->new);
.Ve
.PP
Routing cache, defaults to a Mojo::Cache object. Note that this attribute
is \s-1EXPERIMENTAL\s0 and might change without warning!
.ie n .SS """conditions"""
.el .SS "\f(CWconditions\fP"
.IX Subsection "conditions"
.Vb 2
\&  my $conditions  = $r\->conditions;
\&  $r              = $r\->conditions([foo => qr/\ew+/]);
.Ve
.PP
Contains condition parameters for this route, used for \f(CW\*(C`over\*(C'\fR.
.ie n .SS """controller_base_class"""
.el .SS "\f(CWcontroller_base_class\fP"
.IX Subsection "controller_base_class"
.Vb 2
\&  my $base = $r\->controller_base_class;
\&  $r       = $r\->controller_base_class(\*(AqMojolicious::Controller\*(Aq);
.Ve
.PP
Base class used to identify controllers, defaults to
Mojolicious::Controller.
.ie n .SS """dictionary"""
.el .SS "\f(CWdictionary\fP"
.IX Subsection "dictionary"
.Vb 2
\&  my $dictionary = $r\->dictionary;
\&  $r             = $r\->dictionary({foo => sub {...}});
.Ve
.PP
Contains all available conditions for this route.
.ie n .SS """hidden"""
.el .SS "\f(CWhidden\fP"
.IX Subsection "hidden"
.Vb 2
\&  my $hidden = $r\->hidden;
\&  $r         = $r\->hidden([qw/new attr tx render req res stash/]);
.Ve
.PP
Controller methods and attributes that are hidden from routes.
.ie n .SS """inline"""
.el .SS "\f(CWinline\fP"
.IX Subsection "inline"
.Vb 2
\&  my $inline = $r\->inline;
\&  $r         = $r\->inline(1);
.Ve
.PP
Allow \f(CW\*(C`bridge\*(C'\fR semantics for this route.
.ie n .SS """namespace"""
.el .SS "\f(CWnamespace\fP"
.IX Subsection "namespace"
.Vb 2
\&  my $namespace = $r\->namespace;
\&  $r            = $r\->namespace(\*(AqFoo::Bar::Controller\*(Aq);
.Ve
.PP
Namespace used by \f(CW\*(C`dispatch\*(C'\fR to search for controllers.
.ie n .SS """parent"""
.el .SS "\f(CWparent\fP"
.IX Subsection "parent"
.Vb 2
\&  my $parent = $r\->parent;
\&  $r         = $r\->parent(Mojolicious::Routes\->new);
.Ve
.PP
The parent of this route, used for nesting routes.
.ie n .SS """partial"""
.el .SS "\f(CWpartial\fP"
.IX Subsection "partial"
.Vb 2
\&  my $partial = $r\->partial;
\&  $r          = $r\->partial(1);
.Ve
.PP
Route has no specific end, remaining characters will be captured in \f(CW\*(C`path\*(C'\fR.
.ie n .SS """pattern"""
.el .SS "\f(CWpattern\fP"
.IX Subsection "pattern"
.Vb 2
\&  my $pattern = $r\->pattern;
\&  $r          = $r\->pattern(Mojolicious::Routes::Pattern\->new);
.Ve
.PP
Pattern for this route, defaults to a Mojolicious::Routes::Pattern object.
.ie n .SS """shortcuts"""
.el .SS "\f(CWshortcuts\fP"
.IX Subsection "shortcuts"
.Vb 2
\&  my $shortcuts = $r\->shortcuts;
\&  $r            = $r\->shortcuts({foo => sub {...}});
.Ve
.PP
Contains all additional route shortcuts available for this route.
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Routes inherits all methods from Mojo::Base and implements
the following ones.
.ie n .SS """new"""
.el .SS "\f(CWnew\fP"
.IX Subsection "new"
.Vb 2
\&  my $r = Mojolicious::Routes\->new;
\&  my $r = Mojolicious::Routes\->new(\*(Aq/:controller/:action\*(Aq);
.Ve
.PP
Construct a new route object.
.ie n .SS """add_child"""
.el .SS "\f(CWadd_child\fP"
.IX Subsection "add_child"
.Vb 1
\&  $r = $r\->add_child(Mojolicious::Route\->new);
.Ve
.PP
Add a new child to this route.
.ie n .SS """add_condition"""
.el .SS "\f(CWadd_condition\fP"
.IX Subsection "add_condition"
.Vb 1
\&  $r = $r\->add_condition(foo => sub {...});
.Ve
.PP
Add a new condition for this route.
.ie n .SS """add_shortcut"""
.el .SS "\f(CWadd_shortcut\fP"
.IX Subsection "add_shortcut"
.Vb 1
\&  $r = $r\->add_shortcut(foo => sub {...});
.Ve
.PP
Add a new shortcut for this route.
.ie n .SS """any"""
.el .SS "\f(CWany\fP"
.IX Subsection "any"
.Vb 2
\&  my $route = $route\->any(\*(Aq/:foo\*(Aq => sub {...});
\&  my $route = $route\->any([qw/get post/] => \*(Aq/:foo\*(Aq => sub {...});
.Ve
.PP
Generate route matching any of the listed \s-1HTTP\s0 request methods or all. See
also the Mojolicious::Lite tutorial for more argument variations.
.ie n .SS """auto_render"""
.el .SS "\f(CWauto_render\fP"
.IX Subsection "auto_render"
.Vb 1
\&  $r\->auto_render(Mojolicious::Controller\->new);
.Ve
.PP
Automatic rendering.
.ie n .SS """bridge"""
.el .SS "\f(CWbridge\fP"
.IX Subsection "bridge"
.Vb 2
\&  my $bridge = $r\->bridge;
\&  my $bridge = $r\->bridge(\*(Aq/:controller/:action\*(Aq);
.Ve
.PP
Add a new bridge to this route as a nested child.
.ie n .SS """delete"""
.el .SS "\f(CWdelete\fP"
.IX Subsection "delete"
.Vb 1
\&  my $route = $route\->delete(\*(Aq/:foo\*(Aq => sub {...});
.Ve
.PP
Generate route matching only \f(CW\*(C`DELETE\*(C'\fR requests. See also the
Mojolicious::Lite tutorial for more argument variations.
.ie n .SS """detour"""
.el .SS "\f(CWdetour\fP"
.IX Subsection "detour"
.Vb 11
\&  $r = $r\->detour(action => \*(Aqfoo\*(Aq);
\&  $r = $r\->detour({action => \*(Aqfoo\*(Aq});
\&  $r = $r\->detour(\*(Aqcontroller#action\*(Aq);
\&  $r = $r\->detour(\*(Aqcontroller#action\*(Aq, foo => \*(Aqbar\*(Aq);
\&  $r = $r\->detour(\*(Aqcontroller#action\*(Aq, {foo => \*(Aqbar\*(Aq});
\&  $r = $r\->detour($app);
\&  $r = $r\->detour($app, foo => \*(Aqbar\*(Aq);
\&  $r = $r\->detour($app, {foo => \*(Aqbar\*(Aq});
\&  $r = $r\->detour(\*(AqMyApp\*(Aq);
\&  $r = $r\->detour(\*(AqMyApp\*(Aq, foo => \*(Aqbar\*(Aq);
\&  $r = $r\->detour(\*(AqMyApp\*(Aq, {foo => \*(Aqbar\*(Aq});
.Ve
.PP
Set default parameters for this route and allow partial matching to simplify
application embedding.
.ie n .SS """dispatch"""
.el .SS "\f(CWdispatch\fP"
.IX Subsection "dispatch"
.Vb 1
\&  my $success = $r\->dispatch(Mojolicious::Controller\->new);
.Ve
.PP
Match routes and dispatch.
.ie n .SS """get"""
.el .SS "\f(CWget\fP"
.IX Subsection "get"
.Vb 1
\&  my $route = $route\->get(\*(Aq/:foo\*(Aq => sub {...});
.Ve
.PP
Generate route matching only \f(CW\*(C`GET\*(C'\fR requests. See also the
Mojolicious::Lite tutorial for more argument variations.
.ie n .SS """has_conditions"""
.el .SS "\f(CWhas_conditions\fP"
.IX Subsection "has_conditions"
.Vb 1
\&  my $success = $r\->has_conditions;
.Ve
.PP
Returns true if this route contains conditions. Note that this method is
\&\s-1EXPERIMENTAL\s0 and might change without warning!
.ie n .SS """has_custom_name"""
.el .SS "\f(CWhas_custom_name\fP"
.IX Subsection "has_custom_name"
.Vb 1
\&  my $success = $r\->has_custom_name;
.Ve
.PP
Returns true if this route has a custom user defined name. Note that this
method is \s-1EXPERIMENTAL\s0 and might change without warning!
.ie n .SS """has_websocket"""
.el .SS "\f(CWhas_websocket\fP"
.IX Subsection "has_websocket"
.Vb 1
\&  my $success = $r\->has_websocket;
.Ve
.PP
Returns true if this route has a WebSocket ancestor. Note that this method is
\&\s-1EXPERIMENTAL\s0 and might change without warning!
.ie n .SS """hide"""
.el .SS "\f(CWhide\fP"
.IX Subsection "hide"
.Vb 1
\&  $r = $r\->hide(\*(Aqnew\*(Aq);
.Ve
.PP
Hide controller method or attribute from routes.
.ie n .SS """is_endpoint"""
.el .SS "\f(CWis_endpoint\fP"
.IX Subsection "is_endpoint"
.Vb 1
\&  my $success = $r\->is_endpoint;
.Ve
.PP
Returns true if this route qualifies as an endpoint.
.ie n .SS """is_websocket"""
.el .SS "\f(CWis_websocket\fP"
.IX Subsection "is_websocket"
.Vb 1
\&  my $success = $r\->is_websocket;
.Ve
.PP
Returns true if this route is a WebSocket. Note that this method is
\&\s-1EXPERIMENTAL\s0 and might change without warning!
.ie n .SS """name"""
.el .SS "\f(CWname\fP"
.IX Subsection "name"
.Vb 2
\&  my $name = $r\->name;
\&  $r       = $r\->name(\*(Aqfoo\*(Aq);
.Ve
.PP
The name of this route, defaults to an automatically generated name based on
the route pattern. Note that the name \f(CW\*(C`current\*(C'\fR is reserved for refering to
the current route.
.ie n .SS """over"""
.el .SS "\f(CWover\fP"
.IX Subsection "over"
.Vb 1
\&  $r = $r\->over(foo => qr/\ew+/);
.Ve
.PP
Apply condition parameters to this route and disable routing cache.
.ie n .SS """parse"""
.el .SS "\f(CWparse\fP"
.IX Subsection "parse"
.Vb 1
\&  $r = $r\->parse(\*(Aq/:controller/:action\*(Aq);
.Ve
.PP
Parse a pattern.
.ie n .SS """patch"""
.el .SS "\f(CWpatch\fP"
.IX Subsection "patch"
.Vb 1
\&  my $route = $route\->patch(\*(Aq/:foo\*(Aq => sub {...});
.Ve
.PP
Generate route matching only \f(CW\*(C`PATCH\*(C'\fR requests. See also the
Mojolicious::Lite tutorial for more argument variations.
.ie n .SS """post"""
.el .SS "\f(CWpost\fP"
.IX Subsection "post"
.Vb 1
\&  my $route = $route\->post(\*(Aq/:foo\*(Aq => sub {...});
.Ve
.PP
Generate route matching only \f(CW\*(C`POST\*(C'\fR requests. See also the
Mojolicious::Lite tutorial for more argument variations.
.ie n .SS """put"""
.el .SS "\f(CWput\fP"
.IX Subsection "put"
.Vb 1
\&  my $route = $route\->put(\*(Aq/:foo\*(Aq => sub {...});
.Ve
.PP
Generate route matching only \f(CW\*(C`PUT\*(C'\fR requests. See also the
Mojolicious::Lite tutorial for more argument variations.
.ie n .SS """render"""
.el .SS "\f(CWrender\fP"
.IX Subsection "render"
.Vb 2
\&  my $path = $r\->render($path);
\&  my $path = $r\->render($path, {foo => \*(Aqbar\*(Aq});
.Ve
.PP
Render route with parameters into a path.
.ie n .SS """route"""
.el .SS "\f(CWroute\fP"
.IX Subsection "route"
.Vb 1
\&  my $route = $r\->route(\*(Aq/:c/:a\*(Aq, a => qr/\ew+/);
.Ve
.PP
Add a new nested child to this route.
.ie n .SS """to"""
.el .SS "\f(CWto\fP"
.IX Subsection "to"
.Vb 12
\&  my $to  = $r\->to;
\&  $r = $r\->to(action => \*(Aqfoo\*(Aq);
\&  $r = $r\->to({action => \*(Aqfoo\*(Aq});
\&  $r = $r\->to(\*(Aqcontroller#action\*(Aq);
\&  $r = $r\->to(\*(Aqcontroller#action\*(Aq, foo => \*(Aqbar\*(Aq);
\&  $r = $r\->to(\*(Aqcontroller#action\*(Aq, {foo => \*(Aqbar\*(Aq});
\&  $r = $r\->to($app);
\&  $r = $r\->to($app, foo => \*(Aqbar\*(Aq);
\&  $r = $r\->to($app, {foo => \*(Aqbar\*(Aq});
\&  $r = $r\->to(\*(AqMyApp\*(Aq);
\&  $r = $r\->to(\*(AqMyApp\*(Aq, foo => \*(Aqbar\*(Aq);
\&  $r = $r\->to(\*(AqMyApp\*(Aq, {foo => \*(Aqbar\*(Aq});
.Ve
.PP
Set default parameters for this route.
.ie n .SS """to_string"""
.el .SS "\f(CWto_string\fP"
.IX Subsection "to_string"
.Vb 1
\&  my $string = $r\->to_string;
.Ve
.PP
Stringifies the whole route.
.ie n .SS """under"""
.el .SS "\f(CWunder\fP"
.IX Subsection "under"
.Vb 2
\&  my $route = $r\->under(sub {...});
\&  my $route = $r\->under(\*(Aq/:foo\*(Aq);
.Ve
.PP
Generate bridges. See also the Mojolicious::Lite tutorial for more
argument variations.
.ie n .SS """via"""
.el .SS "\f(CWvia\fP"
.IX Subsection "via"
.Vb 4
\&  my $methods = $r\->via;
\&  $r          = $r\->via(\*(AqGET\*(Aq);
\&  $r          = $r\->via(qw/GET POST/);
\&  $r          = $r\->via([qw/GET POST/]);
.Ve
.PP
Restrict \s-1HTTP\s0 methods this route is allowed to handle, defaults to no
restrictions.
.ie n .SS """waypoint"""
.el .SS "\f(CWwaypoint\fP"
.IX Subsection "waypoint"
.Vb 1
\&  my $r = $r\->waypoint(\*(Aq/:c/:a\*(Aq, a => qr/\ew+/);
.Ve
.PP
Add a waypoint to this route as nested child.
.ie n .SS """websocket"""
.el .SS "\f(CWwebsocket\fP"
.IX Subsection "websocket"
.Vb 1
\&  my $websocket = $r\->websocket(\*(Aq/:foo\*(Aq => sub {...});
.Ve
.PP
Generate route matching only \f(CW\*(C`WebSocket\*(C'\fR handshakes. See also the
Mojolicious::Lite tutorial for more argument variations. Note that this
method is \s-1EXPERIMENTAL\s0 and might change without warning!
.SH "SHORTCUTS"
.IX Header "SHORTCUTS"
In addition to the attributes and methods above you can also call shortcuts
on Mojolicious::Routes objects.
.PP
.Vb 4
\&  $r\->add_shortcut(firefox => sub {
\&    my ($r, $path) = @_;
\&    $r\->get($path, agent => qr/Firefox/);
\&  });
\&
\&  $r\->firefox(\*(Aq/welcome\*(Aq)\->to(\*(Aqfirefox#welcome\*(Aq);
\&  $r\->firefox(\*(Aq/bye\*(Aq)\->to(\*(Aqfirefox#bye);
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, <http://mojolicio.us>.
