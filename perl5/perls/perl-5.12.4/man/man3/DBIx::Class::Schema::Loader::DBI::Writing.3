.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Schema::Loader::DBI::Writing 3"
.TH DBIx::Class::Schema::Loader::DBI::Writing 3 "2012-02-07" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::Schema::Loader::DBI::Writing \- Loader subclass writing guide for DBI
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  package DBIx::Class::Schema::Loader::DBI::Foo;
\&
\&  # THIS IS JUST A TEMPLATE TO GET YOU STARTED.
\&
\&  use strict;
\&  use warnings;
\&  use base \*(AqDBIx::Class::Schema::Loader::DBI\*(Aq;
\&  use mro \*(Aqc3\*(Aq;
\&
\&  sub _table_uniq_info {
\&      my ($self, $table) = @_;
\&
\&      # ... get UNIQUE info for $table somehow
\&      # and return a data structure that looks like this:
\&
\&      return [
\&         [ \*(Aqkeyname\*(Aq => [ \*(Aqcolname\*(Aq ] ],
\&         [ \*(Aqkeyname2\*(Aq => [ \*(Aqcol1name\*(Aq, \*(Aqcol2name\*(Aq ] ],
\&         [ \*(Aqkeyname3\*(Aq => [ \*(Aqcolname\*(Aq ] ],
\&      ];
\&
\&      # Where the "keyname"\*(Aqs are just unique identifiers, such as the
\&      # name of the unique constraint, or the names of the columns involved
\&      # concatenated if you wish.
\&  }
\&
\&  sub _table_comment {
\&      my ( $self, $table ) = @_;
\&      return \*(AqComment\*(Aq;
\&  }
\&
\&  sub _column_comment {
\&      my ( $self, $table, $column_number ) = @_;
\&      return \*(AqCol. comment\*(Aq;
\&  }
\&
\&  1;
.Ve
.SH "DETAILS"
.IX Header "DETAILS"
The only required method for new subclasses is \f(CW\*(C`_table_uniq_info\*(C'\fR,
as there is not (yet) any standardized, DBD-agnostic way for obtaining
this information from \s-1DBI\s0.
.PP
The base \s-1DBI\s0 Loader contains generic methods that *should* work for
everything else in theory, although in practice some DBDs need to
override one or more of the other methods.  The other methods one might
likely want to override are: \f(CW\*(C`_table_pk_info\*(C'\fR, \f(CW\*(C`_table_fk_info\*(C'\fR,
\&\f(CW\*(C`_tables_list\*(C'\fR and \f(CW\*(C`_extra_column_info\*(C'\fR.  See the included \s-1DBD\s0 drivers
for examples of these.
.PP
To import comments from the database you need to implement \f(CW\*(C`_table_comment\*(C'\fR,
\&\f(CW\*(C`_column_comment\*(C'\fR
.SH "AUTHOR"
.IX Header "AUTHOR"
See \*(L"\s-1AUTHOR\s0\*(R" in DBIx::Class::Schema::Loader and \*(L"\s-1CONTRIBUTORS\s0\*(R" in DBIx::Class::Schema::Loader.
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.
