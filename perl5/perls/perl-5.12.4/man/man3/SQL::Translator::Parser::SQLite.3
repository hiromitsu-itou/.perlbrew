.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SQL::Translator::Parser::SQLite 3"
.TH SQL::Translator::Parser::SQLite 3 "2011-05-05" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SQL::Translator::Parser::SQLite \- parser for SQLite
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use SQL::Translator;
\&  use SQL::Translator::Parser::SQLite;
\&
\&  my $translator = SQL::Translator\->new;
\&  $translator\->parser("SQL::Translator::Parser::SQLite");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a grammar for parsing \s-1CREATE\s0 statements for SQLite as 
described here:
.PP
.Vb 1
\&    http://www.sqlite.org/lang.html
.Ve
.PP
\&\s-1CREATE\s0 \s-1INDEX\s0
.PP
sql-statement ::=
    \s-1CREATE\s0 [\s-1TEMP\s0 | \s-1TEMPORARY\s0] [\s-1UNIQUE\s0] \s-1INDEX\s0 index-name 
     \s-1ON\s0 [database\-name .] table-name ( column-name [, column\-name]* )
     [ \s-1ON\s0 \s-1CONFLICT\s0 conflict-algorithm ]
.PP
column-name ::=
    name [ \s-1ASC\s0 | \s-1DESC\s0 ]
.PP
\&\s-1CREATE\s0 \s-1TABLE\s0
.PP
sql-command ::=
    \s-1CREATE\s0 [\s-1TEMP\s0 | \s-1TEMPORARY\s0] \s-1TABLE\s0 table-name (
        column-def [, column\-def]*
        [, constraint]*
     )
.PP
sql-command ::=
    \s-1CREATE\s0 [\s-1TEMP\s0 | \s-1TEMPORARY\s0] \s-1TABLE\s0 table-name \s-1AS\s0 select-statement
.PP
column-def ::=
    name [type] [[\s-1CONSTRAINT\s0 name] column\-constraint]*
.PP
type ::=
    typename |
     typename ( number ) |
     typename ( number , number )
.PP
column-constraint ::=
    \s-1NOT\s0 \s-1NULL\s0 [ conflict-clause ] |
    \s-1PRIMARY\s0 \s-1KEY\s0 [sort\-order] [ conflict-clause ] |
    \s-1UNIQUE\s0 [ conflict-clause ] |
    \s-1CHECK\s0 ( expr ) [ conflict-clause ] |
    \s-1DEFAULT\s0 value
.PP
constraint ::=
    \s-1PRIMARY\s0 \s-1KEY\s0 ( name [, name]* ) [ conflict-clause ]|
    \s-1UNIQUE\s0 ( name [, name]* ) [ conflict-clause ] |
    \s-1CHECK\s0 ( expr ) [ conflict-clause ]
.PP
conflict-clause ::=
    \s-1ON\s0 \s-1CONFLICT\s0 conflict-algorithm
.PP
\&\s-1CREATE\s0 \s-1TRIGGER\s0
.PP
sql-statement ::=
    \s-1CREATE\s0 [\s-1TEMP\s0 | \s-1TEMPORARY\s0] \s-1TRIGGER\s0 trigger-name [ \s-1BEFORE\s0 | \s-1AFTER\s0 ]
    database-event \s-1ON\s0 [database\-name .] table-name
    trigger-action
.PP
sql-statement ::=
    \s-1CREATE\s0 [\s-1TEMP\s0 | \s-1TEMPORARY\s0] \s-1TRIGGER\s0 trigger-name \s-1INSTEAD\s0 \s-1OF\s0
    database-event \s-1ON\s0 [database\-name .] view-name
    trigger-action
.PP
database-event ::=
    \s-1DELETE\s0 | 
    \s-1INSERT\s0 | 
    \s-1UPDATE\s0 | 
    \s-1UPDATE\s0 \s-1OF\s0 column-list
.PP
trigger-action ::=
    [ \s-1FOR\s0 \s-1EACH\s0 \s-1ROW\s0 | \s-1FOR\s0 \s-1EACH\s0 \s-1STATEMENT\s0 ] [ \s-1WHEN\s0 expression ] 
        \s-1BEGIN\s0 
            trigger-step ; [ trigger-step ; ]*
        \s-1END\s0
.PP
trigger-step ::=
    update-statement | insert-statement | 
    delete-statement | select-statement
.PP
\&\s-1CREATE\s0 \s-1VIEW\s0
.PP
sql-command ::=
    \s-1CREATE\s0 [\s-1TEMP\s0 | \s-1TEMPORARY\s0] \s-1VIEW\s0 view-name \s-1AS\s0 select-statement
.PP
\&\s-1ON\s0 \s-1CONFLICT\s0 clause
.PP
.Vb 2
\&    conflict\-clause ::=
\&    ON CONFLICT conflict\-algorithm
\&
\&    conflict\-algorithm ::=
\&    ROLLBACK | ABORT | FAIL | IGNORE | REPLACE
.Ve
.PP
expression
.PP
expr ::=
    expr binary-op expr |
    expr like-op expr |
    unary-op expr |
    ( expr ) |
    column-name |
    table-name . column-name |
    database-name . table-name . column-name |
    literal-value |
    function-name ( expr-list | * ) |
    expr (+) |
    expr \s-1ISNULL\s0 |
    expr \s-1NOTNULL\s0 |
    expr [\s-1NOT\s0] \s-1BETWEEN\s0 expr \s-1AND\s0 expr |
    expr [\s-1NOT\s0] \s-1IN\s0 ( value-list ) |
    expr [\s-1NOT\s0] \s-1IN\s0 ( select-statement ) |
    ( select-statement ) |
    \s-1CASE\s0 [expr] ( \s-1WHEN\s0 expr \s-1THEN\s0 expr )+ [\s-1ELSE\s0 expr] \s-1END\s0
.PP
like\-op::=
    \s-1LIKE\s0 | \s-1GLOB\s0 | \s-1NOT\s0 \s-1LIKE\s0 | \s-1NOT\s0 \s-1GLOB\s0
.SH "AUTHOR"
.IX Header "AUTHOR"
Ken Youens-Clark <kclark@cpan.org>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), Parse::RecDescent, SQL::Translator::Schema.
