.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojo::DOM::CSS 3"
.TH Mojo::DOM::CSS 3 "2012-02-12" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojo::DOM::CSS \- CSS3 selector engine
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Mojo::DOM::CSS;
\&
\&  # Select elements from DOM tree
\&  my $css = Mojo::DOM::CSS\->new(tree => $tree);
\&  my $elements = $css\->select(\*(Aqh1, h2, h3\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojo::DOM::CSS is the \s-1CSS3\s0 selector engine used by Mojo::DOM. Note that
this module is \s-1EXPERIMENTAL\s0 and might change without warning!
.SH "SELECTORS"
.IX Header "SELECTORS"
All \s-1CSS3\s0 selectors that make sense for a standalone parser are supported.
.ie n .SS """*"""
.el .SS "\f(CW*\fP"
.IX Subsection "*"
Any element.
.PP
.Vb 1
\&  my $all = $css\->select(\*(Aq*\*(Aq);
.Ve
.ie n .SS """E"""
.el .SS "\f(CWE\fP"
.IX Subsection "E"
An element of type \f(CW\*(C`E\*(C'\fR.
.PP
.Vb 1
\&  my $title = $css\->select(\*(Aqtitle\*(Aq);
.Ve
.ie n .SS """E[foo]"""
.el .SS "\f(CWE[foo]\fP"
.IX Subsection "E[foo]"
An \f(CW\*(C`E\*(C'\fR element with a \f(CW\*(C`foo\*(C'\fR attribute.
.PP
.Vb 1
\&  my $links = $css\->select(\*(Aqa[href]\*(Aq);
.Ve
.ie n .SS """E[foo=""bar""]"""
.el .SS "\f(CWE[foo=``bar'']\fP"
.IX Subsection "E[foo=""bar""]"
An \f(CW\*(C`E\*(C'\fR element whose \f(CW\*(C`foo\*(C'\fR attribute value is exactly equal to \f(CW\*(C`bar\*(C'\fR.
.PP
.Vb 1
\&  my $fields = $css\->select(\*(Aqinput[name="foo"]\*(Aq);
.Ve
.ie n .SS """E[foo~=""bar""]"""
.el .SS "\f(CWE[foo~=``bar'']\fP"
.IX Subsection "E[foo~=""bar""]"
An \f(CW\*(C`E\*(C'\fR element whose \f(CW\*(C`foo\*(C'\fR attribute value is a list of
whitespace-separated values, one of which is exactly equal to \f(CW\*(C`bar\*(C'\fR.
.PP
.Vb 1
\&  my $fields = $css\->select(\*(Aqinput[name~="foo"]\*(Aq);
.Ve
.ie n .SS """E[foo^=""bar""]"""
.el .SS "\f(CWE[foo^=``bar'']\fP"
.IX Subsection "E[foo^=""bar""]"
An \f(CW\*(C`E\*(C'\fR element whose \f(CW\*(C`foo\*(C'\fR attribute value begins exactly with the string
\&\f(CW\*(C`bar\*(C'\fR.
.PP
.Vb 1
\&  my $fields = $css\->select(\*(Aqinput[name^="f"]\*(Aq);
.Ve
.ie n .SS """E[foo$=""bar""]"""
.el .SS "\f(CWE[foo$=``bar'']\fP"
.IX Subsection "E[foo$=""bar""]"
An \f(CW\*(C`E\*(C'\fR element whose \f(CW\*(C`foo\*(C'\fR attribute value ends exactly with the string
\&\f(CW\*(C`bar\*(C'\fR.
.PP
.Vb 1
\&  my $fields = $css\->select(\*(Aqinput[name$="o"]\*(Aq);
.Ve
.ie n .SS """E[foo*=""bar""]"""
.el .SS "\f(CWE[foo*=``bar'']\fP"
.IX Subsection "E[foo*=""bar""]"
An \f(CW\*(C`E\*(C'\fR element whose \f(CW\*(C`foo\*(C'\fR attribute value contains the substring \f(CW\*(C`bar\*(C'\fR.
.PP
.Vb 1
\&  my $fields = $css\->select(\*(Aqinput[name*="fo"]\*(Aq);
.Ve
.ie n .SS """E:root"""
.el .SS "\f(CWE:root\fP"
.IX Subsection "E:root"
An \f(CW\*(C`E\*(C'\fR element, root of the document.
.PP
.Vb 1
\&  my $root = $css\->select(\*(Aq:root\*(Aq);
.Ve
.ie n .SS """E:checked"""
.el .SS "\f(CWE:checked\fP"
.IX Subsection "E:checked"
A user interface element \f(CW\*(C`E\*(C'\fR which is checked (for instance a radio-button
or checkbox).
.PP
.Vb 1
\&  my $input = $css\->select(\*(Aq:checked\*(Aq);
.Ve
.ie n .SS """E:empty"""
.el .SS "\f(CWE:empty\fP"
.IX Subsection "E:empty"
An \f(CW\*(C`E\*(C'\fR element that has no children (including text nodes).
.PP
.Vb 1
\&  my $empty = $css\->select(\*(Aq:empty\*(Aq);
.Ve
.ie n .SS """E:nth\-child(n)"""
.el .SS "\f(CWE:nth\-child(n)\fP"
.IX Subsection "E:nth-child(n)"
An \f(CW\*(C`E\*(C'\fR element, the \f(CW\*(C`n\-th\*(C'\fR child of its parent.
.PP
.Vb 4
\&  my $third = $css\->select(\*(Aqdiv:nth\-child(3)\*(Aq);
\&  my $odd   = $css\->select(\*(Aqdiv:nth\-child(odd)\*(Aq);
\&  my $even  = $css\->select(\*(Aqdiv:nth\-child(even)\*(Aq);
\&  my $top3  = $css\->select(\*(Aqdiv:nth\-child(\-n+3)\*(Aq);
.Ve
.ie n .SS """E:nth\-last\-child(n)"""
.el .SS "\f(CWE:nth\-last\-child(n)\fP"
.IX Subsection "E:nth-last-child(n)"
An \f(CW\*(C`E\*(C'\fR element, the \f(CW\*(C`n\-th\*(C'\fR child of its parent, counting from the last one.
.PP
.Vb 4
\&  my $third    = $css\->select(\*(Aqdiv:nth\-last\-child(3)\*(Aq);
\&  my $odd      = $css\->select(\*(Aqdiv:nth\-last\-child(odd)\*(Aq);
\&  my $even     = $css\->select(\*(Aqdiv:nth\-last\-child(even)\*(Aq);
\&  my $bottom3  = $css\->select(\*(Aqdiv:nth\-last\-child(\-n+3)\*(Aq);
.Ve
.ie n .SS """E:nth\-of\-type(n)"""
.el .SS "\f(CWE:nth\-of\-type(n)\fP"
.IX Subsection "E:nth-of-type(n)"
An \f(CW\*(C`E\*(C'\fR element, the \f(CW\*(C`n\-th\*(C'\fR sibling of its type.
.PP
.Vb 4
\&  my $third = $css\->select(\*(Aqdiv:nth\-of\-type(3)\*(Aq);
\&  my $odd   = $css\->select(\*(Aqdiv:nth\-of\-type(odd)\*(Aq);
\&  my $even  = $css\->select(\*(Aqdiv:nth\-of\-type(even)\*(Aq);
\&  my $top3  = $css\->select(\*(Aqdiv:nth\-of\-type(\-n+3)\*(Aq);
.Ve
.ie n .SS """E:nth\-last\-of\-type(n)"""
.el .SS "\f(CWE:nth\-last\-of\-type(n)\fP"
.IX Subsection "E:nth-last-of-type(n)"
An \f(CW\*(C`E\*(C'\fR element, the \f(CW\*(C`n\-th\*(C'\fR sibling of its type, counting from the last one.
.PP
.Vb 4
\&  my $third    = $css\->select(\*(Aqdiv:nth\-last\-of\-type(3)\*(Aq);
\&  my $odd      = $css\->select(\*(Aqdiv:nth\-last\-of\-type(odd)\*(Aq);
\&  my $even     = $css\->select(\*(Aqdiv:nth\-last\-of\-type(even)\*(Aq);
\&  my $bottom3  = $css\->select(\*(Aqdiv:nth\-last\-of\-type(\-n+3)\*(Aq);
.Ve
.ie n .SS """E:first\-child"""
.el .SS "\f(CWE:first\-child\fP"
.IX Subsection "E:first-child"
An \f(CW\*(C`E\*(C'\fR element, first child of its parent.
.PP
.Vb 1
\&  my $first = $css\->select(\*(Aqdiv p:first\-child\*(Aq);
.Ve
.ie n .SS """E:last\-child"""
.el .SS "\f(CWE:last\-child\fP"
.IX Subsection "E:last-child"
An \f(CW\*(C`E\*(C'\fR element, last child of its parent.
.PP
.Vb 1
\&  my $last = $css\->select(\*(Aqdiv p:last\-child\*(Aq);
.Ve
.ie n .SS """E:first\-of\-type"""
.el .SS "\f(CWE:first\-of\-type\fP"
.IX Subsection "E:first-of-type"
An \f(CW\*(C`E\*(C'\fR element, first sibling of its type.
.PP
.Vb 1
\&  my $first = $css\->select(\*(Aqdiv p:first\-of\-type\*(Aq);
.Ve
.ie n .SS """E:last\-of\-type"""
.el .SS "\f(CWE:last\-of\-type\fP"
.IX Subsection "E:last-of-type"
An \f(CW\*(C`E\*(C'\fR element, last sibling of its type.
.PP
.Vb 1
\&  my $last = $css\->select(\*(Aqdiv p:last\-of\-type\*(Aq);
.Ve
.ie n .SS """E:only\-child"""
.el .SS "\f(CWE:only\-child\fP"
.IX Subsection "E:only-child"
An \f(CW\*(C`E\*(C'\fR element, only child of its parent.
.PP
.Vb 1
\&  my $lonely = $css\->select(\*(Aqdiv p:only\-child\*(Aq);
.Ve
.ie n .SS """E:only\-of\-type"""
.el .SS "\f(CWE:only\-of\-type\fP"
.IX Subsection "E:only-of-type"
An \f(CW\*(C`E\*(C'\fR element, only sibling of its type.
.PP
.Vb 1
\&  my $lonely = $css\->select(\*(Aqdiv p:only\-of\-type\*(Aq);
.Ve
.ie n .SS """E.warning"""
.el .SS "\f(CWE.warning\fP"
.IX Subsection "E.warning"
.Vb 1
\&  my $warning = $css\->select(\*(Aqdiv.warning\*(Aq);
.Ve
.PP
An \f(CW\*(C`E\*(C'\fR element whose class is \*(L"warning\*(R".
.ie n .SS """E#myid"""
.el .SS "\f(CWE#myid\fP"
.IX Subsection "E#myid"
.Vb 1
\&  my $foo = $css\->select(\*(Aqdiv#foo\*(Aq);
.Ve
.PP
An \f(CW\*(C`E\*(C'\fR element with \f(CW\*(C`ID\*(C'\fR equal to \*(L"myid\*(R".
.ie n .SS "E:not(s)"
.el .SS "\f(CWE:not(s)\fP"
.IX Subsection "E:not(s)"
An \f(CW\*(C`E\*(C'\fR element that does not match simple selector \f(CW\*(C`s\*(C'\fR.
.PP
.Vb 1
\&  my $others = $css\->select(\*(Aqdiv p:not(:first\-child)\*(Aq);
.Ve
.ie n .SS """E F"""
.el .SS "\f(CWE F\fP"
.IX Subsection "E F"
An \f(CW\*(C`F\*(C'\fR element descendant of an \f(CW\*(C`E\*(C'\fR element.
.PP
.Vb 1
\&  my $headlines = $css\->select(\*(Aqdiv h1\*(Aq);
.Ve
.ie n .SS """E > F"""
.el .SS "\f(CWE > F\fP"
.IX Subsection "E > F"
An \f(CW\*(C`F\*(C'\fR element child of an \f(CW\*(C`E\*(C'\fR element.
.PP
.Vb 1
\&  my $headlines = $css\->select(\*(Aqhtml > body > div > h1\*(Aq);
.Ve
.ie n .SS """E + F"""
.el .SS "\f(CWE + F\fP"
.IX Subsection "E + F"
An \f(CW\*(C`F\*(C'\fR element immediately preceded by an \f(CW\*(C`E\*(C'\fR element.
.PP
.Vb 1
\&  my $second = $css\->select(\*(Aqh1 + h2\*(Aq);
.Ve
.ie n .SS """E ~ F"""
.el .SS "\f(CWE ~ F\fP"
.IX Subsection "E ~ F"
An \f(CW\*(C`F\*(C'\fR element preceded by an \f(CW\*(C`E\*(C'\fR element.
.PP
.Vb 1
\&  my $second = $css\->select(\*(Aqh1 ~ h2\*(Aq);
.Ve
.ie n .SS """E, F, G"""
.el .SS "\f(CWE, F, G\fP"
.IX Subsection "E, F, G"
Elements of type \f(CW\*(C`E\*(C'\fR, \f(CW\*(C`F\*(C'\fR and \f(CW\*(C`G\*(C'\fR.
.PP
.Vb 1
\&  my $headlines = $css\->select(\*(Aqh1, h2, h3\*(Aq);
.Ve
.ie n .SS """E[foo=bar][bar=baz]"""
.el .SS "\f(CWE[foo=bar][bar=baz]\fP"
.IX Subsection "E[foo=bar][bar=baz]"
An \f(CW\*(C`E\*(C'\fR element whose attributes match all following attribute selectors.
.PP
.Vb 1
\&  my $links = $css\->select(\*(Aqa[foo^="b"][foo$="ar"]\*(Aq);
.Ve
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojo::DOM::CSS implements the following attributes.
.ie n .SS """tree"""
.el .SS "\f(CWtree\fP"
.IX Subsection "tree"
.Vb 2
\&  my $tree = $css\->tree;
\&  $css     = $css\->tree([\*(Aqroot\*(Aq, [\*(Aqtext\*(Aq, \*(Aqlalala\*(Aq]]);
.Ve
.PP
Document Object Model.
.SH "METHODS"
.IX Header "METHODS"
Mojo::DOM::CSS inherits all methods from Mojo::Base and implements the
following new ones.
.ie n .SS """select"""
.el .SS "\f(CWselect\fP"
.IX Subsection "select"
.Vb 1
\&  my $results = $css\->select(\*(Aqhead > title\*(Aq);
.Ve
.PP
Run \s-1CSS3\s0 selector against \f(CW\*(C`tree\*(C'\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, <http://mojolicio.us>.
