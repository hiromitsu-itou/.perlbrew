.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTTP::MobileAgent 3"
.TH HTTP::MobileAgent 3 "2012-01-10" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTTP::MobileAgent \- HTTP mobile user agent string parser
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use HTTP::MobileAgent;
\&
\&  # from PSGI $env hash:
\&  my $agent = HTTP::MobileAgent\->new( $env );
\&
\&  # from %ENV (CGI mode):
\&  my $agent = HTTP::MobileAgent\->new();
\&
\&  # from Apache (mod_perl 1.x):
\&  my $agent = HTTP::MobileAgent\->new(Apache\->request);
\&
\&  # from a HTTP::Headers / HTTP::Request object:
\&  my $agent = HTTP::MobileAgent\->new( HTTP::Headers\->new( ... ) );
\&  my $agent = HTTP::MobileAgent\->new( HTTP::Request\->new( ... ) );
\&
\&  # from a raw user agent string:
\&  my $agent = HTTP::MobileAgent\->new($agent_string);
\&
\&  if ($agent\->is_docomo) {
\&      # or if ($agent\->name eq \*(AqDoCoMo\*(Aq)
\&      # or if ($agent\->isa(\*(AqHTTP::MobileAgent::DoCoMo\*(Aq))
\&      # it\*(Aqs NTT DoCoMo i\-mode.
\&      # see what\*(Aqs available in H::MA::DoCoMo
\&  } elsif ($agent\->is_vodafone) {
\&      # it\*(Aqs Vodafone(J\-Phone).
\&      # see what\*(Aqs available in H::MA::Vodafone
\&  } elsif ($agent\->is_ezweb) {
\&      # it\*(Aqs KDDI/EZWeb.
\&      # see what\*(Aqs available in H::MA::EZweb
\&  } else {
\&      # may be PC
\&      # $agent is H::MA::NonMobile
\&  }
\&
\&  my $display = $agent\->display;        # HTTP::MobileAgent::Display
\&  if ($display\->color) { ... }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
HTTP::MobileAgent parses \s-1HTTP_USER_AGENT\s0 strings of (mainly Japanese)
mobile \s-1HTTP\s0 user agents. It'll be useful in page dispatching by user agents.
.SH "METHODS"
.IX Header "METHODS"
Here are common methods of HTTP::MobileAgent subclasses. More agent
specific methods are described in each subclasses. Note that some of
common methods are also overrided in some subclasses.
.IP "new" 4
.IX Item "new"
.Vb 4
\&  $agent = HTTP::MobileAgent\->new;       # from %ENV
\&  $agent = HTTP::MobileAgent\->new($env); # PSGI env hash
\&  $agent = HTTP::MobileAgent\->new($r);   # Apache or HTTP::Request
\&  $agent = HTTP::MobileAgent\->new($ua_string);
.Ve
.Sp
Parses \s-1HTTP\s0 headers and constructs HTTP::MobileAgent subclass
instance.
.Sp
If no argument is supplied, \f(CW$ENV\fR{HTTP_*} is used (i.e., expects a \s-1CGI\s0
environment to be setup)
.Sp
If a single hash reference is given, then that hash is treated as a
\&\s-1PSGI\s0 environment hash.
.Sp
If a blessed reference which is based on Apache (mod_perl 1.x),
HTTP::Headers or HTTP::Request is passed, those will be used 
accordingly to parse data.
.Sp
If a single scalar is given, then that is taken to be a raw user agent
string. Note that most likely this form of usage will not give you much
information, as some mobile agents put useful information on \s-1HTTP\s0 headers
other than only \f(CW\*(C`User\-Agent:\*(C'\fR (like \f(CW\*(C`x\-jphone\-msname\*(C'\fR in J\-Phone).
.IP "user_agent" 4
.IX Item "user_agent"
.Vb 1
\&  print "User\-Agent: ", $agent\->user_agent;
.Ve
.Sp
returns User-Agent string.
.IP "name" 4
.IX Item "name"
.Vb 1
\&  print "name: ", $agent\->name;
.Ve
.Sp
returns User-Agent name like 'DoCoMo'.
.IP "is_docomo, is_vodafone(is_j_phone, is_softbank), is_ezweb, is_wap1, is_wap2, is_tuka,is_non_mobile" 4
.IX Item "is_docomo, is_vodafone(is_j_phone, is_softbank), is_ezweb, is_wap1, is_wap2, is_tuka,is_non_mobile"
.Vb 1
\&   if ($agent\->is_docomo) { }
.Ve
.Sp
returns if the agent is DoCoMo, Vodafone(J\-Phone) or EZweb.
.IP "carrier" 4
.IX Item "carrier"
.Vb 1
\&  print "carrier: ", $agent\->carrier;
.Ve
.IP "carrier_longname" 4
.IX Item "carrier_longname"
.Vb 1
\&  print "carrier_longname: ", $agent\->carrier_longname;
.Ve
.IP "display" 4
.IX Item "display"
.Vb 1
\&  my $display = $agent\->display;
.Ve
.Sp
returns HTTP::MobileAgent::Display object. See
HTTP::MobileAgent::Display for details.
.IP "user_id" 4
.IX Item "user_id"
.Vb 1
\&  my $user_id = $agent\->user_id;
.Ve
.Sp
return X\-DCMGUID, X\-UP-SUBNO or X\-JPHONE-UID.
.IP "gps_compliant" 4
.IX Item "gps_compliant"
.Vb 1
\&  if ($agent\->gps_compliant) { }
.Ve
.Sp
returns if the agent is \s-1GPS\s0 compliant.
.SH "WARNINGS"
.IX Header "WARNINGS"
Following warnings might be raised when \f(CW$^W\fR is on.
.ie n .IP """%s: no match. Might be new variants. please contact the author of HTTP::MobileAgent!""" 4
.el .IP "``%s: no match. Might be new variants. please contact the author of HTTP::MobileAgent!''" 4
.IX Item "%s: no match. Might be new variants. please contact the author of HTTP::MobileAgent!"
User-Agent: string does not match patterns provided in subclasses. It
may be faked user-agent or a new variant. Feel free to mail me to
inform this.
.SH "NOTE"
.IX Header "NOTE"
.ie n .IP """Why not adding this module as an extension of HTTP::BrowserDetect?""" 4
.el .IP "``Why not adding this module as an extension of HTTP::BrowserDetect?''" 4
.IX Item "Why not adding this module as an extension of HTTP::BrowserDetect?"
Yep, I tried to do. But the module's code seems hard enough for me to
extend and don't want to bother the author for this mobile-specific
features. So I made this module as a separated one.
.SH "MORE IMPLEMENTATIONS"
.IX Header "MORE IMPLEMENTATIONS"
If you have any idea / request for this module to add new subclass,
I'm open to the discussion or (more preferable) patches. Feel free to
mail me.
.SH "OTHER LANGUAGE BINDINGS"
.IX Header "OTHER LANGUAGE BINDINGS"
This module is now ported to \s-1PHP\s0 as Net::UserAgent::Mobile by Atsuhiro
\&\s-1KUBO\s0.  See http://pear.php.net/package\-info.php?pacid=180 for details.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tatsuhiko Miyagawa <miyagawa@bulknews.net> is the original author and wrote almost all the code.
.PP
with contributions of Satoshi Tanimoto <tanimoto@cpan.org> and Yoshiki Kurihara <kurihara@cpan.org>
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "MAIN"
.IX Header "MAIN"
.SH "SEE ALSO"
.IX Header "SEE ALSO"
HTTP::MobileAgent::DoCoMo, HTTP::MobileAgent::Vodafone, HTTP::MobileAgent::JPhone,
HTTP::MobileAgent::EZweb, HTTP::MobileAgent::NonMobile,
HTTP::MobileAgent::Display, HTTP::BrowserDetect
.PP
Reference \s-1URL\s0 for specification is listed in Pods for each subclass.
