.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Catalyst::Manual::Tutorial::07_Debugging 3"
.TH Catalyst::Manual::Tutorial::07_Debugging 3 "2011-09-04" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::Manual::Tutorial::07_Debugging \- Catalyst Tutorial \- Chapter 7: Debugging
.SH "OVERVIEW"
.IX Header "OVERVIEW"
This is \fBChapter 7 of 10\fR for the Catalyst tutorial.
.PP
Tutorial Overview
.IP "1." 4
Introduction
.IP "2." 4
Catalyst Basics
.IP "3." 4
More Catalyst Basics
.IP "4." 4
Basic \s-1CRUD\s0
.IP "5." 4
Authentication
.IP "6." 4
Authorization
.IP "7." 4
\&\fB07_Debugging\fR
.IP "8." 4
Testing
.IP "9." 4
Advanced \s-1CRUD\s0
.IP "10." 4
Appendices
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This chapter of the tutorial takes a brief look at the primary options
available for troubleshooting Catalyst applications.
.PP
Source code for the tutorial in included in the \fI/home/catalyst/Final\fR
directory of the Tutorial Virtual machine (one subdirectory per
chapter).  There are also instructions for downloading the code in
Catalyst::Manual::Tutorial::01_Intro.
.PP
Note that when it comes to debugging and troubleshooting, there are two
camps:
.IP "\(bu" 4
Fans of \f(CW\*(C`log\*(C'\fR and \f(CW\*(C`print\*(C'\fR statements embedded in the code.
.IP "\(bu" 4
Fans of interactive debuggers.
.PP
Catalyst is able to easily accommodate both styles of debugging.
.SH "LOG STATEMENTS"
.IX Header "LOG STATEMENTS"
Folks in the former group can use Catalyst's \f(CW\*(C`$c\->log\*(C'\fR facility.
(See Catalyst::Log for more detail.) For example, if you add the
following code to a controller action method:
.PP
.Vb 1
\&    $c\->log\->info("Starting the foreach loop here");
\&    
\&    $c\->log\->debug("Value of \e$id is: ".$id);
.Ve
.PP
Then the Catalyst development server will display your message along
with the other debug output. To accomplish the same thing in a \s-1TT\s0
template view use:
.PP
.Vb 1
\&    [% c.log.debug("This is a test log message") %]
.Ve
.PP
As with many other logging facilities, a method is defined for each of
the following \*(L"logging levels\*(R" (in increasing order of
severity/importance):
.PP
.Vb 5
\&    $c\->log\->debug
\&    $c\->log\->info
\&    $c\->log\->warn
\&    $c\->log\->error
\&    $c\->log\->fatal
.Ve
.PP
You can also use Data::Dumper in both Catalyst code
(\f(CW\*(C`use Data::Dumper; $c\->log\->debug("\e$var is: ".Dumper($var));)\*(C'\fR)
and \s-1TT\s0 templates (\f(CW\*(C`[% Dumper.dump(book) %]\*(C'\fR.
.PP
\&\fB\s-1NOTE:\s0\fR Whether you are a logging fanatic or not, we strongly recommend
that you take advantage of Log::Log4perl or Log::Dispatch.  It's
easy to use Catalyst::Log with either of these and they will provide
a huge amount of extra functionality that you will want in virtually
every production application you run or support.
.SH "RUNNING CATALYST UNDER THE PERL DEBUGGER"
.IX Header "RUNNING CATALYST UNDER THE PERL DEBUGGER"
Members of the interactive-debugger fan club will also be at home with
Catalyst applications.  One approach to this style of Perl debugging is
to embed breakpoints in your code.  For example, open
\&\f(CW\*(C`lib/MyApp/Controller/Books.pm\*(C'\fR in your editor and add the
\&\f(CW\*(C`DB::single=1\*(C'\fR line as follows inside the \f(CW\*(C`list\*(C'\fR method (I like to
\&\*(L"left-justify\*(R" my debug statements so I don't forget to remove them, but
you can obviously indent them if you prefer):
.PP
.Vb 5
\&    sub list :Local {
\&        # Retrieve the usual Perl OO \*(Aq$self\*(Aq for this object. $c is the Catalyst
\&        # \*(AqContext\*(Aq that\*(Aqs used to \*(Aqglue together\*(Aq the various components
\&        # that make up the application
\&        my ($self, $c) = @_;
\&    
\&    $DB::single=1;
\&    
\&        # Retrieve all of the book records as book model objects and store in the
\&        # stash where they can be accessed by the TT template
\&        $c\->stash\->{books} = [$c\->model(\*(AqDB::Book\*(Aq)\->all];
\&    
\&        # Set the TT template to use.  You will almost always want to do this
\&        # in your action methods.
\&        $c\->stash\->{template} = \*(Aqbooks/list.tt2\*(Aq;
\&    }
.Ve
.PP
This causes the Perl Debugger to enter \*(L"single step mode\*(R" when this
command is encountered (it has no effect when Perl is run without the
\&\f(CW\*(C`\-d\*(C'\fR flag).
.PP
\&\fB\s-1NOTE:\s0\fR The \f(CW\*(C`DB\*(C'\fR here is the Perl Debugger, not the \s-1DB\s0 model.
.PP
If you haven't done it already, enable \s-1SQL\s0 logging as before:
.PP
.Vb 1
\&    $ export DBIC_TRACE=1
.Ve
.PP
To now run the Catalyst development server under the Perl debugger,
simply prepend \f(CW\*(C`perl \-d\*(C'\fR to the front of \f(CW\*(C`script/myapp_server.pl\*(C'\fR:
.PP
.Vb 1
\&    $ perl \-d script/myapp_server.pl
.Ve
.PP
This will start the interactive debugger and produce output similar to:
.PP
.Vb 1
\&    $ perl \-d script/myapp_server.pl  
\&    
\&    Loading DB routines from perl5db.pl version 1.3
\&    Editor support available.
\&    
\&    Enter h or \`h h\*(Aq for help, or \`man perldebug\*(Aq for more help.
\&    
\&    main::(script/myapp_server.pl:16):      my $debug         = 0;
\&    
\&      DB<1>
.Ve
.PP
Press the \f(CW\*(C`c\*(C'\fR key and hit \f(CW\*(C`Enter\*(C'\fR to continue executing the Catalyst
development server under the debugger.  Although execution speed will be
slightly slower than normal, you should soon see the usual Catalyst
startup debug information.
.PP
Now point your browser to <http://localhost:3000/books/list> and log
in.  Once the breakpoint is encountered in the
\&\f(CW\*(C`MyApp::Controller::list\*(C'\fR method, the console session running the
development server will drop to the Perl debugger prompt:
.PP
.Vb 2
\&    MyApp::Controller::Books::list(/home/catalyst/MyApp/script/../lib/MyApp/Controller/Books.pm:48):
\&    48:         $c\->stash\->{books} = [$c\->model(\*(AqDB::Book\*(Aq)\->all];
\&    
\&      DB<1>
.Ve
.PP
You now have the full Perl debugger at your disposal.  First use the
\&\f(CW\*(C`next\*(C'\fR feature by typing \f(CW\*(C`n\*(C'\fR to execute the \f(CW\*(C`all\*(C'\fR method on the Book
model (\f(CW\*(C`n\*(C'\fR jumps over method/subroutine calls; you can also use \f(CW\*(C`s\*(C'\fR to
\&\f(CW\*(C`single\-step\*(C'\fR into methods/subroutines):
.PP
.Vb 4
\&      DB<1> n
\&    SELECT me.id, me.title, me.rating, me.created, me.updated FROM book me:
\&    MyApp::Controller::Books::list(/home/catalyst/MyApp/script/../lib/MyApp/Controller/Books.pm:53):
\&    53:         $c\->stash\->{template} = \*(Aqbooks/list.tt2\*(Aq;
\&    
\&      DB<1>
.Ve
.PP
This takes you to the next line of code where the template name is set.
Notice that because we enabled \f(CW\*(C`DBIC_TRACE=1\*(C'\fR earlier, \s-1SQL\s0 debug output
also shows up in the development server debug information.
.PP
Next, list the methods available on our \f(CW\*(C`Book\*(C'\fR model:
.PP
.Vb 12
\&      DB<1> m $c\->model(\*(AqDB::Book\*(Aq)
\&    ()
\&    (0+
\&    (bool
\&    _\|_result_class_accessor
\&    _\|_source_handle_accessor
\&    _add_alias
\&    _\|_bool
\&    _build_unique_query
\&    _calculate_score
\&    _collapse_cond
\&    <lines removed for brevity>
\&    
\&      DB<2>
.Ve
.PP
We can also play with the model directly:
.PP
.Vb 3
\&      DB<2> x ($c\->model(\*(AqDB::Book\*(Aq)\->all)[1]\->title
\&    SELECT me.id, me.title, me.rating, me.created, me.updated FROM book me:
\&    0  \*(AqTCP/IP Illustrated, Volume 1\*(Aq
.Ve
.PP
This uses the Perl debugger \f(CW\*(C`x\*(C'\fR command to display the title of a book.
.PP
Next we inspect the \f(CW\*(C`books\*(C'\fR element of the Catalyst \f(CW\*(C`stash\*(C'\fR (the \f(CW4\fR
argument to the \f(CW\*(C`x\*(C'\fR command limits the depth of the dump to 4 levels):
.PP
.Vb 11
\&      DB<3> x 4 $c\->stash\->{books}
\&    0  ARRAY(0xa8f3b7c)
\&       0  MyApp::Model::DB::Book=HASH(0xb8e702c)
\&          \*(Aq_column_data\*(Aq => HASH(0xb8e5e2c)
\&             \*(Aqcreated\*(Aq => \*(Aq2009\-05\-08 10:19:46\*(Aq
\&             \*(Aqid\*(Aq => 1
\&             \*(Aqrating\*(Aq => 5
\&             \*(Aqtitle\*(Aq => \*(AqCCSP SNRS Exam Certification Guide\*(Aq
\&             \*(Aqupdated\*(Aq => \*(Aq2009\-05\-08 10:19:46\*(Aq
\&          \*(Aq_in_storage\*(Aq => 1
\&    <lines removed for brevity>
.Ve
.PP
Then enter the \f(CW\*(C`c\*(C'\fR command to continue processing until the next
breakpoint is hit (or the application exits):
.PP
.Vb 2
\&      DB<4> c
\&    SELECT author.id, author.first_name, author.last_name FROM ...
.Ve
.PP
Finally, press \f(CW\*(C`Ctrl+C\*(C'\fR to break out of the development server.
Because we are running inside the Perl debugger, you will drop to the
debugger prompt.
.PP
.Vb 2
\&    ^CCatalyst::Engine::HTTP::run(/usr/local/share/perl/5.10.0/Catalyst/Engine/HTTP.pm:260):
\&    260:            while ( accept( Remote, $daemon ) ) {
\&
\&    DB<4>
.Ve
.PP
Finally, press \f(CW\*(C`q\*(C'\fR to exit the debugger and return to your \s-1OS\s0 shell
prompt:
.PP
.Vb 2
\&      DB<4> q
\&    $
.Ve
.PP
For more information on using the Perl debugger, please see \f(CW\*(C`perldebug\*(C'\fR
and \f(CW\*(C`perldebtut\*(C'\fR.  For those daring souls out there, you can dive down
even deeper into the magical depths of this fine debugger by checking
out \f(CW\*(C`perldebguts\*(C'\fR.
.PP
You can also type \f(CW\*(C`h\*(C'\fR or \f(CW\*(C`h h\*(C'\fR at the debugger prompt to view the
built-in help screens.
.PP
For an excellent book covering all aspects of the Perl debugger, we
highly recommend reading 'Pro Perl Debugging' by Richard Foley.
.PP
Oh yeah, before you forget, be sure to remove the \f(CW\*(C`DB::single=1\*(C'\fR line
you added above in \f(CW\*(C`lib/MyApp/Controller/Books.pm\*(C'\fR.
.SH "DEBUGGING MODULES FROM CPAN"
.IX Header "DEBUGGING MODULES FROM CPAN"
Although the techniques discussed above work well for code you are
writing, what if you want to use print/log/warn messages or set
breakpoints in code that you have installed from \s-1CPAN\s0 (or in module that
ship with Perl)?  One helpful approach is to place a copy of the module
inside the \f(CW\*(C`lib\*(C'\fR directory of your Catalyst project.  When Catalyst
loads, it will load from inside your \f(CW\*(C`lib\*(C'\fR directory first, only
turning to the global modules if a local copy cannot be found.  You can
then make modifications such as adding a \f(CW\*(C`$DB::single=1\*(C'\fR to the local
copy of the module without risking the copy in the original location.
This can also be a great way to \*(L"locally override\*(R" bugs in modules while
you wait for a fix on \s-1CPAN\s0.
.PP
Matt Trout has suggested the following shortcut to create a local copy
of an installed module:
.PP
.Vb 1
\&    mkdir \-p lib/Module; cp \`perldoc \-l Module::Name\` lib/Module/
.Ve
.PP
Note: If you are following along in Debian 6 or Ubuntu, you will need to
install the \f(CW\*(C`perl\-doc\*(C'\fR package to use the \f(CW\*(C`perldoc\*(C'\fR command.  Use
\&\f(CW\*(C`sudo aptitude install perl\-doc\*(C'\fR to do that.
.PP
For example, you could make a copy of
Catalyst::Plugin::Authentication with the following command:
.PP
.Vb 2
\&    mkdir \-p lib/Catalyst/Plugin; cp \e
\&        \`perldoc \-l Catalyst::Plugin::Authentication\` lib/Catalyst/Plugin
.Ve
.PP
You can then use the local copy inside your project to place logging
messages and/or breakpoints for further study of that module.
.PP
\&\fBNote:\fR Matt has also suggested the following tips for Perl debugging:
.IP "\(bu" 4
Check the version of an installed module:
.Sp
.Vb 1
\&    perl \-M<mod_name> \-e \*(Aqprint "$<mod_name>::VERSION\en"\*(Aq
.Ve
.Sp
For example:
.Sp
.Vb 3
\&    $ perl \-MCatalyst::Plugin::Authentication \-e \e
\&        \*(Aqprint $Catalyst::Plugin::Authentication::VERSION;\*(Aq
\&    0.07
.Ve
.Sp
and if you are using bash aliases:
.Sp
.Vb 3
\&    alias pmver="perl \-le \*(Aq\e$m = shift; eval qq(require \e$m) \e
\&        or die qq(module \e"\e$m\e" is not installed\e\en); \e
\&        print \e$m\->VERSION\*(Aq"
.Ve
.IP "\(bu" 4
Check if a modules contains a given method:
.Sp
.Vb 1
\&    perl \-MModule::Name \-e \*(Aqprint Module::Name\->can("method");\*(Aq
.Ve
.Sp
For example:
.Sp
.Vb 3
\&    $ perl \-MCatalyst::Plugin::Authentication \-e \e
\&        \*(Aqprint Catalyst::Plugin::Authentication\->can("user");\*(Aq
\&    CODE(0x9c8db2c)
.Ve
.Sp
If the method exists, the Perl \f(CW\*(C`can\*(C'\fR method returns a coderef.
Otherwise, it returns undef and nothing will be printed.
.SH "TT DEBUGGING"
.IX Header "TT DEBUGGING"
If you run into issues during the rendering of your template, it might
be helpful to enable \s-1TT\s0 \f(CW\*(C`DEBUG\*(C'\fR options.  You can do this in a Catalyst
environment by adding a \f(CW\*(C`DEBUG\*(C'\fR line to the \f(CW\*(C`_\|_PACKAGE_\|_\-\*(C'\fRconfig>
declaration in \f(CW\*(C`lib/MyApp/View/HTML.pm\*(C'\fR:
.PP
.Vb 4
\&    _\|_PACKAGE_\|_\->config({
\&        TEMPLATE_EXTENSION => \*(Aq.tt2\*(Aq,
\&        DEBUG              => \*(Aqundef\*(Aq,
\&    });
.Ve
.PP
There are a variety of options you can use, such as 'undef', 'all',
\&'service', 'context', 'parser' and 'provider'.  See
Template::Constants for more information (remove the \f(CW\*(C`DEBUG_\*(C'\fR
portion of the name shown in the \s-1TT\s0 docs and convert to lower case for
use inside Catalyst).
.PP
\&\fB\s-1NOTE:\s0\fR \fBPlease be sure to disable \s-1TT\s0 debug options before continuing
with the tutorial\fR (especially the 'undef' option \*(-- leaving this
enabled will conflict with several of the conventions used by this
tutorial to leave some variables undefined on purpose).
.PP
Happy debugging.
.PP
You can jump to the next chapter of the tutorial here:
Testing
.SH "AUTHOR"
.IX Header "AUTHOR"
Kennedy Clark, \f(CW\*(C`hkclark@gmail.com\*(C'\fR
.PP
Feel free to contact the author for any errors or suggestions, but the
best way to report issues is via the \s-1CPAN\s0 \s-1RT\s0 Bug system at
https://rt.cpan.org/Public/Dist/Display.html?Name=Catalyst\-Manual <https://rt.cpan.org/Public/Dist/Display.html?Name=Catalyst-Manual>.
.PP
Copyright 2006\-2011, Kennedy Clark, under the
Creative Commons Attribution Share-Alike License Version 3.0
(http://creativecommons.org/licenses/by\-sa/3.0/us/ <http://creativecommons.org/licenses/by-sa/3.0/us/>).
