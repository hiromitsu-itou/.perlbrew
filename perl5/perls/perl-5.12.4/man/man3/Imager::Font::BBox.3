.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Imager::Font::BBox 3"
.TH Imager::Font::BBox 3 "2011-06-06" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Imager::Font::BBox \- objects representing the bounding box of a string.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Imager::Font;
\&
\&  # get the object
\&  my $font = Imager::Font\->new(...);
\&  my $bbox = $font\->bounding_box(string=>$text, size=>$size);
\&
\&  # methods
\&  my $start = $bbox\->start_offset;
\&  my $left_bearing = $bbox\->left_bearing;
\&  my $right_bearing = $bbox\->right_bearing;
\&  my $end = $bbox\->end_offset;
\&  my $gdescent = $box\->global_descent;
\&  my $gascent = $bbox\->global_ascent;
\&  my $ascent = $bbox\->ascent;
\&  my $decent = $bbox\->descent;
\&  my $total_width = $bbox\->total_width;
\&  my $fheight = $bbox\->font_height;
\&  my $theight = $bbox\->text_height;
\&  my $display_width = $bbox\->display_width;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Objects of this class are returned by the Imager::Font \fIbounding_box()\fR
method when it is called in scalar context.
.PP
This will hopefully make the information from this method more
accessible.
.SH "METHODS"
.IX Header "METHODS"
.IP "\fIstart_offset()\fR" 4
.IX Item "start_offset()"
.PD 0
.IP "neg_width" 4
.IX Item "neg_width"
.IP "left_bearing" 4
.IX Item "left_bearing"
.PD
Returns the horizontal offset from the selected drawing location to
the left edge of the first character drawn.  If this is positive, the
first glyph is to the right of the drawing location.
.Sp
The alias \fIneg_width()\fR is present to match the \fIbounding_box()\fR
documentation for list context.
.Sp
The alias \fIleft_bearing()\fR is present to match font terminology.
.IP "\fIadvance_width()\fR" 4
.IX Item "advance_width()"
The advance width of the string, if the driver supports that,
otherwise the same as end_offset.
.IP "right_bearing" 4
.IX Item "right_bearing"
The distance from the right of the last glyph to the end of the advance
point.
.Sp
If the glyph overflows the right side of the advance width this value
is negative.
.IP "display_width" 4
.IX Item "display_width"
The distance from the left-most pixel of the left-most glyph to the
right-most pixel of the right-most glyph.
.Sp
Equals advance_width \- left_bearing \- right_bearing (and implemented
that way.)
.IP "\fIglobal_descent()\fR" 4
.IX Item "global_descent()"
The lowest position relative to the font baseline that any character
in the font reaches in the character cell.  Normally negative.
.Sp
At least one font we've seen has reported a positive number for this.
.IP "\fIglobal_ascent()\fR" 4
.IX Item "global_ascent()"
The highest position relative to the font baseline that any character
in the font reaches in the character cell.  Normally positive.
.IP "\fIdescent()\fR" 4
.IX Item "descent()"
The lowest position relative to the font baseline that any character
in the supplied string reaches.  Negative when any character's glyph
reaches below the baseline.
.IP "\fIascent()\fR" 4
.IX Item "ascent()"
The highest position relative to the font baseline that any character
in the supplied string reaches.  Positive if any character's glyph
reaches above the baseline.
.IP "\fIfont_height()\fR" 4
.IX Item "font_height()"
The maximum displayed height of any string using this font.
.IP "\fItext_height()\fR" 4
.IX Item "text_height()"
The displayed height of the supplied string.
.SH "OBSOLETE METHODS"
.IX Header "OBSOLETE METHODS"
These methods include bugs kept for backwards compatibility and
shouldn't be used in new code.
.IP "\fItotal_width()\fR" 4
.IX Item "total_width()"
The total displayed width of the string.
.Sp
New code should use \fIdisplay_width()\fR.
.Sp
This depends on \fIend_offset()\fR, and is limited by it's backward
compatibility.
.IP "end_offset" 4
.IX Item "end_offset"
.PD 0
.IP "pos_width" 4
.IX Item "pos_width"
.PD
The offset from the selected drawing location to the right edge of the
last character drawn.  Should always be positive.
.Sp
You can use the alias \fIpos_width()\fR if you are used to the
\&\fIbounding_box()\fR documentation for list context.
.Sp
For backwards compatibility this method returns the maximum of the
advance width and the offset of the right edge of the last glyph.
.SH "INTERNAL FUNCTIONS"
.IX Header "INTERNAL FUNCTIONS"
.IP "new(...)" 4
.IX Item "new(...)"
Called by Imager::Font\->\fIbounding_box()\fR to create the object.
.SH "BUGS"
.IX Header "BUGS"
Doesn't reproduce the functionality that you get using the x and y
parameters to Imager::Font\->\fIbounding_box()\fR.  I considered:
.PP
.Vb 1
\&  my ($left, $top, $right, $bottom) = $box\->offset(x=>$x, y=>$y)
.Ve
.PP
but this is about as clumsy as the original.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tony Cook <tony@develop\-help.com>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIImager\fR\|(3), \fIImager::Font\fR\|(3)
