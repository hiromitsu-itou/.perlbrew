.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Config 3"
.TH Config 3 "2011-11-01" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Log::Log4perl::Config \- Log4perl configuration file syntax
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
In \f(CW\*(C`Log::Log4perl\*(C'\fR, configuration files are used to describe how the
system's loggers ought to behave.
.PP
The format is the same as the one as used for \f(CW\*(C`log4j\*(C'\fR, just with
a few perl-specific extensions, like enabling the \f(CW\*(C`Bar::Twix\*(C'\fR
syntax instead of insisting on the Java-specific \f(CW\*(C`Bar.Twix\*(C'\fR.
.PP
Comment lines (starting with arbitrary whitespace and a #) and
blank lines (all whitespace or empty) are ignored.
.PP
Also, blanks between syntactical entities are ignored, it doesn't 
matter if you write
.PP
.Vb 1
\&    log4perl.logger.Bar.Twix=WARN,Screen
.Ve
.PP
or
.PP
.Vb 1
\&    log4perl.logger.Bar.Twix = WARN, Screen
.Ve
.PP
\&\f(CW\*(C`Log::Log4perl\*(C'\fR will strip the blanks while parsing your input.
.PP
Assignments need to be on a single line. However, you can break the
line if you want to by using a continuation character at the end of the
line. Instead of writing
.PP
.Vb 1
\&    log4perl.appender.A1.layout=Log::Log4perl::Layout::SimpleLayout
.Ve
.PP
you can break the line at any point by putting a backslash at the very (!)
end of the line to be continued:
.PP
.Vb 2
\&    log4perl.appender.A1.layout=\e
\&        Log::Log4perl::Layout::SimpleLayout
.Ve
.PP
Watch out for trailing blanks after the backslash, which would prevent
the line from being properly concatenated.
.SS "Loggers"
.IX Subsection "Loggers"
Loggers are addressed by category:
.PP
.Vb 1
\&    log4perl.logger.Bar.Twix      = WARN, Screen
.Ve
.PP
This sets all loggers under the \f(CW\*(C`Bar::Twix\*(C'\fR hierarchy on priority
\&\f(CW\*(C`WARN\*(C'\fR and attaches a later-to-be-defined \f(CW\*(C`Screen\*(C'\fR appender to them.
Settings for the root appender (which doesn't have a name) can be
accomplished by simply omitting the name:
.PP
.Vb 1
\&    log4perl.logger = FATAL, Database, Mailer
.Ve
.PP
This sets the root appender's level to \f(CW\*(C`FATAL\*(C'\fR and also attaches the 
later-to-be-defined appenders \f(CW\*(C`Database\*(C'\fR and \f(CW\*(C`Mailer\*(C'\fR to it.
.PP
The additivity flag of a logger is set or cleared via the 
\&\f(CW\*(C`additivity\*(C'\fR keyword:
.PP
.Vb 1
\&    log4perl.additivity.Bar.Twix = 0|1
.Ve
.PP
(Note the reversed order of keyword and logger name, resulting
from the dilemma that a logger name could end in \f(CW\*(C`.additivity\*(C'\fR
according to the log4j documentation).
.SS "Appenders and Layouts"
.IX Subsection "Appenders and Layouts"
Appender names used in Log4perl configuration file
lines need to be resolved later on, in order to
define the appender's properties and its layout. To specify properties
of an appender, just use the \f(CW\*(C`appender\*(C'\fR keyword after the
\&\f(CW\*(C`log4perl\*(C'\fR intro and the appender's name:
.PP
.Vb 6
\&        # The Bar::Twix logger and its appender
\&    log4perl.logger.Bar.Twix = DEBUG, A1
\&    log4perl.appender.A1=Log::Log4perl::Appender::File
\&    log4perl.appender.A1.filename=test.log
\&    log4perl.appender.A1.mode=append
\&    log4perl.appender.A1.layout=Log::Log4perl::Layout::SimpleLayout
.Ve
.PP
This sets a priority of \f(CW\*(C`DEBUG\*(C'\fR for loggers in the \f(CW\*(C`Bar::Twix\*(C'\fR
hierarchy and assigns the \f(CW\*(C`A1\*(C'\fR appender to it, which is later on
resolved to be an appender of type \f(CW\*(C`Log::Log4perl::Appender::File\*(C'\fR, simply
appending to a log file. According to the \f(CW\*(C`Log::Log4perl::Appender::File\*(C'\fR
manpage, the \f(CW\*(C`filename\*(C'\fR parameter specifies the name of the log file
and the \f(CW\*(C`mode\*(C'\fR parameter can be set to \f(CW\*(C`append\*(C'\fR or \f(CW\*(C`write\*(C'\fR (the
former will append to the logfile if one with the specified name
already exists while the latter would clobber and overwrite it).
.PP
The order of the entries in the configuration file is not important,
\&\f(CW\*(C`Log::Log4perl\*(C'\fR will read in the entire file first and try to make
sense of the lines after it knows the entire context.
.PP
You can very well define all loggers first and then their appenders
(you could even define your appenders first and then your loggers,
but let's not go there):
.PP
.Vb 2
\&    log4perl.logger.Bar.Twix = DEBUG, A1
\&    log4perl.logger.Bar.Snickers = FATAL, A2
\&
\&    log4perl.appender.A1=Log::Log4perl::Appender::File
\&    log4perl.appender.A1.filename=test.log
\&    log4perl.appender.A1.mode=append
\&    log4perl.appender.A1.layout=Log::Log4perl::Layout::SimpleLayout
\&
\&    log4perl.appender.A2=Log::Log4perl::Appender::Screen
\&    log4perl.appender.A2.stderr=0
\&    log4perl.appender.A2.layout=Log::Log4perl::Layout::PatternLayout
\&    log4perl.appender.A2.layout.ConversionPattern = %d %m %n
.Ve
.PP
Note that you have to specify the full path to the layout class
and that \f(CW\*(C`ConversionPattern\*(C'\fR is the keyword to specify the printf-style
formatting instructions.
.SH "Configuration File Cookbook"
.IX Header "Configuration File Cookbook"
Here's some examples of often-used Log4perl configuration files:
.SS "Append to \s-1STDERR\s0"
.IX Subsection "Append to STDERR"
.Vb 5
\&    log4perl.category.Bar.Twix      = WARN, Screen
\&    log4perl.appender.Screen        = Log::Log4perl::Appender::Screen
\&    log4perl.appender.Screen.layout = \e
\&        Log::Log4perl::Layout::PatternLayout
\&    log4perl.appender.Screen.layout.ConversionPattern = %d %m %n
.Ve
.SS "Append to \s-1STDOUT\s0"
.IX Subsection "Append to STDOUT"
.Vb 6
\&    log4perl.category.Bar.Twix      = WARN, Screen
\&    log4perl.appender.Screen        = Log::Log4perl::Appender::Screen
\&    log4perl.appender.Screen.stderr = 0
\&    log4perl.appender.Screen.layout = \e
\&        Log::Log4perl::Layout::PatternLayout
\&    log4perl.appender.Screen.layout.ConversionPattern = %d %m %n
.Ve
.SS "Append to a log file"
.IX Subsection "Append to a log file"
.Vb 7
\&    log4perl.logger.Bar.Twix = DEBUG, A1
\&    log4perl.appender.A1=Log::Log4perl::Appender::File
\&    log4perl.appender.A1.filename=test.log
\&    log4perl.appender.A1.mode=append
\&    log4perl.appender.A1.layout = \e
\&        Log::Log4perl::Layout::PatternLayout
\&    log4perl.appender.A1.layout.ConversionPattern = %d %m %n
.Ve
.PP
Note that you could even leave out
.PP
.Vb 1
\&    log4perl.appender.A1.mode=append
.Ve
.PP
and still have the logger append to the logfile by default, although
the \f(CW\*(C`Log::Log4perl::Appender::File\*(C'\fR module does exactly the opposite.
This is due to some nasty trickery \f(CW\*(C`Log::Log4perl\*(C'\fR performs behind 
the scenes to make sure that beginner's \s-1CGI\s0 applications don't clobber 
the log file every time they're called.
.SS "Write a log file from scratch"
.IX Subsection "Write a log file from scratch"
If you loathe the Log::Log4perl's append-by-default strategy, you can
certainly override it:
.PP
.Vb 5
\&    log4perl.logger.Bar.Twix = DEBUG, A1
\&    log4perl.appender.A1=Log::Log4perl::Appender::File
\&    log4perl.appender.A1.filename=test.log
\&    log4perl.appender.A1.mode=write
\&    log4perl.appender.A1.layout=Log::Log4perl::Layout::SimpleLayout
.Ve
.PP
\&\f(CW\*(C`write\*(C'\fR is the \f(CW\*(C`mode\*(C'\fR that has \f(CW\*(C`Log::Log4perl::Appender::File\*(C'\fR
explicitely clobber the log file if it exists.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Log::Log4perl::Config::PropertyConfigurator
.PP
Log::Log4perl::Config::DOMConfigurator
.PP
Log::Log4perl::Config::LDAPConfigurator (coming soon!)
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2002\-2009 by Mike Schilli <m@perlmeister.com> 
and Kevin Goess <cpan@goess.org>.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
