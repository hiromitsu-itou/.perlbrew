.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTML::FormHandler::Manual::Templates 3"
.TH HTML::FormHandler::Manual::Templates 3 "2012-02-04" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTML::FormHandler::Manual::Templates \- using templates
.SH "VERSION"
.IX Header "VERSION"
version 0.36002
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Documentation on templates to use with HTML::FormHandler
.SH "Using templates"
.IX Header "Using templates"
There is a FormHandler Template Toolkit rendering role at
HTML::FormHandler::Render::WithTT, with a testcase in t/render_withtt.t.
Normally, however, it probably won't make much sense to use both a
\&\s-1TT\s0 parser in FormHandler, and a separate one for the \*(L"complete\*(R" templates,
so it seems like the \s-1TT\s0 renderer would mainly be useful for tests,
or as an example of how to do \s-1TT\s0 rendering with \s-1HFH\s0.
.PP
There are lots of different ways to set up templates. There are sample
templates installed in FormHandler's 'share' directory. These templates
are now organized more-or-less similarly to the widget roles, with 'field',
\&'wrapper', and 'form' directories, but many other organizations are possible.
.PP
Another organization would be to store all template snippets in a 'widget' directory.
.PP
You can use the default 'widget' for the field class, or set the 'widget'
for the field in your form:
.PP
.Vb 10
\&   fields => [
\&      my_special_field => {
\&         type => \*(AqText\*(Aq,
\&         widget => \*(Aqmy_special_widget\*(Aq,
\&      },
\&      my_second_field => {
\&         type => \*(AqText\*(Aq,
\&         widget => \*(Aqyet_another_widget\*(Aq,
\&      },
\&   ]
.Ve
.PP
And include them in a generic template:
.PP
.Vb 1
\&   [% PROCESS widget/form_start.tt %]
\&
\&   [% FOREACH f IN form.sorted_fields %]
\&      [% PROCESS widget/${f.widget}.tt %]
\&   [% END %]
\&
\&   [% PROCESS widget/form_end.tt %]
.Ve
.SH "Field attributes"
.IX Header "Field attributes"
If you want to use the 'process_attrs' function to pull in \s-1HTML\s0 attributes
for the input elements, wrappers, and labels, you would need to pass that
function into your \s-1TT\s0 setup. See HTML::FormHandler::Render::WithTT for an
example:
.PP
.Vb 2
\&    use HTML::FormHandler::Render::Util (\*(Aqprocess_attrs\*(Aq);
\&    $c\->stash( process_attrs => &process_attrs ); # or add to TT vars in your view
\&
\&    label [% process_attrs(f.label_attributes) %]for="[% f.html_name %]">
\&    [% f.label %]: </label>
\&    <input type="[% f.input_type %]" name="[% f.html_name %]" id="[% f.id %]" 
\&    [% process_attrs(f.attributes) %] value="[% f.fif %]">
.Ve
.SH "Sample templates"
.IX Header "Sample templates"
Note that the following templates assume that the field is in a \s-1TT\s0 variable \*(L"f\*(R",
as though they were processed in the above loop. Otherwise the individual
fields could be preceded by something like:
.PP
.Vb 1
\&  [% f = form.field(\*(Aqtitle\*(Aq) %]
.Ve
.SS "Text input field with error class on div & error messages"
.IX Subsection "Text input field with error class on div & error messages"
.Vb 9
\&   <div class="[% f.css_class %] [% IF f.has_errors %]error_fld[% END %]">
\&   [% IF f.has_errors %]
\&     [% FOR error IN f.errors %]
\&       <p><span class="error" id="error">[% error %] </span></p>
\&     [% END %]
\&   [% END %]
\&   <label class="label" for="[% f.id %]">[% f.label %]</label>
\&   <input type="text" name="[% f.html_name %]" id="[% f.id %]" value="[% f.fif %]">
\&   </div>
.Ve
.PP
Simple text field;
.PP
.Vb 3
\&   [% f = form.field(\*(Aqtext_field\*(Aq) %]
\&   <div><label class="label" for="[% f.id %]">[% f.label %]: </label>
\&   <input type="text" name="[% f.html_name %]" id="[% f.id %]" value="[% f.fif %]" /> </div>
.Ve
.SS "Select field"
.IX Subsection "Select field"
Single select:
.PP
.Vb 10
\&   <label class="label" for="[% f.id %]">[% f.label %]</label>
\&   <select name="[% f.html_name %]" id="[% f.id %]>
\&     [% FOR option IN f.options %]
\&       <option value="[% option.value %]"
\&       [% IF option.value == f.fif %]
\&          selected="selected"
\&       [% END %]>
\&       [% option.label %]</option>
\&     [% END %]
\&   </select>
.Ve
.PP
Multiple select:
.PP
.Vb 10
\&   <label class="label" for="[% f.id %]">[% f.label %]</label>
\&   <select name="[% f.html_name %]" id="[% f.id %]
\&             multiple="multiple" size="[% f.size %]">
\&     [% FOR option IN f.options %]
\&       <option value="[% option.value %]"
\&       [% FOREACH optval IN f.value %]
\&          [% IF optval == option.value %]
\&             selected="selected"
\&          [% END %]
\&       [% END %]>
\&       [% option.label %]</option>
\&     [% END %]
\&   </select>
.Ve
.PP
Warning: \s-1TT\s0 has problems with single element arrays. If you are likely
to have a single element in a select list, you might want to use the
rendering method instead or add an extra \*(L"choose\*(R" row. (If you come up
with a good solution, please submit a doc patch.)
.SS "Checkbox"
.IX Subsection "Checkbox"
.Vb 3
\&   <div><label class="label" for="[% f.id %]">[% f.label %]: </label>
\&   <input type="checkbox" name="[% f.html_name %]" id="[% f.id %]" value="1" />
\&   </div>
.Ve
.SS "Textarea"
.IX Subsection "Textarea"
.Vb 3
\&   <div><label class="label" for="[% f.id %]">[% f.label %]: </label>
\&   <textarea name="[% f.html_name %]" id="[% f.id %]"
\&        rows="[% f.rows %]" cols="[% f.cols %]">[% f.fif %]</textarea></div>
.Ve
.SS "Hidden"
.IX Subsection "Hidden"
.Vb 2
\&   <div><input type="hidden" name="[% f.html_name %]" id="[% f.id %]"
\&       value="[% f.fif %]" /></div>
.Ve
.SS "Submit"
.IX Subsection "Submit"
.Vb 2
\&   <div><input type="submit" name="[% f.html_name %]" id="[% f.id %]"
\&       value="[% f.value %]" /></div>
.Ve
.SS "Radio group"
.IX Subsection "Radio group"
.Vb 11
\&   <div>
\&   <label class="label" for="[% f.id %]">[% f.label %]</label>
\&   [% FOR option IN f.options %]
\&     <input type="radio" value="[% option.value %]"
\&        name="[% f.name %]"
\&     [% IF option.value == f.fif %]
\&        checked="checked"
\&     [% END %]>
\&     [% option.label %]<br />
\&   [% END %]
\&   </div>
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
FormHandler Contributors \- see HTML::FormHandler
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2012 by Gerda Shank.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
