.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SQL::Translator::Utils 3"
.TH SQL::Translator::Utils 3 "2011-05-05" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SQL::Translator::Utils \- SQL::Translator Utility functions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use SQL::Translator::Utils qw(debug);
\&  debug("PKG: Bad things happened");
.Ve
.SH "DESCSIPTION"
.IX Header "DESCSIPTION"
\&\f(CW\*(C`SQL::Translator::Utils\*(C'\fR contains utility functions designed to be
used from the other modules within the \f(CW\*(C`SQL::Translator\*(C'\fR modules.
.PP
Nothing is exported by default.
.SH "EXPORTED FUNCTIONS AND CONSTANTS"
.IX Header "EXPORTED FUNCTIONS AND CONSTANTS"
.SS "debug"
.IX Subsection "debug"
\&\f(CW\*(C`debug\*(C'\fR takes 0 or more messages, which will be sent to \s-1STDERR\s0 using
\&\f(CW\*(C`warn\*(C'\fR.  Occurances of the strings \fI\s-1PKG\s0\fR, \fI\s-1SUB\s0\fR, and \fI\s-1LINE\s0\fR
will be replaced by the calling package, subroutine, and line number,
respectively, as reported by \f(CWcaller(1)\fR.
.PP
For example, from within \f(CW\*(C`foo\*(C'\fR in \fISQL/Translator.pm\fR, at line 666:
.PP
.Vb 1
\&  debug("PKG: Error reading file at SUB/LINE");
.Ve
.PP
Will warn
.PP
.Vb 1
\&  [SQL::Translator: Error reading file at foo/666]
.Ve
.PP
The entire message is enclosed within \f(CW\*(C`[\*(C'\fR and \f(CW\*(C`]\*(C'\fR for visual clarity
when \s-1STDERR\s0 is intermixed with \s-1STDOUT\s0.
.SS "normalize_name"
.IX Subsection "normalize_name"
\&\f(CW\*(C`normalize_name\*(C'\fR takes a string and ensures that it is suitable for
use as an identifier.  This means: ensure that it starts with a letter
or underscore, and that the rest of the string consists of only
letters, numbers, and underscores.  A string that begins with
something other than [a\-zA\-Z] will be prefixer with an underscore, and
all other characters in the string will be replaced with underscores.
Finally, a trailing underscore will be removed, because that's ugly.
.PP
.Vb 1
\&  normalize_name("Hello, world");
.Ve
.PP
Produces:
.PP
.Vb 1
\&  Hello_world
.Ve
.PP
A more useful example, from the \f(CW\*(C`SQL::Translator::Parser::Excel\*(C'\fR test
suite:
.PP
.Vb 1
\&  normalize_name("silly field (with random characters)");
.Ve
.PP
returns:
.PP
.Vb 1
\&  silly_field_with_random_characters
.Ve
.SS "header_comment"
.IX Subsection "header_comment"
Create the header comment.  Takes 1 mandatory argument (the producer
classname), an optional comment character (defaults to \f(CW$DEFAULT_COMMENT\fR),
and 0 or more additional comments, which will be appended to the header,
prefixed with the comment character.  If additional comments are provided,
then a comment string must be provided ($DEFAULT_COMMENT is exported for
this use).  For example, this:
.PP
.Vb 1
\&  package My::Producer;
\&
\&  use SQL::Translator::Utils qw(header_comment $DEFAULT_COMMENT);
\&
\&  print header_comment(_\|_PACKAGE_\|_,
\&                       $DEFAULT_COMMENT,
\&                       "Hi mom!");
.Ve
.PP
produces:
.PP
.Vb 6
\&  \-\-
\&  \-\- Created by My::Prodcuer
\&  \-\- Created on Fri Apr 25 06:56:02 2003
\&  \-\-
\&  \-\- Hi mom!
\&  \-\-
.Ve
.PP
Note the gratuitous spacing.
.SS "parse_list_arg"
.IX Subsection "parse_list_arg"
Takes a string, list or arrayref (all of which could contain
comma-separated values) and returns an array reference of the values.
All of the following will return equivalent values:
.PP
.Vb 5
\&  parse_list_arg(\*(Aqid\*(Aq);
\&  parse_list_arg(\*(Aqid\*(Aq, \*(Aqname\*(Aq);
\&  parse_list_arg( \*(Aqid, name\*(Aq );
\&  parse_list_arg( [ \*(Aqid\*(Aq, \*(Aqname\*(Aq ] );
\&  parse_list_arg( qw[ id name ] );
.Ve
.SS "truncate_id_uniquely"
.IX Subsection "truncate_id_uniquely"
Takes a string ($desired_name) and int ($max_symbol_length). Truncates
\&\f(CW$desired_name\fR to \f(CW$max_symbol_length\fR by including part of the hash of
the full name at the end of the truncated name, giving a high
probability that the symbol will be unique. For example,
.PP
.Vb 3
\&  truncate_id_uniquely( \*(Aqa\*(Aq x 100, 64 )
\&  truncate_id_uniquely( \*(Aqa\*(Aq x 99 . \*(Aqb\*(Aq, 64 );
\&  truncate_id_uniquely( \*(Aqa\*(Aq x 99,  64 )
.Ve
.PP
Will give three different results; specifically:
.PP
.Vb 3
\&  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_7f900025
\&  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_6191e39a
\&  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_8cd96af2
.Ve
.ie n .SS "$DEFAULT_COMMENT"
.el .SS "\f(CW$DEFAULT_COMMENT\fP"
.IX Subsection "$DEFAULT_COMMENT"
This is the default comment string, '\-\- ' by default.  Useful for
\&\f(CW\*(C`header_comment\*(C'\fR.
.SS "parse_mysql_version"
.IX Subsection "parse_mysql_version"
Used by both Parser::MySQL and 
Producer::MySQL in order to provide a
consistent format for both \f(CW\*(C`parser_args\->{mysql_parser_version}\*(C'\fR and
\&\f(CW\*(C`producer_args\->{mysql_version}\*(C'\fR respectively. Takes any of the following
version specifications:
.PP
.Vb 6
\&  5.0.3
\&  4.1
\&  3.23.2
\&  5
\&  5.001005  (perl style)
\&  30201     (mysql style)
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
Darren Chamberlain <darren@cpan.org>,
Ken Y. Clark <kclark@cpan.org>.
