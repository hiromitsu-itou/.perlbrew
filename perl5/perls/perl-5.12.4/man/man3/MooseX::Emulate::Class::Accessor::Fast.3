.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MooseX::Emulate::Class::Accessor::Fast 3"
.TH MooseX::Emulate::Class::Accessor::Fast 3 "2009-09-16" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::Emulate::Class::Accessor::Fast \- Emulate Class::Accessor::Fast behavior using Moose attributes
.SH "SYNOPSYS"
.IX Header "SYNOPSYS"
.Vb 2
\&    package MyClass;
\&    use Moose;
\&
\&    with \*(AqMooseX::Emulate::Class::Accessor::Fast\*(Aq;
\&
\&
\&    #fields with readers and writers
\&    _\|_PACKAGE_\|_\->mk_accessors(qw/field1 field2/);
\&    #fields with readers only
\&    _\|_PACKAGE_\|_\->mk_ro_accessors(qw/field3 field4/);
\&    #fields with writers only
\&    _\|_PACKAGE_\|_\->mk_wo_accessors(qw/field5 field6/);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module attempts to emulate the behavior of Class::Accessor::Fast as
accurately as possible using the Moose attribute system. The public \s-1API\s0 of
\&\f(CW\*(C`Class::Accessor::Fast\*(C'\fR is wholly supported, but the private methods are not.
If you are only using the public methods (as you should) migration should be a
matter of switching your \f(CW\*(C`use base\*(C'\fR line to a \f(CW\*(C`with\*(C'\fR line.
.PP
While I have attempted to emulate the behavior of Class::Accessor::Fast as closely
as possible bugs may still be lurking in edge-cases.
.SH "BEHAVIOR"
.IX Header "BEHAVIOR"
Simple documentation is provided here for your convenience, but for more thorough
documentation please see Class::Accessor::Fast and Class::Accessor.
.SS "A note about introspection"
.IX Subsection "A note about introspection"
Please note that, at this time, the \f(CW\*(C`is\*(C'\fR flag attribute is not being set. To
determine the \f(CW\*(C`reader\*(C'\fR and \f(CW\*(C`writer\*(C'\fR methods using introspection in later versions
of Class::MOP ( > 0.38) please use the \f(CW\*(C`get_read_method\*(C'\fR and \f(CW\*(C`get_write_method\*(C'\fR
methods in Class::MOP::Attribute. Example
.PP
.Vb 4
\&    # with Class::MOP <= 0.38
\&    my $attr = $self\->meta\->find_attribute_by_name($field_name);
\&    my $reader_method = $attr\->reader || $attr\->accessor;
\&    my $writer_method = $attr\->writer || $attr\->accessor;
\&
\&    # with Class::MOP > 0.38
\&    my $attr = $self\->meta\->find_attribute_by_name($field_name);
\&    my $reader_method = $attr\->get_read_method;
\&    my $writer_method = $attr\->get_write_method;
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "\s-1BUILD\s0 $self %args"
.el .SS "\s-1BUILD\s0 \f(CW$self\fP \f(CW%args\fP"
.IX Subsection "BUILD $self %args"
Change the default Moose class building to emulate the behavior of C::A::F and
store arguments in the instance hashref.
.ie n .SS "mk_accessors @field_names"
.el .SS "mk_accessors \f(CW@field_names\fP"
.IX Subsection "mk_accessors @field_names"
Create read-write accessors. An attribute named \f(CW$field_name\fR will be created.
The name of the c<reader> and \f(CW\*(C`writer\*(C'\fR methods will be determined by the return
value of \f(CW\*(C`accessor_name_for\*(C'\fR and \f(CW\*(C`mutator_name_for\*(C'\fR, which by default return the
name passed unchanged. If the accessor and mutator names are equal the \f(CW\*(C`accessor\*(C'\fR
attribute will be passes to Moose, otherwise the \f(CW\*(C`reader\*(C'\fR and \f(CW\*(C`writer\*(C'\fR attributes
will be passed. Please see Class::MOP::Attribute for more information.
.ie n .SS "mk_ro_accessors @field_names"
.el .SS "mk_ro_accessors \f(CW@field_names\fP"
.IX Subsection "mk_ro_accessors @field_names"
Create read-only accessors.
.ie n .SS "mk_ro_accessors @field_names"
.el .SS "mk_ro_accessors \f(CW@field_names\fP"
.IX Subsection "mk_ro_accessors @field_names"
Create write-only accessors.
.SS "follow_best_practices"
.IX Subsection "follow_best_practices"
Preface readers with 'get_' and writers with 'set_'.
See original Class::Accessor documentation for more information.
.SS "mutator_name_for"
.IX Subsection "mutator_name_for"
.SS "accessor_name_for"
.IX Subsection "accessor_name_for"
See original Class::Accessor documentation for more information.
.SS "set"
.IX Subsection "set"
See original Class::Accessor documentation for more information.
.SS "get"
.IX Subsection "get"
See original Class::Accessor documentation for more information.
.SS "meta"
.IX Subsection "meta"
See Moose::Meta::Class.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Moose, Moose::Meta::Attribute, Class::Accessor, Class::Accessor::Fast,
Class::MOP::Attribute, MooseX::Adopt::Class::Accessor::Fast
.SH "AUTHORS"
.IX Header "AUTHORS"
Guillermo Roditi (groditi) <groditi@cpan.org>
.PP
With contributions from:
.IP "Tomas Doran (t0m) <bobtfish@bobtfish.net>" 4
.IX Item "Tomas Doran (t0m) <bobtfish@bobtfish.net>"
.PD 0
.IP "Florian Ragwitz (rafl) <rafl@debian.org>" 4
.IX Item "Florian Ragwitz (rafl) <rafl@debian.org>"
.PD
.SH "LICENSE"
.IX Header "LICENSE"
You may distribute this code under the same terms as Perl itself.
