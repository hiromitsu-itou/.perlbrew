.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "WebService::Hatena::Bookmark::Lite 3"
.TH WebService::Hatena::Bookmark::Lite 3 "2009-09-14" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WebService::Hatena::Bookmark::Lite \- A Perl Interface for Hatena::Bookmark AtomPub API
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use WebService::Hatena::Bookmark::Lite;
\&
\&    my $bookmark = WebService::Hatena::Bookmark::Lite\->new(
\&        username  => $username,
\&        password  => $password,
\&    );
\&
\&    ### add
\&    my $edit_ep = $bookmark\->add(
\&        url     => $url,
\&        tag     => \e@tag_list,
\&        comment => $comment,
\&    );
\&
\&    ### edit
\&    @tag = ( qw/ kaka tete /);
\&    $com = \*(Aqedit comment\*(Aq;
\&
\&    $bookmark\->edit(
\&        edit_ep => $edit_ep,
\&        tag     => \e@tag ,
\&        comment => $com  ,
\&    );
\&
\&    ### delete
\&    $bookmark\->delete(
\&        edit_ep => $edit_ep ,
\&    );
\&
\&    # Get Feed
\&    my $feed = $bookmark\->getFeed();
\&    print $feed\->as_xml;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
WebService::Hatena::Bookmark::Lite provides an interface to the Hatena::Bookmark AtomAPI.
.PP
If you use this module , It is necessary to prepare Hatena \s-1ID\s0 beforehand.
.PP
Hatena \s-1ID\s0 & password are necessary , when you install this module too.
please set \s-1ID\s0 & password using Conig::Pit , it looks like this.
.PP
.Vb 1
\&  % perl \-MConfig::Pit \-e\*(AqConfig::Pit::set("http://www.hatena.ne.jp", data=>{ username => "foobar", password => "barbaz" })\*(Aq
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 4
\&  my $bookmark = WebService::Hatena::Bookmark::Lite\->new(
\&      username  => $username,
\&      password  => $password,
\&  );
.Ve
.Sp
.RS 4
Creates and returns a WebService::Hatena::Bookmark::Lite Object.
.RE
.SS "add"
.IX Subsection "add"
.Vb 5
\&  my $edit_ep = $bookmark\->add(
\&      url     => $url,
\&      tag     => \e@tag_list,
\&      comment => $comment,
\&  );
.Ve
.Sp
.RS 4
Add Entry of your Hatena::Bookmark.
Return EditURI End Point.
.RE
.SS "edit"
.IX Subsection "edit"
.Vb 5
\&  my $edit_ret = $bookmark\->edit(
\&      edit_ep => $edit_ep,
\&      tag     => \e@tag_list,
\&      comment => $comment,
\&  );
.Ve
.Sp
.RS 4
Edit exist entry of your Hatena::Bookmark.
Return true on success, false otherwise.
.RE
.SS "delete"
.IX Subsection "delete"
.Vb 3
\&  my $del_ret = $bookmark\->delete(
\&      edit_ep  => $edit_ep ,
\&  );
.Ve
.Sp
.RS 4
Delete exist entry of your Hatena::Bookmark.
.RE
.SS "entry2edit_ep"
.IX Subsection "entry2edit_ep"
.Vb 1
\&  my $edit_ep = $bookmark\->entry2edit_ep( $entry );
.Ve
.Sp
.RS 4
Need one parameter. what is XML::Atom::Entry Object.
Return EditURI End Point of correct entry.
EditURI End Point is unique number of each entry.
.RE
.SS "getEntry"
.IX Subsection "getEntry"
.Vb 3
\&  my $entry = $bookmark\->getEntry(
\&      edit_ep  => $edit_ep ,
\&  );
.Ve
.Sp
.RS 4
Get exist entry of your Hatena::Bookmark.
Return XML::Atom::Entry Object.
.RE
.SS "getFeed"
.IX Subsection "getFeed"
.Vb 1
\&  my $feed = $bookmark\->getFeed();
\&
\&  print $feed\->as_xml;
.Ve
.Sp
.RS 4
Get entries of your Hatena::Bookmark.
Return XML::Atom::Feed Object.
.RE
.SH "REPOS"
.IX Header "REPOS"
.Vb 1
\&    http://github.com/masartz/p5\-webservice\-hatena\-bookmark\-lite/tree/master
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Masartz <masartz {at} gmail.com>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
Hatena-Bookmark
.Sp
http://b.hatena.ne.jp/
.IP "\(bu" 4
Hatena-Bookmark \s-1API\s0 documentation
.Sp
http://d.hatena.ne.jp/keyword/%A4%CF%A4%C6%A4%CA%A5%D6%A5%C3%A5%AF%A5%DE%A1%BC%A5%AFAtomAPI
.IP "\(bu" 4
XML::Atom
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
