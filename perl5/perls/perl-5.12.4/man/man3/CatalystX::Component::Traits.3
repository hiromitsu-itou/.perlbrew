.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CatalystX::Component::Traits 3"
.TH CatalystX::Component::Traits 3 "2010-08-27" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CatalystX::Component::Traits \- Automatic Trait Loading and Resolution for
Catalyst Components
.SH "VERSION"
.IX Header "VERSION"
Version 0.16
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    package Catalyst::Model::SomeModel;
\&    with \*(AqCatalystX::Component::Traits\*(Aq;
\&
\&    package MyApp::Model::MyModel;
\&    use parent \*(AqCatalyst::Model::SomeModel\*(Aq;
\&
\&    package MyApp;
\&
\&    _\|_PACKAGE_\|_\->config(\*(AqModel::MyModel\*(Aq => {
\&        traits => [\*(AqSearchedForTrait\*(Aq, \*(Aq+Fully::Qualified::Trait\*(Aq]
\&    });
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Adds a \*(L"\s-1COMPONENT\s0\*(R" in Catalyst::Component method to your Catalyst component
base class that reads the optional \f(CW\*(C`traits\*(C'\fR parameter from app and component
config and instantiates the component subclass with those traits using
\&\*(L"new_with_traits\*(R" in MooseX::Traits from MooseX::Traits::Pluggable.
.SH "TRAIT SEARCH"
.IX Header "TRAIT SEARCH"
Trait names qualified with a \f(CW\*(C`+\*(C'\fR are taken to be full package names.
.PP
Unqualified names are searched for, using the algorithm described below.
.SS "\s-1EXAMPLE\s0"
.IX Subsection "EXAMPLE"
Suppose your inheritance hierarchy is:
.PP
.Vb 5
\&    MyApp::Model::MyModel
\&    Catalyst::Model::CatModel
\&    Catalyst::Model
\&    Catalyst::Component
\&    Moose::Object
.Ve
.PP
The configuration is:
.PP
.Vb 1
\&    traits => [\*(AqFoo\*(Aq]
.Ve
.PP
The package search order for \f(CW\*(C`Foo\*(C'\fR will be:
.PP
.Vb 2
\&    MyApp::TraitFor::Model::CatModel::Foo
\&    Catalyst::TraitFor::Model::CatModel::Foo
.Ve
.SS "A \s-1MORE\s0 \s-1PATHOLOGICAL\s0 \s-1EXAMPLE\s0"
.IX Subsection "A MORE PATHOLOGICAL EXAMPLE"
For:
.PP
.Vb 6
\&    My::App::Controller::AController
\&    CatalystX::Something::ControllerBase::SomeController
\&    Catalyst::Controller
\&    Catalyst::Model
\&    Catalyst::Component
\&    Moose::Object
.Ve
.PP
With:
.PP
.Vb 1
\&    traits => [\*(AqFoo\*(Aq]
.Ve
.PP
Search order for \f(CW\*(C`Foo\*(C'\fR will be:
.PP
.Vb 2
\&    My::App::TraitFor::Controller::SomeController::Foo
\&    CatalystX::Something::TraitFor::Controller::SomeController::Foo
.Ve
.PP
The \f(CW\*(C`Base\*(C'\fR after (M|V|C) is automatically removed.
.SH "TRAIT MERGING"
.IX Header "TRAIT MERGING"
Traits from component class config and app config are automatically merged if
you set the \f(CW\*(C`_trait_merge\*(C'\fR attribute default, e.g.:
.PP
.Vb 1
\&    has \*(Aq+_trait_merge\*(Aq => (default => 1);
.Ve
.PP
You can remove component class config traits by prefixing their names with a
\&\f(CW\*(C`\-\*(C'\fR in the app config traits.
.PP
For example:
.PP
.Vb 3
\&    package Catalyst::Model::Foo;
\&    has \*(Aq+_trait_merge\*(Aq => (default => 1);
\&    _\|_PACKAGE_\|_\->config\->{traits} = [qw/Foo Bar/];
\&
\&    package MyApp;
\&    _\|_PACKAGE_\|_\->config\->{\*(AqModel::Foo\*(Aq}{traits} = [qw/\-Foo Baz/];
.Ve
.PP
Will load the traits:
.PP
.Vb 1
\&    Bar Baz
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Rafael Kitover, \f(CW\*(C`<rkitover@cpan.org>\*(C'\fR
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Tomas Doran, \f(CW\*(C`<bobtfish@bobtfish.net>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-catalystx\-component\-traits
at rt.cpan.org\*(C'\fR, or through the web interface at
http://rt.cpan.org/NoAuth/ReportBug.html?Queue=CatalystX\-Component\-Traits <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=CatalystX-Component-Traits>.  I
will be notified, and then you'll automatically be notified of progress on your
bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
More information at:
.IP "\(bu" 4
\&\s-1RT:\s0 \s-1CPAN\s0's request tracker
.Sp
http://rt.cpan.org/NoAuth/Bugs.html?Dist=CatalystX\-Component\-Traits <http://rt.cpan.org/NoAuth/Bugs.html?Dist=CatalystX-Component-Traits>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
http://annocpan.org/dist/CatalystX\-Component\-Traits <http://annocpan.org/dist/CatalystX-Component-Traits>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
http://cpanratings.perl.org/d/CatalystX\-Component\-Traits <http://cpanratings.perl.org/d/CatalystX-Component-Traits>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
http://search.cpan.org/dist/CatalystX\-Component\-Traits/ <http://search.cpan.org/dist/CatalystX-Component-Traits/>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Matt S. Trout and Tomas Doran helped me with the current design.
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright (c) 2009, Rafael Kitover
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
