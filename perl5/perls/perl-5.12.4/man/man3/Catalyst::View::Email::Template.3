.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Catalyst::View::Email::Template 3"
.TH Catalyst::View::Email::Template 3 "2011-01-17" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::View::Email::Template \- Send Templated Email from Catalyst
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Sends templated mail, based upon your default view. It captures the output
of the rendering path, slurps in based on mime-types and assembles a multi-part
email using Email::MIME::Creator and sends it out.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
\&\s-1WARNING:\s0 since version 0.10 the configuration options slightly changed!
.PP
Use the helper to create your view:
.PP
.Vb 1
\&    $ script/myapp_create.pl view Email::Template Email::Template
.Ve
.PP
For basic configuration look at \*(L"\s-1CONFIGURATION\s0\*(R" in Catalyst::View::Email.
.PP
In your app configuration (example in \s-1YAML\s0):
.PP
.Vb 10
\&    View::Email::Template:
\&        # Optional prefix to look somewhere under the existing configured
\&        # template  paths.
\&        # Default: none
\&        template_prefix: email
\&        # Define the defaults for the mail
\&        default:
\&            # Defines the default view used to render the templates.
\&            # If none is specified neither here nor in the stash
\&            # Catalysts default view is used.
\&            # Warning: if you don\*(Aqt tell Catalyst explicit which of your views should
\&            # be its default one, C::V::Email::Template may choose the wrong one!
\&            view: TT
.Ve
.SH "SENDING EMAIL"
.IX Header "SENDING EMAIL"
Sending email works just like for Catalyst::View::Email but by specifying 
the template instead of the body and forwarding to your Email::Template view:
.PP
.Vb 2
\&    sub controller : Private {
\&        my ( $self, $c ) = @_;
\&
\&        $c\->stash\->{email} = {
\&            to          => \*(Aqjshirley@gmail.com\*(Aq,
\&            cc          => \*(Aqabraxxa@cpan.org\*(Aq,
\&            bcc         => \*(Aqhidden@secret.com hidden2@foobar.com\*(Aq,
\&            from        => \*(Aqno\-reply@foobar.com\*(Aq,
\&            subject     => \*(AqI am a Catalyst generated email\*(Aq,
\&            template    => \*(Aqtest.tt\*(Aq,
\&            content_type => \*(Aqmultipart/alternative\*(Aq
\&        };
\&        
\&        $c\->forward( $c\->view(\*(AqEmail::Template\*(Aq) );
\&    }
.Ve
.PP
Alternatively if you want more control over your templates you can use the following idiom
to override the defaults. If charset and encoding given, the body become properly encoded.
.PP
.Vb 10
\&    templates => [
\&        {
\&            template        => \*(Aqemail/test.html.tt\*(Aq,
\&            content_type    => \*(Aqtext/html\*(Aq,
\&            charset         => \*(Aqutf\-8\*(Aq,
\&            encoding        => \*(Aqquoted\-printable\*(Aq,
\&            view            => \*(AqTT\*(Aq, 
\&        },
\&        {
\&            template        => \*(Aqemail/test.plain.mason\*(Aq,
\&            content_type    => \*(Aqtext/plain\*(Aq,
\&            charset         => \*(Aqutf\-8\*(Aq,
\&            encoding        => \*(Aqquoted\-printable\*(Aq,
\&            view            => \*(AqMason\*(Aq, 
\&        }
\&    ]
.Ve
.SH "HANDLING ERRORS"
.IX Header "HANDLING ERRORS"
See \*(L"\s-1HANDLING\s0 \s-1ERRORS\s0\*(R" in Catalyst::View::Email.
.SH "METHODS"
.IX Header "METHODS"
.IP "generate_part" 4
.IX Item "generate_part"
Generates a \s-1MIME\s0 part to include in the email. Since the email is template based
every template piece is a separate part that is included in the email.
.IP "process" 4
.IX Item "process"
The process method is called when the view is dispatched to. This creates the
multipart message and then sends the message contents off to
Catalyst::View::Email for processing, which in turn hands off to
Email::Sender::Simple.
.SH "TODO"
.IX Header "TODO"
.SS "\s-1ATTACHMENTS\s0"
.IX Subsection "ATTACHMENTS"
There needs to be a method to support attachments.  What I am thinking is
something along these lines:
.PP
.Vb 9
\&    attachments => [
\&        # Set the body to a file handle object, specify content_type and
\&        # the file name. (name is what it is sent at, not the file)
\&        { body => $fh, name => "foo.pdf", content_type => "application/pdf" },
\&        # Or, specify a filename that is added, and hey, encoding!
\&        { filename => "foo.gif", name => "foo.gif", content_type => "application/pdf", encoding => "quoted\-printable" },
\&        # Or, just a path to a file, and do some guesswork for the content type
\&        "/path/to/somefile.pdf",
\&    ]
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.SS "Catalyst::View::Email \- Send plain boring emails with Catalyst"
.IX Subsection "Catalyst::View::Email - Send plain boring emails with Catalyst"
.SS "Catalyst::Manual \- The Catalyst Manual"
.IX Subsection "Catalyst::Manual - The Catalyst Manual"
.SS "Catalyst::Manual::Cookbook \- The Catalyst Cookbook"
.IX Subsection "Catalyst::Manual::Cookbook - The Catalyst Cookbook"
.SH "AUTHORS"
.IX Header "AUTHORS"
J. Shirley <jshirley@gmail.com>
.PP
Simon Elliott <cpan@browsing.co.uk>
.PP
Alexander Hartmaier <abraxxa@cpan.org>
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software, you can redistribute it and/or modify it under
the same terms as Perl itself.
