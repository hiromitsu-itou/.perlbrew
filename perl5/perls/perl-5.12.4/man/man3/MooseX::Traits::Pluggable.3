.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MooseX::Traits::Pluggable 3"
.TH MooseX::Traits::Pluggable 3 "2010-07-25" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::Traits::Pluggable \- trait loading and resolution for Moose
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
See MooseX::Traits for usage information.
.PP
Use \f(CW\*(C`new_with_traits\*(C'\fR to construct an object with a list of traits and
\&\f(CW\*(C`apply_traits\*(C'\fR to apply traits to an instance.
.PP
Adds support for class precedence search for traits and some extra attributes,
described below.
.SH "TRAIT SEARCH"
.IX Header "TRAIT SEARCH"
If the value of \*(L"_trait_namespace\*(R" in MooseX::Traits starts with a \f(CW\*(C`+\*(C'\fR the
namespace will be considered relative to the \f(CW\*(C`class_precedence_list\*(C'\fR (ie.
\&\f(CW@ISA\fR) of the original class.
.PP
Example:
.PP
.Vb 2
\&  package Class1
\&  use Moose;
\&
\&  package Class1::Trait::Foo;
\&  use Moose::Role;
\&  has \*(Aqbar\*(Aq => (
\&      is       => \*(Aqro\*(Aq,
\&      isa      => \*(AqStr\*(Aq,
\&      required => 1,
\&  );
\&
\&  package Class2;
\&  use parent \*(AqClass1\*(Aq;
\&  with \*(AqMooseX::Traits\*(Aq;
\&  has \*(Aq+_trait_namespace\*(Aq => (default => \*(Aq+Trait\*(Aq);
\&
\&  package Class2::Trait::Bar;
\&  use Moose::Role;
\&  has \*(Aqbaz\*(Aq => (
\&      is       => \*(Aqro\*(Aq,
\&      isa      => \*(AqStr\*(Aq,
\&      required => 1,
\&  );
\&
\&  package main;
\&  my $instance = Class2\->new_with_traits(
\&      traits => [\*(AqFoo\*(Aq, \*(AqBar\*(Aq],
\&      bar => \*(Aqbaz\*(Aq,
\&      baz => \*(Aqquux\*(Aq,
\&  );
\&
\&  $instance\->does(\*(AqClass1::Trait::Foo\*(Aq); # true
\&  $instance\->does(\*(AqClass2::Trait::Bar\*(Aq); # true
.Ve
.SH "NAMESPACE ARRAYS"
.IX Header "NAMESPACE ARRAYS"
You can search multiple namespaces for traits, for example:
.PP
.Vb 3
\&  has \*(Aq+_trait_namespace\*(Aq => (
\&      default => sub { [qw/+Trait +Role ExtraNS::Trait/] }
\&  );
.Ve
.PP
Will search in the \f(CW\*(C`class_precedence_list\*(C'\fR for \f(CW\*(C`::Trait::TheTrait\*(C'\fR
and \f(CW\*(C`::Role::TheTrait\*(C'\fR and then for \f(CW\*(C`ExtraNS::Trait::TheTrait\*(C'\fR.
.SH "EXTRA ATTRIBUTES"
.IX Header "EXTRA ATTRIBUTES"
.SS "_original_class_name"
.IX Subsection "_original_class_name"
When traits are applied to your class or instance, you get an anonymous class
back whose name will be not the same as your original class. So \f(CW\*(C`ref $self\*(C'\fR
will not be \f(CW\*(C`Class\*(C'\fR, but \f(CW\*(C`$self\->_original_class_name\*(C'\fR will be.
.SS "_traits"
.IX Subsection "_traits"
List of the (unresolved) traits applied to the instance.
.SS "_resolved_traits"
.IX Subsection "_resolved_traits"
List of traits applied to the instance resolved to full package names.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
MooseX::Traits, MooseX::Object::Pluggable
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-moosex\-traits\-pluggable at
rt.cpan.org\*(C'\fR, or through the web interface at
http://rt.cpan.org/NoAuth/ReportBug.html?Queue=MooseX\-Traits\-Pluggable <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=MooseX-Traits-Pluggable>.  I
will be notified, and then you'll automatically be notified of progress on your
bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
More information at:
.IP "\(bu" 4
\&\s-1RT:\s0 \s-1CPAN\s0's request tracker
.Sp
http://rt.cpan.org/NoAuth/Bugs.html?Dist=MooseX\-Traits\-Pluggable <http://rt.cpan.org/NoAuth/Bugs.html?Dist=MooseX-Traits-Pluggable>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
http://annocpan.org/dist/MooseX\-Traits\-Pluggable <http://annocpan.org/dist/MooseX-Traits-Pluggable>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
http://cpanratings.perl.org/d/MooseX\-Traits\-Pluggable <http://cpanratings.perl.org/d/MooseX-Traits-Pluggable>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
http://search.cpan.org/dist/MooseX\-Traits\-Pluggable/ <http://search.cpan.org/dist/MooseX-Traits-Pluggable/>
.SH "AUTHOR"
.IX Header "AUTHOR"
Rafael Kitover \f(CW\*(C`<rkitover@cpan.org>\*(C'\fR
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Tomas Doran, \f(CW\*(C`<bobtfish@bobtfish.net>\*(C'\fR
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright (c) 2009 \- 2010 by the aforementioned
\&\*(L"\s-1AUTHOR\s0\*(R" and \*(L"\s-1CONTRIBUTORS\s0\*(R".
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
