.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Tree::AdjacencyList::Ordered 3"
.TH DBIx::Class::Tree::AdjacencyList::Ordered 3 "2011-01-04" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::Tree::AdjacencyList::Ordered \- Glue DBIx::Class::Ordered and DBIx::Class::Tree::AdjacencyList together.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Create a table for your tree data.
.PP
.Vb 6
\&  CREATE TABLE items (
\&    item_id INTEGER PRIMARY KEY AUTOINCREMENT,
\&    parent_id INTEGER NOT NULL DEFAULT 0,
\&    position INTEGER NOT NULL,
\&    name TEXT NOT NULL
\&  );
.Ve
.PP
In your Schema or \s-1DB\s0 class add Tree::AdjacencyList::Ordered 
to the front of the component list.
.PP
.Vb 1
\&  _\|_PACKAGE_\|_\->load_components(qw( Tree::AdjacencyList::Ordered ... ));
.Ve
.PP
Specify the column that contains the parent \s-1ID\s0 and position of each row.
.PP
.Vb 3
\&  package My::Employee;
\&  _\|_PACKAGE_\|_\->position_column(\*(Aqposition\*(Aq);
\&  _\|_PACKAGE_\|_\->parent_column(\*(Aqparent_id\*(Aq);
.Ve
.PP
This module provides a few extra methods beyond what 
DBIx::Class::Ordered and DBIx::Class::Tree::AdjacencyList 
already provide.
.PP
.Vb 3
\&  my $parent = $item\->parent();
\&  $item\->parent( $parent_obj );
\&  $item\->parent( $parent_id );
\&  
\&  my $children_rs = $item\->children();
\&  my @children = $item\->children();
\&  
\&  $parent\->append_child( $child );
\&  $parent\->prepend_child( $child );
\&  
\&  $this\->attach_before( $that );
\&  $this\->attach_after( $that );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides methods for working with adjacency lists and ordered 
rows.  All of the methods that DBIx::Class::Ordered and 
DBIx::Class::Tree::AdjacencyList provide are available with this module.
.SH "METHODS"
.IX Header "METHODS"
.SS "parent_column"
.IX Subsection "parent_column"
.Vb 1
\&  _\|_PACKAGE_\|_\->parent_column(\*(Aqparent_id\*(Aq);
.Ve
.PP
Works the same as AdjacencyList's \fIparent_column()\fR method, but it 
declares the \fIchildren()\fR has many relationship to be ordered by the 
position column.
.SS "parent"
.IX Subsection "parent"
.Vb 3
\&  my $parent = $item\->parent();
\&  $item\->parent( $parent_obj );
\&  $item\->parent( $parent_id );
.Ve
.PP
This method overrides AdjacencyList's \fIparent()\fR method but 
modifies it so that the object is moved to the last position, 
then the parent is changed, and then it is moved to the last 
position of the new list, thus maintaining the intergrity of 
the ordered lists.
.SS "children"
.IX Subsection "children"
.Vb 2
\&  my $children_rs = $item\->children();
\&  my @children = $item\->children();
.Ve
.PP
This method works just like it does in the 
DBIx::Class::Tree::AdjacencyList module except it 
orders the children by there position.
.SS "append_child"
.IX Subsection "append_child"
.Vb 1
\&  $parent\->append_child( $child );
.Ve
.PP
Sets the child to have the specified parent and moves the 
child to the last position.
.SS "prepend_child"
.IX Subsection "prepend_child"
.Vb 1
\&  $parent\->prepend_child( $child );
.Ve
.PP
Sets the child to have the specified parent and moves the 
child to the first position.
.SS "attach_before"
.IX Subsection "attach_before"
.Vb 1
\&  $this\->attach_before( $that );
.Ve
.PP
Attaches the object at the position just before the 
calling object's position.
.SS "attach_after"
.IX Subsection "attach_after"
.Vb 1
\&  $this\->attach_after( $that );
.Ve
.PP
Attaches the object at the position just after the 
calling object's position.
.SH "INHERITED METHODS"
.IX Header "INHERITED METHODS"
.SS "DBIx::Class::Ordered"
.IX Subsection "DBIx::Class::Ordered"
.IP "\(bu" 4
siblings
.IP "\(bu" 4
first_sibling
.IP "\(bu" 4
last_sibling
.IP "\(bu" 4
previous_sibling
.IP "\(bu" 4
next_sibling
.IP "\(bu" 4
move_previous
.IP "\(bu" 4
move_next
.IP "\(bu" 4
move_first
.IP "\(bu" 4
move_last
.IP "\(bu" 4
move_to
.IP "\(bu" 4
insert
.IP "\(bu" 4
delete
.SS "DBIx::Class::Tree::AdjacencyList"
.IX Subsection "DBIx::Class::Tree::AdjacencyList"
.IP "\(bu" 4
parent_column
.IP "\(bu" 4
parent
.IP "\(bu" 4
attach_child
.IP "\(bu" 4
siblings
.IP "\(bu" 4
attach_sibling
.SS "DBIx::Class"
.IX Subsection "DBIx::Class"
.IP "\(bu" 4
mk_classdata
.IP "\(bu" 4
component_base_class
.SS "DBIx::Class::Componentised"
.IX Subsection "DBIx::Class::Componentised"
.IP "\(bu" 4
inject_base
.IP "\(bu" 4
load_components
.IP "\(bu" 4
load_own_components
.SS "Class::Data::Accessor"
.IX Subsection "Class::Data::Accessor"
.IP "\(bu" 4
mk_classaccessor
.SH "AUTHOR"
.IX Header "AUTHOR"
Aran Clary Deltac <bluefeet@cpan.org>
.SH "LICENSE"
.IX Header "LICENSE"
You may distribute this code under the same terms as Perl itself.
