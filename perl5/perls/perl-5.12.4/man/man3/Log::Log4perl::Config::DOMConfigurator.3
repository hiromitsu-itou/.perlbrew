.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Config::DOMConfigurator 3"
.TH Config::DOMConfigurator 3 "2010-07-23" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Log::Log4perl::Config::DOMConfigurator \- reads xml config files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&    \-\-using the log4j DTD\-\-
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    <?xml version="1.0" encoding="UTF\-8"?>
\&    <!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
\&
\&    <log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
\&
\&    <appender name="FileAppndr1" class="org.apache.log4j.FileAppender">
\&        <layout class="Log::Log4perl::Layout::PatternLayout">
\&                <param name="ConversionPattern"
\&                       value="%d %4r [%t] %\-5p %c %t \- %m%n"/>
\&        </layout>
\&        <param name="File" value="t/tmp/DOMtest"/>
\&        <param name="Append" value="false"/>
\&    </appender>
\&
\&    <category name="a.b.c.d" additivity="false">
\&        <level value="warn"/>  <!\-\- note lowercase! \-\->
\&        <appender\-ref ref="FileAppndr1"/>
\&    </category>
\&
\&   <root>
\&        <priority value="warn"/>
\&        <appender\-ref ref="FileAppndr1"/>
\&   </root>
\&
\&   </log4j:configuration>
\&   
\&   
\&   
\&   \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&   \-\-using the log4perl DTD\-\-
\&   \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&   
\&   <?xml version="1.0" encoding="UTF\-8"?>
\&    <!DOCTYPE log4perl:configuration SYSTEM "log4perl.dtd">
\&
\&    <log4perl:configuration xmlns:log4perl="http://log4perl.sourceforge.net/"
\&        threshold="debug" oneMessagePerAppender="true">
\&
\&    <log4perl:appender name="jabbender" class="Log::Dispatch::Jabber">
\&
\&            <param\-nested name="login">
\&                   <param name="hostname" value="a.jabber.server"/>
\&                   <param name="password" value="12345"/>
\&                   <param name="port"     value="5222"/>
\&                   <param name="resource" value="logger"/>
\&                   <param name="username" value="bobjones"/>
\&            </param\-nested>
\&
\&            <param name="to" value="bob@a.jabber.server"/>
\&
\&            <param\-text name="to">
\&                  mary@another.jabber.server
\&            </param\-text>
\&
\&            <log4perl:layout class="org.apache.log4j.PatternLayout">
\&                <param name="ConversionPattern" value = "%K xx %G %U"/>
\&                <cspec name="K">
\&                    sub { return sprintf "%1x", $$}
\&                </cspec>
\&                <cspec name="G">
\&                    sub {return \*(AqthisistheGcspec\*(Aq}
\&                </cspec>
\&            </log4perl:layout>
\&    </log4perl:appender>
\&
\&    <log4perl:appender name="DBAppndr2" class="Log::Log4perl::Appender::DBI">
\&              <param name="warp_message" value="0"/>
\&              <param name="datasource" value="DBI:CSV:f_dir=t/tmp"/>
\&              <param name="bufferSize" value="2"/>
\&              <param name="password" value="sub { $ENV{PWD} }"/>
\&              <param name="username" value="bobjones"/>
\&
\&              <param\-text name="sql">
\&                  INSERT INTO log4perltest
\&                            (loglevel, message, shortcaller, thingid,
\&                            category, pkg, runtime1, runtime2)
\&                  VALUES
\&                             (?,?,?,?,?,?,?,?)
\&              </param\-text>
\&
\&               <param\-nested name="params">
\&                    <param name="1" value="%p"/>
\&                    <param name="3" value="%5.5l"/>
\&                    <param name="5" value="%c"/>
\&                    <param name="6" value="%C"/>
\&               </param\-nested>
\&
\&               <layout class="Log::Log4perl::Layout::NoopLayout"/>
\&    </log4perl:appender>
\&
\&    <category name="animal.dog">
\&               <priority value="info"/>
\&               <appender\-ref ref="jabbender"/>
\&               <appender\-ref ref="DBAppndr2"/>
\&    </category>
\&
\&    <category name="plant">
\&            <priority value="debug"/>
\&            <appender\-ref ref="DBAppndr2"/>
\&    </category>
\&
\&    <PatternLayout>
\&        <cspec name="U"><![CDATA[
\&            sub {
\&                return "UID $< GID $(";
\&            }
\&        ]]></cspec>
\&    </PatternLayout>
\&
\&    </log4perl:configuration>
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements an \s-1XML\s0 config, complementing the properties-style
config described elsewhere.
.SH "WHY"
.IX Header "WHY"
\&\*(L"Why would I want my config in \s-1XML\s0?\*(R" you ask.  Well, there are a couple
reasons you might want to.  Maybe you have a personal preference
for \s-1XML\s0.  Maybe you manage your config with other tools that have an
affinity for \s-1XML\s0, like XML-aware editors or automated config
generators.  Or maybe (and this is the big one) you don't like
having to run your application just to check the syntax of your
config file.
.PP
By using an \s-1XML\s0 config and referencing a \s-1DTD\s0, you can use a namespace-aware
validating parser to see if your \s-1XML\s0 config at least follows the rules set 
in the \s-1DTD\s0.
.SH "HOW"
.IX Header "HOW"
To reference a \s-1DTD\s0, drop this in after the <?xml...> declaration
in your config file:
.PP
.Vb 1
\&    <!DOCTYPE log4perl:configuration SYSTEM "log4perl.dtd">
.Ve
.PP
That tells the parser to validate your config against the \s-1DTD\s0 in
\&\*(L"log4perl.dtd\*(R", which is available in the xml/ directory of
the log4perl distribution.  Note that you'll also need to grab
the log4j\-1.2.dtd from there as well, since the it's included
by log4perl.dtd.
.PP
Namespace-aware validating parsers are not the norm in Perl.  
But the Xerces project 
(http://xml.apache.org/xerces\-c/index.html \-\-lots of binaries available, 
even rpm's)  does provide just such a parser
that you can use like this:
.PP
.Vb 1
\&    StdInParse \-ns \-v < my\-log4perl\-config.xml
.Ve
.PP
This module itself does not use a validating parser, the obvious
one XML::DOM::ValParser doesn't seem to handle namespaces.
.SH "WHY TWO DTDs"
.IX Header "WHY TWO DTDs"
The log4j \s-1DTD\s0 is from the log4j project, they designed it to 
handle their needs.  log4perl has added some extensions to the 
original log4j functionality which needed some extensions to the
log4j \s-1DTD\s0.  If you aren't using these features then you can validate
your config against the log4j dtd and know that you're using
unadulterated log4j config tags.
.PP
The features added by the log4perl dtd are:
.IP "1 oneMessagePerAppender global setting" 4
.IX Item "1 oneMessagePerAppender global setting"
.Vb 1
\&    log4perl.oneMessagePerAppender=1
.Ve
.IP "2 globally defined user conversion specifiers" 4
.IX Item "2 globally defined user conversion specifiers"
.Vb 1
\&    log4perl.PatternLayout.cspec.G=sub { return "UID $< GID $("; }
.Ve
.IP "3 appender-local custom conversion specifiers" 4
.IX Item "3 appender-local custom conversion specifiers"
.Vb 1
\&     log4j.appender.appndr1.layout.cspec.K = sub {return sprintf "%1x", $$ }
.Ve
.IP "4 nested options" 4
.IX Item "4 nested options"
.Vb 5
\&     log4j.appender.jabbender          = Log::Dispatch::Jabber
\&     #(note how these are nested under \*(Aqlogin\*(Aq)
\&     log4j.appender.jabbender.login.hostname = a.jabber.server
\&     log4j.appender.jabbender.login.port     = 5222
\&     log4j.appender.jabbender.login.username = bobjones
.Ve
.IP "5 the log4perl\-specific filters, see Log::Log4perl::Filter, lots of examples in t/044XML\-Filter.t, here's a short one:" 4
.IX Item "5 the log4perl-specific filters, see Log::Log4perl::Filter, lots of examples in t/044XML-Filter.t, here's a short one:"
.Vb 2
\&  <?xml version="1.0" encoding="UTF\-8"?> 
\&  <!DOCTYPE log4perl:configuration SYSTEM "log4perl.dtd">
\&
\&  <log4perl:configuration xmlns:log4perl="http://log4perl.sourceforge.net/">
\&   
\&  <appender name="A1" class="Log::Log4perl::Appender::TestBuffer">
\&        <layout class="Log::Log4perl::Layout::SimpleLayout"/>
\&        <filter class="Log::Log4perl::Filter::Boolean">
\&            <param name="logic" value="!Match3 &amp;&amp; (Match1 || Match2)"/> 
\&        </filter>
\&  </appender>   
\&  
\&  <appender name="A2" class="Log::Log4perl::Appender::TestBuffer">
\&        <layout class="Log::Log4perl::Layout::SimpleLayout"/>
\&        <filter\-ref id="Match1"/>
\&  </appender>   
\&  
\&  <log4perl:filter name="Match1" value="sub { /let this through/ }" />
\&  
\&  <log4perl:filter name="Match2">
\&        sub { 
\&            /and that, too/ 
\&        }
\&   </log4perl:filter>
\&  
\&  <log4perl:filter name="Match3" class="Log::Log4perl::Filter::StringMatch">
\&    <param name="StringToMatch" value="suppress"/>
\&    <param name="AcceptOnMatch" value="true"/>
\&  </log4perl:filter>
\&  
\&  <log4perl:filter name="MyBoolean" class="Log::Log4perl::Filter::Boolean">
\&    <param name="logic" value="!Match3 &amp;&amp; (Match1 || Match2)"/>
\&  </log4perl:filter>
\&  
\&   
\&   <root>
\&           <priority value="info"/>
\&           <appender\-ref ref="A1"/>
\&   </root>
\&   
\&   </log4perl:configuration>
.Ve
.PP
So we needed to extend the log4j dtd to cover these additions.
Now I could have just taken a 'steal this code' approach and mixed
parts of the log4j dtd into a log4perl dtd, but that would be
cut-n-paste programming.  So I've used namespaces and
.IP "\(bu" 4
replaced three elements:
.RS 4
.IP "<log4perl:configuration>" 4
.IX Item "<log4perl:configuration>"
handles #1) and accepts <PatternLayout>
.IP "<log4perl:appender>" 4
.IX Item "<log4perl:appender>"
accepts <param\-nested> and <param\-text>
.IP "<log4perl:layout>" 4
.IX Item "<log4perl:layout>"
accepts custom cspecs for #3)
.RE
.RS 4
.RE
.IP "\(bu" 4
added a <param\-nested> element (complementing the <param> element)
    to handle #4)
.IP "\(bu" 4
added a root <PatternLayout> element to handle #2)
.IP "\(bu" 4
added <param\-text> which lets you put things like perl code
    into escaped \s-1CDATA\s0 between the tags, so you don't have to worry
    about escaping characters and quotes
.IP "\(bu" 4
added <cspec>
.PP
See the examples up in the \*(L"\s-1SYNOPSIS\s0\*(R" for how all that gets used.
.SH "WHY NAMESPACES"
.IX Header "WHY NAMESPACES"
I liked the idea of using the log4j \s-1DTD\s0 \fIin situ\fR, so I used namespaces
to extend it.  If you really don't like having to type <log4perl:appender>
instead of just <appender>, you can make your own \s-1DTD\s0 combining
the two DTDs and getting rid of the namespace prefixes.  Then you can
validate against that, and log4perl should accept it just fine.
.SH "VARIABLE SUBSTITUTION"
.IX Header "VARIABLE SUBSTITUTION"
This supports variable substitution like \f(CW\*(C`${foobar}\*(C'\fR in text and in 
attribute values except for appender-ref.  If an environment variable is defined
for that name, its value is substituted. So you can do stuff like
.PP
.Vb 2
\&        <param name="${hostname}" value="${hostnameval}.foo.com"/>
\&        <param\-text name="to">${currentsysadmin}@foo.com</param\-text>
.Ve
.SH "REQUIRES"
.IX Header "REQUIRES"
To use this module you need \s-1XML::DOM\s0 installed.
.PP
To use the log4perl.dtd, you'll have to reference it in your \s-1XML\s0 config,
and you'll also need to note that log4perl.dtd references the 
log4j dtd as \*(L"log4j\-1.2.dtd\*(R", so your validator needs to be able
to find that file as well.  If you don't like having to schlep two
files around, feel free
to dump the contents of \*(L"log4j\-1.2.dtd\*(R" into your \*(L"log4perl.dtd\*(R" file.
.SH "CAVEATS"
.IX Header "CAVEATS"
You can't mix a multiple param-nesteds with the same name, I'm going to
leave that for now, there's presently no need for a list of structs
in the config.
.SH "CHANGES"
.IX Header "CHANGES"
0.03 2/26/2003 Added support for log4perl extensions to the log4j dtd
.SH "SEE ALSO"
.IX Header "SEE ALSO"
t/038XML\-DOM1.t, t/039XML\-DOM2.t for examples
.PP
xml/log4perl.dtd, xml/log4j\-1.2.dtd
.PP
Log::Log4perl::Config
.PP
Log::Log4perl::Config::PropertyConfigurator
.PP
Log::Log4perl::Config::LDAPConfigurator (coming soon!)
.PP
The code is brazenly modeled on log4j's DOMConfigurator class, (by 
Christopher Taylor, Ceki GA\*~XlcA\*~X, and Anders Kristensen) and any
perceived similarity is not coincidental.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2002\-2009 by Mike Schilli <m@perlmeister.com> 
and Kevin Goess <cpan@goess.org>.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
