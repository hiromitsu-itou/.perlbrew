.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Catalyst::Plugin::Static::Simple 3"
.TH Catalyst::Plugin::Static::Simple 3 "2010-02-02" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::Plugin::Static::Simple \- Make serving static pages painless.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 9
\&    package MyApp;
\&    use Catalyst qw/ Static::Simple /;
\&    MyApp\->setup;
\&    # that\*(Aqs it; static content is automatically served by Catalyst
\&    # from the application\*(Aqs root directory, though you can configure
\&    # things or bypass Catalyst entirely in a production environment
\&    #
\&    # one caveat: the files must be served from an absolute path
\&    # (i.e. /images/foo.png)
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Static::Simple plugin is designed to make serving static content in
your application during development quick and easy, without requiring a
single line of code from you.
.PP
This plugin detects static files by looking at the file extension in the
\&\s-1URL\s0 (such as \fB.css\fR or \fB.png\fR or \fB.js\fR). The plugin uses the
lightweight MIME::Types module to map file extensions to
IANA-registered \s-1MIME\s0 types, and will serve your static files with the
correct \s-1MIME\s0 type directly to the browser, without being processed
through Catalyst.
.PP
Note that actions mapped to paths using periods (.) will still operate
properly.
.PP
If the plugin can not find the file, the request is dispatched to your
application instead. This means you are responsible for generating a
\&\f(CW404\fR error if your applicaton can not process the request:
.PP
.Vb 2
\&   # handled by static::simple, not dispatched to your application
\&   /images/exists.png
\&
\&   # static::simple will not find the file and let your application
\&   # handle the request. You are responsible for generating a file
\&   # or returning a 404 error
\&   /images/does_not_exist.png
.Ve
.PP
Though Static::Simple is designed to work out-of-the-box, you can tweak
the operation by adding various configuration options. In a production
environment, you will probably want to use your webserver to deliver
static content; for an example see \*(L"\s-1USING\s0 \s-1WITH\s0 \s-1APACHE\s0\*(R", below.
.SH "DEFAULT BEHAVIOR"
.IX Header "DEFAULT BEHAVIOR"
By default, Static::Simple will deliver all files having extensions
(that is, bits of text following a period (\f(CW\*(C`.\*(C'\fR)), \fIexcept\fR files
having the extensions \f(CW\*(C`tmpl\*(C'\fR, \f(CW\*(C`tt\*(C'\fR, \f(CW\*(C`tt2\*(C'\fR, \f(CW\*(C`html\*(C'\fR, and
\&\f(CW\*(C`xhtml\*(C'\fR. These files, and all files without extensions, will be
processed through Catalyst. If MIME::Types doesn't recognize an
extension, it will be served as \f(CW\*(C`text/plain\*(C'\fR.
.PP
To restate: files having the extensions \f(CW\*(C`tmpl\*(C'\fR, \f(CW\*(C`tt\*(C'\fR, \f(CW\*(C`tt2\*(C'\fR, \f(CW\*(C`html\*(C'\fR,
and \f(CW\*(C`xhtml\*(C'\fR \fIwill not\fR be served statically by default, they will be
processed by Catalyst. Thus if you want to use \f(CW\*(C`.html\*(C'\fR files from
within a Catalyst app as static files, you need to change the
configuration of Static::Simple. Note also that files having any other
extension \fIwill\fR be served statically, so if you're using any other
extension for template files, you should also change the configuration.
.PP
Logging of static files is turned off by default.
.SH "ADVANCED CONFIGURATION"
.IX Header "ADVANCED CONFIGURATION"
Configuration is completely optional and is specified within
\&\f(CW\*(C`MyApp\->config\->{static}\*(C'\fR.  If you use any of these options,
this module will probably feel less \*(L"simple\*(R" to you!
.SS "Enabling request logging"
.IX Subsection "Enabling request logging"
Since Catalyst 5.50, logging of static requests is turned off by
default; static requests tend to clutter the log output and rarely
reveal anything useful. However, if you want to enable logging of static
requests, you can do so by setting
\&\f(CW\*(C`MyApp\->config\->{static}\->{logging}\*(C'\fR to 1.
.SS "Forcing directories into static mode"
.IX Subsection "Forcing directories into static mode"
Define a list of top-level directories beneath your 'root' directory
that should always be served in static mode.  Regular expressions may be
specified using \f(CW\*(C`qr//\*(C'\fR.
.PP
.Vb 8
\&    MyApp\->config(
\&        static => {
\&            dirs => [
\&                \*(Aqstatic\*(Aq,
\&                qr/^(images|css)/,
\&            ],
\&        }
\&    );
.Ve
.SS "Including additional directories"
.IX Subsection "Including additional directories"
You may specify a list of directories in which to search for your static
files. The directories will be searched in order and will return the
first file found. Note that your root directory is \fBnot\fR automatically
added to the search path when you specify an \f(CW\*(C`include_path\*(C'\fR. You should
use \f(CW\*(C`MyApp\->config\->{root}\*(C'\fR to add it.
.PP
.Vb 9
\&    MyApp\->config(
\&        static => {
\&            include_path => [
\&                \*(Aq/path/to/overlay\*(Aq,
\&                \e&incpath_generator,
\&                MyApp\->config\->{root},
\&            ],
\&        },
\&    );
.Ve
.PP
With the above setting, a request for the file \f(CW\*(C`/images/logo.jpg\*(C'\fR will search
for the following files, returning the first one found:
.PP
.Vb 3
\&    /path/to/overlay/images/logo.jpg
\&    /dynamic/path/images/logo.jpg
\&    /your/app/home/root/images/logo.jpg
.Ve
.PP
The include path can contain a subroutine reference to dynamically return a
list of available directories.  This method will receive the \f(CW$c\fR object as a
parameter and should return a reference to a list of directories.  Errors can
be reported using \f(CW\*(C`die()\*(C'\fR.  This method will be called every time a file is
requested that appears to be a static file (i.e. it has an extension).
.PP
For example:
.PP
.Vb 2
\&    sub incpath_generator {
\&        my $c = shift;
\&
\&        if ( $c\->session\->{customer_dir} ) {
\&            return [ $c\->session\->{customer_dir} ];
\&        } else {
\&            die "No customer dir defined.";
\&        }
\&    }
.Ve
.SS "Ignoring certain types of files"
.IX Subsection "Ignoring certain types of files"
There are some file types you may not wish to serve as static files.
Most important in this category are your raw template files.  By
default, files with the extensions \f(CW\*(C`tmpl\*(C'\fR, \f(CW\*(C`tt\*(C'\fR, \f(CW\*(C`tt2\*(C'\fR, \f(CW\*(C`html\*(C'\fR, and
\&\f(CW\*(C`xhtml\*(C'\fR will be ignored by Static::Simple in the interest of security.
If you wish to define your own extensions to ignore, use the
\&\f(CW\*(C`ignore_extensions\*(C'\fR option:
.PP
.Vb 5
\&    MyApp\->config(
\&        static => {
\&            ignore_extensions => [ qw/html asp php/ ],
\&        },
\&    );
.Ve
.SS "Ignoring entire directories"
.IX Subsection "Ignoring entire directories"
To prevent an entire directory from being served statically, you can use
the \f(CW\*(C`ignore_dirs\*(C'\fR option.  This option contains a list of relative
directory paths to ignore.  If using \f(CW\*(C`include_path\*(C'\fR, the path will be
checked against every included path.
.PP
.Vb 5
\&    MyApp\->config(
\&        static => {
\&            ignore_dirs => [ qw/tmpl css/ ],
\&        },
\&    );
.Ve
.PP
For example, if combined with the above \f(CW\*(C`include_path\*(C'\fR setting, this
\&\f(CW\*(C`ignore_dirs\*(C'\fR value will ignore the following directories if they exist:
.PP
.Vb 6
\&    /path/to/overlay/tmpl
\&    /path/to/overlay/css
\&    /dynamic/path/tmpl
\&    /dynamic/path/css
\&    /your/app/home/root/tmpl
\&    /your/app/home/root/css
.Ve
.SS "Custom \s-1MIME\s0 types"
.IX Subsection "Custom MIME types"
To override or add to the default \s-1MIME\s0 types set by the MIME::Types
module, you may enter your own extension to \s-1MIME\s0 type mapping.
.PP
.Vb 8
\&    MyApp\->config(
\&        static => {
\&            mime_types => {
\&                jpg => \*(Aqimage/jpg\*(Aq,
\&                png => \*(Aqimage/png\*(Aq,
\&            },
\&        },
\&    );
.Ve
.SS "Compatibility with other plugins"
.IX Subsection "Compatibility with other plugins"
Since version 0.12, Static::Simple plays nice with other plugins.  It no
longer short-circuits the \f(CW\*(C`prepare_action\*(C'\fR stage as it was causing too
many compatibility issues with other plugins.
.SS "Debugging information"
.IX Subsection "Debugging information"
Enable additional debugging information printed in the Catalyst log.  This
is automatically enabled when running Catalyst in \-Debug mode.
.PP
.Vb 5
\&    MyApp\->config(
\&        static => {
\&            debug => 1,
\&        },
\&    );
.Ve
.SH "USING WITH APACHE"
.IX Header "USING WITH APACHE"
While Static::Simple will work just fine serving files through Catalyst
in mod_perl, for increased performance you may wish to have Apache
handle the serving of your static files directly. To do this, simply use
a dedicated directory for your static files and configure an Apache
Location block for that directory  This approach is recommended for
production installations.
.PP
.Vb 3
\&    <Location /myapp/static>
\&        SetHandler default\-handler
\&    </Location>
.Ve
.PP
Using this approach Apache will bypass any handling of these directories
through Catalyst. You can leave Static::Simple as part of your
application, and it will continue to function on a development server,
or using Catalyst's built-in server.
.PP
In practice, your Catalyst application is probably (i.e. should be)
structured in the recommended way (i.e., that generated by bootstrapping
the application with the \f(CW\*(C`catalyst.pl\*(C'\fR script, with a main directory
under which is a \f(CW\*(C`lib/\*(C'\fR directory for module files and a \f(CW\*(C`root/\*(C'\fR
directory for templates and static files). Thus, unless you break up
this structure when deploying your app by moving the static files to a
different location in your filesystem, you will need to use an Alias
directive in Apache to point to the right place. You will then need to
add a Directory block to give permission for Apache to serve these
files. The final configuration will look something like this:
.PP
.Vb 7
\&    Alias /myapp/static /filesystem/path/to/MyApp/root/static
\&    <Directory /filesystem/path/to/MyApp/root/static>
\&        allow from all
\&    </Directory>
\&    <Location /myapp/static>
\&        SetHandler default\-handler
\&    </Location>
.Ve
.PP
If you are running in a VirtualHost, you can just set the DocumentRoot
location to the location of your root directory; see
Catalyst::Engine::Apache2::MP20.
.SH "PUBLIC METHODS"
.IX Header "PUBLIC METHODS"
.ie n .SS "serve_static_file $file_path"
.el .SS "serve_static_file \f(CW$file_path\fP"
.IX Subsection "serve_static_file $file_path"
Will serve the file located in \f(CW$file_path\fR statically. This is useful when
you need to  autogenerate them if they don't exist, or they are stored in a model.
.PP
.Vb 1
\&    package MyApp::Controller::User;
\&
\&    sub curr_user_thumb : PathPart("my_thumbnail.png") {
\&        my ( $self, $c ) = @_;
\&        my $file_path = $c\->user\->picture_thumbnail_path;
\&        $c\->serve_static_file($file_path);
\&    }
.Ve
.SH "INTERNAL EXTENDED METHODS"
.IX Header "INTERNAL EXTENDED METHODS"
Static::Simple extends the following steps in the Catalyst process.
.SS "prepare_action"
.IX Subsection "prepare_action"
\&\f(CW\*(C`prepare_action\*(C'\fR is used to first check if the request path is a static
file.  If so, we skip all other \f(CW\*(C`prepare_action\*(C'\fR steps to improve
performance.
.SS "dispatch"
.IX Subsection "dispatch"
\&\f(CW\*(C`dispatch\*(C'\fR takes the file found during \f(CW\*(C`prepare_action\*(C'\fR and writes it
to the output.
.SS "finalize"
.IX Subsection "finalize"
\&\f(CW\*(C`finalize\*(C'\fR serves up final header information and displays any log
messages.
.SS "setup"
.IX Subsection "setup"
\&\f(CW\*(C`setup\*(C'\fR initializes all default values.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Catalyst, Catalyst::Plugin::Static,
http://www.iana.org/assignments/media\-types/ <http://www.iana.org/assignments/media-types/>
.SH "AUTHOR"
.IX Header "AUTHOR"
Andy Grundman, <andy@hybridized.org>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Marcus Ramberg, <mramberg@cpan.org>
.PP
Jesse Sheidlower, <jester@panix.com>
.PP
Guillermo Roditi, <groditi@cpan.org>
.PP
Florian Ragwitz, <rafl@debian.org>
.PP
Tomas Doran, <bobtfish@bobtfish.net>
.PP
Justin Wheeler (dnm)
.PP
Matt S Trout, <mst@shadowcat.co.uk>
.SH "THANKS"
.IX Header "THANKS"
The authors of Catalyst::Plugin::Static:
.PP
.Vb 3
\&    Sebastian Riedel
\&    Christian Hansen
\&    Marcus Ramberg
.Ve
.PP
For the include_path code from Template Toolkit:
.PP
.Vb 1
\&    Andy Wardley
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2005 \- 2009
the Catalyst::Plugin::Static::Simple \*(L"\s-1AUTHOR\s0\*(R" and \*(L"\s-1CONTRIBUTORS\s0\*(R"
as listed above.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software, you can redistribute it and/or modify it under
the same terms as Perl itself.
