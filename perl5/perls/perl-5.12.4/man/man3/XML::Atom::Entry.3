.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XML::Atom::Entry 3"
.TH XML::Atom::Entry 3 "2009-04-24" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::Atom::Entry \- Atom entry
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&    use XML::Atom::Entry;
\&    my $entry = XML::Atom::Entry\->new;
\&    $entry\->title(\*(AqMy Post\*(Aq);
\&    $entry\->content(\*(AqThe content of my post.\*(Aq);
\&    my $xml = $entry\->as_xml;
\&    my $dc = XML::Atom::Namespace\->new(dc => \*(Aqhttp://purl.org/dc/elements/1.1/\*(Aq);
\&    $entry\->set($dc, \*(Aqsubject\*(Aq, \*(AqFood & Drink\*(Aq);
.Ve
.SH "USAGE"
.IX Header "USAGE"
.ie n .SS "XML::Atom::Entry\->new([ $stream ])"
.el .SS "XML::Atom::Entry\->new([ \f(CW$stream\fP ])"
.IX Subsection "XML::Atom::Entry->new([ $stream ])"
Creates a new entry object, and if \fI\f(CI$stream\fI\fR is supplied, fills it with the
data specified by \fI\f(CI$stream\fI\fR.
.PP
Automatically handles autodiscovery if \fI\f(CI$stream\fI\fR is a \s-1URI\s0 (see below).
.PP
Returns the new \fIXML::Atom::Entry\fR object. On failure, returns \f(CW\*(C`undef\*(C'\fR.
.PP
\&\fI\f(CI$stream\fI\fR can be any one of the following:
.IP "\(bu" 4
Reference to a scalar
.Sp
This is treated as the \s-1XML\s0 body of the entry.
.IP "\(bu" 4
Scalar
.Sp
This is treated as the name of a file containing the entry \s-1XML\s0.
.IP "\(bu" 4
Filehandle
.Sp
This is treated as an open filehandle from which the entry \s-1XML\s0 can be read.
.ie n .SS "$entry\->content([ $content ])"
.el .SS "\f(CW$entry\fP\->content([ \f(CW$content\fP ])"
.IX Subsection "$entry->content([ $content ])"
Returns the content of the entry. If \fI\f(CI$content\fI\fR is given, sets the content
of the entry. Automatically handles all necessary escaping.
.ie n .SS "$entry\->author([ $author ])"
.el .SS "\f(CW$entry\fP\->author([ \f(CW$author\fP ])"
.IX Subsection "$entry->author([ $author ])"
Returns an \fIXML::Atom::Person\fR object representing the author of the entry,
or \f(CW\*(C`undef\*(C'\fR if there is no author information present.
.PP
If \fI\f(CI$author\fI\fR is supplied, it should be an \fIXML::Atom::Person\fR object
representing the author. For example:
.PP
.Vb 4
\&    my $author = XML::Atom::Person\->new;
\&    $author\->name(\*(AqFoo Bar\*(Aq);
\&    $author\->email(\*(Aqfoo@bar.com\*(Aq);
\&    $entry\->author($author);
.Ve
.ie n .SS "$entry\->link"
.el .SS "\f(CW$entry\fP\->link"
.IX Subsection "$entry->link"
If called in scalar context, returns an \fIXML::Atom::Link\fR object
corresponding to the first \fI<link>\fR tag found in the entry.
.PP
If called in list context, returns a list of \fIXML::Atom::Link\fR objects
corresponding to all of the \fI<link>\fR tags found in the entry.
.ie n .SS "$entry\->add_link($link)"
.el .SS "\f(CW$entry\fP\->add_link($link)"
.IX Subsection "$entry->add_link($link)"
Adds the link \fI\f(CI$link\fI\fR, which must be an \fIXML::Atom::Link\fR object, to
the entry as a new \fI<link>\fR tag. For example:
.PP
.Vb 5
\&    my $link = XML::Atom::Link\->new;
\&    $link\->type(\*(Aqtext/html\*(Aq);
\&    $link\->rel(\*(Aqalternate\*(Aq);
\&    $link\->href(\*(Aqhttp://www.example.com/2003/12/post.html\*(Aq);
\&    $entry\->add_link($link);
.Ve
.ie n .SS "$entry\->get($ns, $element)"
.el .SS "\f(CW$entry\fP\->get($ns, \f(CW$element\fP)"
.IX Subsection "$entry->get($ns, $element)"
Given an \fIXML::Atom::Namespace\fR element \fI\f(CI$ns\fI\fR and an element name
\&\fI\f(CI$element\fI\fR, retrieves the value for the element in that namespace.
.PP
This is useful for retrieving the value of elements not in the main Atom
namespace, like categories. For example:
.PP
.Vb 2
\&    my $dc = XML::Atom::Namespace\->new(dc => \*(Aqhttp://purl.org/dc/elements/1.1/\*(Aq);
\&    my $subj = $entry\->get($dc, \*(Aqsubject\*(Aq);
.Ve
.ie n .SS "$entry\->getlist($ns, $element)"
.el .SS "\f(CW$entry\fP\->getlist($ns, \f(CW$element\fP)"
.IX Subsection "$entry->getlist($ns, $element)"
Just like \fI\f(CI$entry\fI\->get\fR, but if there are multiple instances of the
element \fI\f(CI$element\fI\fR in the namespace \fI\f(CI$ns\fI\fR, returns all of them. \fIget\fR
will return only the first.
.SH "AUTHOR & COPYRIGHT"
.IX Header "AUTHOR & COPYRIGHT"
Please see the \fIXML::Atom\fR manpage for author, copyright, and license
information.
