.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Jcode::Nihongo 3"
.TH Jcode::Nihongo 3 "2005-02-19" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "XX"
.IX Header "XX"
Jcode \- \s-1XXXXXXXXXXX\s0
.SH "XX"
.IX Header "XX"
.Vb 6
\& use Jcode;
\& # 
\& # XXXXXX
\& Jcode::convert($str, $ocode, $icode, "z");
\& # XXXXXXXXXXXXXX
\& print Jcode\->new($str)\->h2z\->tr($from, $to)\->utf8;
.Ve
.SH "XX"
.IX Header "XX"
Jcode.pmXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
\&\s-1XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
.PP
.Vb 1
\&  $iso_2022_jp = Jcode\->new($str)\->h2z\->jis;
.Ve
.PP
\&\s-1XXXXXXXXXXXXXXX\s0
.PP
.Vb 2
\&  $iso_2022_jp = $str;
\&  &jcode::convert(\e$iso_2022_jp, \*(Aqjis\*(Aq, &jcode::getcode(\e$str), "z");
.Ve
.PP
XXXXXXXXXXXXXXXXXXXJcode.pmXXX\f(CW\*(C`getcode()\*(C'\fRX
\&\f(CW\*(C`convert()\*(C'\fR\s-1XXXXXXXXXXX\s0
.PP
PerlXXXXXXX5.8.1XXXXXJcodeXXPerl 5.8XXXXXXXXXXX
\&\s-1XXXXXXXXXXXX\s0Encode\s-1XXXXXXXXXXXXXXX\s0
.SH "XXXX"
.IX Header "XXXX"
XXXXXXXXXXXXXXXXXXXXXXXJcodeXXXXXXXXXXXX
.SS "\s-1XXXXXXX\s0"
.IX Subsection "XXXXXXX"
.ie n .IP "$j = Jcode\->new($str [, $icode])" 2
.el .IP "\f(CW$j\fR = Jcode\->new($str [, \f(CW$icode\fR])" 2
.IX Item "$j = Jcode->new($str [, $icode])"
\&\f(CW$strXXJcodeXXXXXX\fR$jXXXXXXXXXXX$icodeXXXXXXXXXX
\&\s-1XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
getcode\s-1XXXXXXXXXX\s0
.Sp
Perl 5.8.1XXXXX\f(CW$icode\fR\s-1XX\s0Encode\s-1XXXXXX\s0
\&\fI\s-1XXXXXXXXXXXX\s0\fR\s-1XXXXXX\s0
.Sp
.Vb 1
\&  $j = Jcode\->new($european, \*(Aqiso\-latin1\*(Aq);
.Ve
.Sp
\&\s-1XXXXXXXXXXXXXXXEUCXXXXXXXXXXXXXXXXXXX\s0
\&\f(CW\*(C`print $j\->euc\*(C'\fR\s-1XXXXXXXX\s0\f(CW\*(C`print $j\*(C'\fR\s-1XXXXXX\s0
.RS 2
.IP "\s-1XXXXXXXX\s0" 2
.IX Item "XXXXXXXX"
\&\s-1XXXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
.Sp
.Vb 1
\& Jcode\->new(\e$str);
.Ve
.Sp
XXXXXXXXXXXXXXXXXXXXXXXXX$strXXXXXXX
XXXXXXXXXXXX$strXjcodeXXXXXXX\*(L"tieXXX\*(R"\s-1XXXXX\s0
.RE
.RS 2
.RE
.ie n .IP "$j\->set($str [, $icode])" 2
.el .IP "\f(CW$j\fR\->set($str [, \f(CW$icode\fR])" 2
.IX Item "$j->set($str [, $icode])"
\&\f(CW$jXXXXXXX\fR$strXXXXXXXXXXXXJcodeXXXXXXXXXXXX
\&\s-1XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
.Sp
.Vb 6
\& # mailboxXSJISXXXXX
\& my $jconv = new Jcode;
\& $/ = 00;
\& while(<>){
\&     print $jconv\->set(\e$_)\->mime_decode\->sjis;
\& }
.Ve
.ie n .IP "$j\->append($str [, $icode]);" 2
.el .IP "\f(CW$j\fR\->append($str [, \f(CW$icode\fR]);" 2
.IX Item "$j->append($str [, $icode]);"
\&\f(CW$jXXXXXXX\fR$strXXXXXX
.ie n .IP "$j = jcode($str [, $icode]);" 2
.el .IP "\f(CW$j\fR = jcode($str [, \f(CW$icode\fR]);" 2
.IX Item "$j = jcode($str [, $icode]);"
Jcode\->\fInew()\fR \s-1XXXXXXXXXXXXXXXX\s0
.Sp
.Vb 1
\& $sjis = jcode($str)\->sjis;
.Ve
.SS "\s-1XXXXXXXXX\s0"
.IX Subsection "XXXXXXXXX"
XXXX$j\->\fIencoded\fR\s-1XXXXXX\s0\fIencoded\fR\s-1XXXXXXXXXXXXXX\s0
.ie n .IP "$sjis = $j\->sjis" 2
.el .IP "\f(CW$sjis\fR = \f(CW$j\fR\->sjis" 2
.IX Item "$sjis = $j->sjis"
.PD 0
.ie n .IP "$euc = $j\->euc" 2
.el .IP "\f(CW$euc\fR = \f(CW$j\fR\->euc" 2
.IX Item "$euc = $j->euc"
.ie n .IP "$jis = $j\->jis" 2
.el .IP "\f(CW$jis\fR = \f(CW$j\fR\->jis" 2
.IX Item "$jis = $j->jis"
.ie n .IP "$sjis = $j\->sjis" 2
.el .IP "\f(CW$sjis\fR = \f(CW$j\fR\->sjis" 2
.IX Item "$sjis = $j->sjis"
.ie n .IP "$ucs2 = $j\->ucs2" 2
.el .IP "\f(CW$ucs2\fR = \f(CW$j\fR\->ucs2" 2
.IX Item "$ucs2 = $j->ucs2"
.ie n .IP "$utf8 = $j\->utf8" 2
.el .IP "\f(CW$utf8\fR = \f(CW$j\fR\->utf8" 2
.IX Item "$utf8 = $j->utf8"
.PD
\&\s-1XXXXXXX\s0
\&\s-1WYCIWYG\s0 = What you code is what you get :)
.ie n .IP "$iso_2022_jp = $j\->iso_2022_jp" 2
.el .IP "\f(CW$iso_2022_jp\fR = \f(CW$j\fR\->iso_2022_jp" 2
.IX Item "$iso_2022_jp = $j->iso_2022_jp"
\&\f(CW\*(C`$j\->h2z\->jis\*(C'\fR\s-1XXXXXX\s0
\&\s-1XXXXXXXXXXXXXXXXXXX\s0
.Sp
Perl 5.8.1XXXXXEncodeXXXXXXXXXXXXXXXXXXXX
\&\s-1XXXXXXXXXXXXXXXXXX\s0
.Sp
.Vb 1
\&  $european = $j\->iso_latin1; # XXXXXXX\*(Aq\-\*(AqX\*(Aq_\*(AqXXXXXXX
.Ve
.Sp
\&\fB\s-1XX\s0\fRXEncode::Encoder\s-1XXXXXXXXXXXXXXXX\s0
.RS 2
.ie n .IP "$j\->fallback($fallback)" 2
.el .IP "\f(CW$j\fR\->fallback($fallback)" 2
.IX Item "$j->fallback($fallback)"
Perl 5.8.1XXXXXJcodeXXXXXXXXUTF\-8XXXXXXX
\&\fI\->encoding\fR\s-1XXXXXXXXXXX\s0'?'\s-1XXXXXXXXXXX\s0
\&\s-1XXX\s0Encode\s-1XXXXXXXXX\s0
.Sp
.Vb 2
\&  my $unistr = "\ex{262f}"; # XXXXX
\&  my $j = jcode($unistr);  # $j\->euc XXXX \*(Aq?\*(Aq X
.Ve
.Sp
\&\s-1XXXXXXXX\s0Encode\s-1XXXXXXXXXXXXXXXXXXXXXXXXX\s0
\&\s-1XX\s0Encode\s-1XXXXXXXXXXXXXXX\s0\f(CW\*(C`Jcode::FB_PERLQQ\*(C'\fRX
\&\f(CW\*(C`Jcode::FB_XMLCREF\*(C'\fRX\f(CW\*(C`Jcode::FB_HTMLCREF\*(C'\fRXEncode\s-1XXXXXX\s0
\&\s-1XXXXXXXXXXXXX\s0
.Sp
.Vb 3
\&  print $j\->fallback(Jcode::FB_PERLQQ)\->euc;   # \*(Aq\ex{262f}\*(Aq
\&  print $j\->fallback(Jcode::FB_XMLCREF)\->euc;  # \*(Aq&#x262f;\*(Aq
\&  print $j\->fallback(Jcode::FB_HTMLCREF)\->euc; # \*(Aq&#9775;\*(Aq
.Ve
.Sp
\&\s-1XXXXXXX\s0\f(CW$Jcode::FALLBACK\fR\s-1XXXXXXXXXXXXXXXXX\s0
\&\s-1XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
.Sp
.Vb 1
\&  $Jcode::FALLBACK = Jcode::FB_PERLQQ; # XXXXXXXXXXXXXXXXXXXX
.Ve
.RE
.RS 2
.RE
.ie n .IP "[@lines =] $jcode\->jfold([$width, $newline_str, $kref])" 2
.el .IP "[@lines =] \f(CW$jcode\fR\->jfold([$width, \f(CW$newline_str\fR, \f(CW$kref\fR])" 2
.IX Item "[@lines =] $jcode->jfold([$width, $newline_str, $kref])"
\&\f(CW$widthXXXXXXX72XXXjcodeXXXXXXXXXXXXXX\fR
\&\f(CW$widthXXXXXXXXXXXXXXXXX2XXXXXXXXXXXXX\fR
.Sp
\&\f(CW$newline_strXXXXXXX\fR\*(L"\en\*(R"\s-1XXXXXXXXXXXXXXXXXX\s0
\&\s-1XXXXXXXXXXXXXXXXXX\s0
.Sp
Perl 5.8.1XXX3XXXXX$krefXEUCXXXXXXXXXXXXXX
\&\s-1XXXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
.ie n .IP "$length = $jcode\->\fIjlength()\fR;" 2
.el .IP "\f(CW$length\fR = \f(CW$jcode\fR\->\fIjlength()\fR;" 2
.IX Item "$length = $jcode->jlength();"
\&\s-1XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
.SS "MIME::Base64XXXXXXX"
.IX Subsection "MIME::Base64XXXXXXX"
\&\s-1XXXXXXXXXXXXX\s0MIME::Base64\s-1XXXXXXXXXXXXXXXX\s0
.PP
.Vb 1
\&   perl \-MCPAN \-e \*(AqCPAN::Shell\->install("MIME::Base64")\*(Aq
.Ve
.PP
XXXXXXXXXPerlX5.6XXXXXXXXMIME::Base64X
\&\s-1XXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
.ie n .IP "$mime_header = $j\->mime_encode([$lf, $bpl])" 2
.el .IP "\f(CW$mime_header\fR = \f(CW$j\fR\->mime_encode([$lf, \f(CW$bpl\fR])" 2
.IX Item "$mime_header = $j->mime_encode([$lf, $bpl])"
\&\f(CW$strXRFC1522XXXMIME\fR\-HeaderXXXXXXX$lfXXXXXXX
XXXXXXX$lfXXXXXXXXXXXXX\enXX
\&\f(CW$bplXXXXXXXXXXXXXXXX\fR$bplXXXXXXXXXXXXX76X
\&\s-1XXXXX76XXXXXXXXXXXXXX\s0
.Sp
Perl 5.8.1XXXXXXXXXXXXXXMIME HeaderXXXXXXXXXXX
.Sp
.Vb 1
\&  $mime_header = $j\->MIME_Header;
.Ve
.Sp
\&\s-1XXXX\s0\f(CW$mime_header\fRXXXXXMIME-B-encoded \s-1UTF\-8XXXXXX\s0
\&\s-1XXX\s0\f(CW\*(C`$j\->mime_encode()\*(C'\fRXMIME-B-encoded \s-1ISO\-2022\-JPXXXXXX\s0
\&\s-1XXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
.ie n .IP "$j\->mime_decode;" 2
.el .IP "\f(CW$j\fR\->mime_decode;" 2
.IX Item "$j->mime_decode;"
JcodeXXXXXXXXXXXXXMIME-HeaderXXXXXXXXPerl 5.8.1
\&\s-1XXXXXXXXXXXXXXXXXXXXXXX\s0
.Sp
.Vb 1
\&  Jcode\->new($str, \*(AqMIME\-Header\*(Aq);
.Ve
.Sp
\&\s-1XXXXXXXISO\-2022\-JPXXXXXXUTF\-8XXXXXXXXXXX\s0
\&\s-1XXXMIME\s0 B EncodingXXXXXMIME Q EncodingXXXXXXXX
XXXPerl 5.8.1XXXXXXXXXXXXXXXXXXX
.SS "\s-1XX\s0 \s-1XX\s0 \s-1XX\s0"
.IX Subsection "XX XX XX"
.ie n .IP "$j\->h2z([$keep_dakuten])" 2
.el .IP "\f(CW$j\fR\->h2z([$keep_dakuten])" 2
.IX Item "$j->h2z([$keep_dakuten])"
X201XXXXXXXX208XXXXXXXXXXXXX
\&\f(CW$keep_dakutenXXXXXXXXXXXXXXXXXXXXXX\fR
(\s-1XXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
\&\s-1XXXXXXXXXX\s0)
.Sp
\&\f(CW$j\fR\->nmatchXXXXXXXXXXXXXXXXXX
.ie n .IP "$j\->z2h" 2
.el .IP "\f(CW$j\fR\->z2h" 2
.IX Item "$j->z2h"
X208XXXXXXXX201XXXXXXXXXXXXX
.Sp
\&\f(CW$j\fR\->nmatchXXXXXXXXXXXXXXXXXX
.SS "\s-1XXXXXXXXXX\s0"
.IX Subsection "XXXXXXXXXX"
\&\f(CW\*(C`\->m()\*(C'\fRX\f(CW\*(C`\->s()\*(C'\fRXXXXXXPerl 5.8.1XXX
\&\s-1XXXXX\s0
.ie n .IP "$j\->tr($from, $to, $opt);" 2
.el .IP "\f(CW$j\fR\->tr($from, \f(CW$to\fR, \f(CW$opt\fR);" 2
.IX Item "$j->tr($from, $to, $opt);"
JcodeXXXXXXX\f(CW\*(C`tr/$from/$to/\*(C'\fRXXXXXXX$fromX$toX
EUC-JPXXXXXXXPerl 5.8.1XXXXXflagXXXUTF\-8XXX
\&\s-1XXXXXXXX\s0
.Sp
\&\f(CW$opt\fR\s-1XXXXXXXX\s0\f(CW\*(C`tr/$from/$to/$opt\*(C'\fR\s-1XXXXXXXX\s0\f(CW$opt\fRX
\&'c'X'd'\s-1XXXXXXXXXXXXXXXXXXXXXXXX\s0
.Sp
\&\f(CW$j\fR\->nmatchXXXXXXXXXXXXXXXXXX
.Sp
Perl 5.8.1XXXXXtrXXXXXXXXXXXXX\->error_trXXXXX
$@XXXXXXXX
.Sp
XXXXXXXXPerl 5.8.1XXXXXXXXXXXX
.ie n .IP "$j\->s($patter, $replace, $opt);" 2
.el .IP "\f(CW$j\fR\->s($patter, \f(CW$replace\fR, \f(CW$opt\fR);" 2
.IX Item "$j->s($patter, $replace, $opt);"
\&\s-1XXX\s0\f(CW\*(C`s/$pattern/$replace/$opt\*(C'\fR\s-1XXXXXXX\s0\f(CW$opt\fR\s-1XXXXXXXXXXX\s0
\&\s-1XXXXXXXXXXXXXXXXXXXX\s0perlre\s-1XXXXXXXX\s0
.Sp
\&\f(CW\*(C`$j\->tr()\*(C'\fRX\f(CW\*(C`$j\->s()\*(C'\fR\s-1XXXXXXXXXXXXXXXXX\s0
\&\s-1XXXXXXXXXXXXXXXX\s0
.Sp
.Vb 1
\&  $j\->tr("A\-Z", "a\-z")\->s("foo", "bar");
.Ve
.ie n .IP "[@match = ] $j\->m($pattern, $opt);" 2
.el .IP "[@match = ] \f(CW$j\fR\->m($pattern, \f(CW$opt\fR);" 2
.IX Item "[@match = ] $j->m($pattern, $opt);"
\&\f(CW\*(C`m/$patter/$opt\*(C'\fR\s-1XXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
\&\s-1XXX\s0\f(CW\*(C`$j\->s()\*(C'\fR\s-1XXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
.Sp
\&\s-1XXXXXXXXXXXXXXXXX\-\s0>error_mX\->error_sXXXX
$@XXXXXXXX
.SS "\s-1XXXXXXXX\s0"
.IX Subsection "XXXXXXXX"
XXJcodeXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
\&\s-1XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXOOP\s0
\&\s-1XXXX\s0
.PP
XXXXXXJcodeXXXXXXXXXXXXXXXXXXXXXXXXXXXX
\&\s-1XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
\&\s-1XXXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0 \s-1XXXX\s0
\&\s-1XXXXXXXXXOOPXXXXXX\s0
.PP
Perl 5.8.1XXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXJcodeXXXXXXXXXXXXXXXXX
.ie n .IP "$j\->r_str" 2
.el .IP "\f(CW$j\fR\->r_str" 2
.IX Item "$j->r_str"
\&\s-1EUCXXXXXXXXXXXX\s0
.Sp
Perl 5.8.1XXXXUTF\-8XXXXXXXUTF\-8XXXXXXXXXXXXXX
.ie n .IP "$j\->icode" 2
.el .IP "\f(CW$j\fR\->icode" 2
.IX Item "$j->icode"
\&\s-1XXXXXXXXXXXXXXXXX\s0
.ie n .IP "$j\->nmatch" 2
.el .IP "\f(CW$j\fR\->nmatch" 2
.IX Item "$j->nmatch"
XXXXXXX$j\->trXXXXXXXXX
.SH "XXXXXX"
.IX Header "XXXXXX"
.IP "($code, [$nmatch]) = getcode($str)" 2
.IX Item "($code, [$nmatch]) = getcode($str)"
\&\f(CW$strXXXXXXXXXXXXXXXXXXXXXXXXXX\fR
.Sp
.Vb 7
\& ascii   Ascii XXXXXXXXXXXXX
\& binary  Binary XXXXXXXXXXXXXX
\& euc     EUC\-JP
\& sjis    SHIFT_JIS
\& jis     JIS (ISO\-2022\-JP)
\& ucs2    UCS2 (Raw Unicode)
\& utf8    UTF8
.Ve
.Sp
\&\s-1XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
XXXXXXXXXXXXXXXXXXXXXXXXXXXX$strX\e$str
\&\s-1XXXXXXXX\s0
.Sp
\&\fBjcode.pl \s-1XXXXXXX\s0\fR \fIXXXXXjcode::getcode()\fRX100%XXXXX
XXXXXXXXXXXX100%X
.Sp
.Vb 2
\& * XXXXXXXXXXXXXXXXXXXXXX
\&   jcode::getcode()X$nmatchXXXXXXXXX
\&
\& * jcode::getcode()XXEUCXXXSJISXXXXXXXXXXX\*(Aqundef\*(AqX
\&   XXXXX Jcode::getcode()XEUCXXXXXXXXXJcode.pmXX
\&   XXXXXXXXXX
.Ve
.ie n .IP "Jcode::convert($str, [$ocode, $icode, $opt])" 2
.el .IP "Jcode::convert($str, [$ocode, \f(CW$icode\fR, \f(CW$opt\fR])" 2
.IX Item "Jcode::convert($str, [$ocode, $icode, $opt])"
\&\f(CW$strX\fR$ocodeXXXXXXXXXXXXXXXXX$icodeXXXXXXX
\&\fIXXXXXXgetcode()\fRXXXXXXXXXXXX$icodeXXXXXXX
XXXXXXXXXXX$strX\e$strXXXXXXXX
.Sp
\&\fBjcode.pl \s-1XXXXXXX\s0\fR \fIXXXXXjcode::convert()\fRX100%XXXXX
\&\s-1XXXXX\s0
.SH "XX"
.IX Header "XX"
PerlX5.8.1XXXXXXJcodeXEncode\s-1XXXXXXXXXXXXXXX\s0
XXXXJcodeXEncodeXXXXXXXXXXXXX
.SH "XX"
.IX Header "XX"
\&\s-1XXXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
\&\s-1XX\s0 \s-1XX\s0 <utashiro@iij.ad.jp>XXPerl4XXXXXjcode.plXXXXXXXX
.PP
\&\s-1XX\s0 \s-1XX\s0 <ohzaki@iod.ricoh.co.jp>\s-1XXXXXXXXXXXXXXXX\s0
\&\s-1XXXXXXXXXXXXXXXXXXXXXX\s0
.PP
makamaka@donzoko.net X JEncode XXXJcodeXEncodeXXXXXXXXX
\&\s-1XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
\&\s-1XXXXXXXX\s0
.PP
XXXJcode \s-1ML\s0 <jcode5@ring.gr.jp>\s-1XXXXXXXXXXXXXX\s0
\&\s-1XXXXXXXXXXXXXXXXXX\s0
.SH "XX"
.IX Header "XX"
Encode
.PP
http://www.iana.org/assignments/character\-sets <http://www.iana.org/assignments/character-sets>
.SH "XXX"
.IX Header "XXX"
Copyright 1999\-2005 Dan Kogai <dankogai@dan.co.jp>
.PP
This library is free software; you can redistribute it
and/or modify it under the same terms as Perl itself.
