.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Email::Send::SMTP 3"
.TH Email::Send::SMTP 3 "2009-07-13" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Email::Send::SMTP \- Send Messages using SMTP
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Email::Send;
\&
\&  my $mailer = Email::Send\->new({mailer => \*(AqSMTP\*(Aq});
\&  
\&  $mailer\->mailer_args([Host => \*(Aqsmtp.example.com:465\*(Aq, ssl => 1])
\&    if $USE_SSL;
\&  
\&  $mailer\->send($message);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This mailer for \f(CW\*(C`Email::Send\*(C'\fR uses \f(CW\*(C`Net::SMTP\*(C'\fR to send a message with
an \s-1SMTP\s0 server. The first invocation of \f(CW\*(C`send\*(C'\fR requires an \s-1SMTP\s0 server
arguments. Subsequent calls will remember the the first setting until
it is reset.
.PP
Any arguments passed to \f(CW\*(C`send\*(C'\fR will be passed to \f(CW\*(C`Net::SMTP\->new()\*(C'\fR,
with some exceptions. \f(CW\*(C`username\*(C'\fR and \f(CW\*(C`password\*(C'\fR, if passed, are
used to invoke \f(CW\*(C`Net::SMTP\->auth()\*(C'\fR for \s-1SASL\s0 authentication support.
\&\f(CW\*(C`ssl\*(C'\fR, if set to true, turns on \s-1SSL\s0 support by using \f(CW\*(C`Net::SMTP::SSL\*(C'\fR.
.PP
\&\s-1SMTP\s0 can fail for a number of reasons. All return values from this
package are true or false. If false, sending has failed. If true,
send succeeded. The return values are \f(CW\*(C`Return::Value\*(C'\fR objects, however,
and contain more information on just what went wrong.
.PP
Here is an example of dealing with failure.
.PP
.Vb 1
\&  my $return = send SMTP => $message, \*(Aqlocalhost\*(Aq;
\&  
\&  die "$return" if ! $return;
.Ve
.PP
The stringified version of the return value will have the text of the
error. In a conditional, a failure will evaluate to false.
.PP
Here's an example of dealing with success. It is the case that some
email addresses may not succeed but others will. In this case, the
return value's \f(CW\*(C`bad\*(C'\fR property is set to a list of bad addresses.
.PP
.Vb 1
\&  my $return = send SMTP => $message, \*(Aqlocalhost\*(Aq;
\&
\&  if ( $return ) {
\&      my @bad = @{ $return\->prop(\*(Aqbad\*(Aq) };
\&      warn "Failed to send to: " . join \*(Aq, \*(Aq, @bad
\&        if @bad;
\&  }
.Ve
.PP
For more information on these return values, see Return::Value.
.SS "\s-1ENVELOPE\s0 \s-1GENERATION\s0"
.IX Subsection "ENVELOPE GENERATION"
The envelope sender and recipients are, by default, generated by looking at the
From, To, Cc, and Bcc headers.  This behavior can be modified by replacing the
\&\f(CW\*(C`get_env_sender\*(C'\fR and \f(CW\*(C`get_env_recipients\*(C'\fR methods, both of which receive the
Email::Simple object and their only parameter, and return email addresses.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Email::Send,
Net::SMTP,
Net::SMTP::SSL,
Email::Address,
Return::Value,
perl.
.SH "AUTHOR"
.IX Header "AUTHOR"
Current maintainer: Ricardo \s-1SIGNES\s0, <\fIrjbs@cpan.org\fR>.
.PP
Original author: Casey West, <\fIcasey@geeknest.com\fR>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
.Vb 3
\&  Copyright (c) 2004 Casey West.  All rights reserved.
\&  This module is free software; you can redistribute it and/or modify it
\&  under the same terms as Perl itself.
.Ve
