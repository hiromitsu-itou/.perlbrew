.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Imager::Preprocess 3"
.TH Imager::Preprocess 3 "2011-06-06" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Imager::Preprocess \- simple preprocessor for handling multiple sample sizes
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  /* in the source: */
\&  #code condition true to work with 8\-bit samples
\&  ... code using preprocessor types/values ...
\&  #/code
\&
\&  # process and make #line directives
\&  perl \-MImager::Preprocess \-epreprocess foo.im foo.c
\&
\&  # process and no #line directives
\&  perl \-MImager::Preprocess \-epreprocess \-l foo.im foo.c
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a simple preprocessor that aims to reduce duplication of
source code when implementing an algorithm both for 8\-bit samples and
double samples in Imager.
.PP
Imager's \f(CW\*(C`Makefile.PL\*(C'\fR currently scans the \fI\s-1MANIFEST\s0\fR for \fI.im\fR
files and adds Makefile files to convert these to \fI.c\fR files.
.PP
The beginning of a sample-independent section of code is preceded by:
.PP
.Vb 1
\&  #code expression
.Ve
.PP
where \fIexpression\fR should return true if processing should be done at
8\-bits/sample.
.PP
You can also use a #code block around a function definition to produce
8\-bit and double sample versions of a function.  In this case #code
has no expression and you will need to use \s-1\fIIM_SUFFIX\s0()\fR to produce
different function names.
.PP
The end of a sample-independent section of code is terminated by:
.PP
.Vb 1
\&  #/code
.Ve
.PP
#code sections cannot be nested.
.PP
#/code without a starting #code is an error.
.PP
The following types and values are defined in a #code section:
.IP "\(bu" 4
\&\s-1IM_GPIX\s0(\f(CW\*(C`im\*(C'\fR, \f(CW\*(C`x\*(C'\fR, \f(CW\*(C`y\*(C'\fR, \f(CW&col\fR)
.IP "\(bu" 4
\&\s-1IM_GLIN\s0(\f(CW\*(C`im\*(C'\fR, \f(CW\*(C`l\*(C'\fR, \f(CW\*(C`r\*(C'\fR, \f(CW\*(C`y\*(C'\fR, \f(CW\*(C`colors\*(C'\fR)
.IP "\(bu" 4
\&\s-1IM_PPIX\s0(\f(CW\*(C`im\*(C'\fR, \f(CW\*(C`x\*(C'\fR, \f(CW\*(C`y\*(C'\fR, \f(CW&col\fR)
.IP "\(bu" 4
\&\s-1IM_PLIN\s0(\f(CW\*(C`im\*(C'\fR, \f(CW\*(C`x\*(C'\fR, \f(CW\*(C`y\*(C'\fR, \f(CW\*(C`colors\*(C'\fR)
.IP "\(bu" 4
\&\s-1IM_GSAMP\s0(\f(CW\*(C`im\*(C'\fR, \f(CW\*(C`l\*(C'\fR, \f(CW\*(C`r\*(C'\fR, \f(CW\*(C`y\*(C'\fR, \f(CW\*(C`samples\*(C'\fR, \f(CW\*(C`chans\*(C'\fR, \f(CW\*(C`chan_count\*(C'\fR)
.Sp
These correspond to the appropriate image function, eg. \s-1\fIIM_GPIX\s0()\fR
becomes \fIi_gpix()\fR or \fIi_gpixf()\fR as appropriate.
.IP "\(bu" 4
\&\s-1IM_ADAPT_COLORS\s0(\f(CW\*(C`dest_channels\*(C'\fR, \f(CW\*(C`src_channels\*(C'\fR, \f(CW\*(C`colors\*(C'\fR, \f(CW\*(C`count\*(C'\fR)
.Sp
Call \fIi_adapt_colors()\fR or \fIi_adapt_fcolors()\fR.
.IP "\(bu" 4
\&\s-1IM_FILL_COMBINE\s0(\f(CW\*(C`fill\*(C'\fR) \- retrieve the combine function from a fill
object.
.IP "\(bu" 4
\&\s-1IM_FILL_FILLER\s0(\f(CW\*(C`fill\*(C'\fR) \- retrieve the fill_with_* function from a fill
object.
.IP "\(bu" 4
\&\s-1IM_SAMPLE_MAX\s0 \- maximum value for a sample
.IP "\(bu" 4
\&\s-1IM_SAMPLE_MAX2\s0 \- maximum value for a sample, squared
.IP "\(bu" 4
\&\s-1IM_SAMPLE_T\s0 \- type of a sample (i_sample_t or i_fsample_t)
.IP "\(bu" 4
\&\s-1IM_COLOR\s0 \- color type, either i_color or i_fcolor.
.IP "\(bu" 4
\&\s-1IM_WORK_T\s0 \- working sample type, either int or double.
.IP "\(bu" 4
IM_Sf \- format string for the sample type, \f(CW"%d"\fR or \f(CW"%f"\fR.
.IP "\(bu" 4
IM_Wf \- format string for the work type, \f(CW"%d"\fR or \f(CW"%f"\fR.
.IP "\(bu" 4
\&\s-1IM_SUFFIX\s0(identifier) \- adds _8 or _double onto the end of identifier.
.IP "\(bu" 4
\&\s-1IM_EIGHT_BIT\s0 \- this is a macro defined only in 8\-bit/sample code.
.PP
Other types, functions and values may be added in the future.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tony Cook <tonyc@cpan.org>
