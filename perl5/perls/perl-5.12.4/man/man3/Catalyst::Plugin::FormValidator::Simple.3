.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Catalyst::Plugin::FormValidator::Simple 3"
.TH Catalyst::Plugin::FormValidator::Simple 3 "2010-07-14" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::Plugin::FormValidator::Simple \- Validator for Catalyst with FormValidator::Simple
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Catalyst qw/FormValidator::Simple FillInForm/;
\&
\&    # set option
\&    MyApp\->config\->{validator} = {
\&        plugins => [\*(AqCreditCard\*(Aq, \*(AqJapanese\*(Aq],
\&        options => { charset => \*(Aqeuc\*(Aq},
\&    }
.Ve
.PP
in your controller
.PP
.Vb 1
\&    sub defaulti : Private {
\&
\&        my ($self, $c) = @_;
\&
\&        $c\->form(
\&            param1 => [qw/NOT_BLANK ASCII/, [qw/LENGTH 4 10/]],
\&            param2 => [qw/NOT_BLANK/, [qw/JLENGTH 4 10/]],
\&            mail1  => [qw/NOT_BLANK EMAIL_LOOSE/],
\&            mail2  => [qw/NOT_BLANK EMAIL_LOOSE/],
\&            { mail => [qw/mail1 mail2/] } => [\*(AqDUPLICATION\*(Aq],
\&        );
\&
\&        print $c\->form\->valid(\*(Aqparam1\*(Aq);
\&
\&        if ( some condition... ) {
\&
\&            $c\->form(
\&                other_param => [qw/NOT_INT/],
\&            );
\&        }
\&
\&        if ( some condition... ) {
\&
\&            # set your original invalid type.
\&            $c\->set_invalid_form( param3 => \*(AqMY_ERROR\*(Aq );
\&
\&        }
\&
\&        if ( $c\->form\->has_error ) {
\&            
\&            if ( $c\->form\->missing(\*(Aqparam1\*(Aq) ) {
\&                ...
\&            }
\&
\&            if ( $c\->form\->invalid( param1 => \*(AqASCII\*(Aq ) ) {
\&                ...
\&            }
\&
\&            if ( $c\->form\->invalid( param3 => \*(AqMY_ERROR\*(Aq ) ) {
\&                ...
\&            }
\&
\&        }
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This plugin allows you to validate request parameters with FormValidator::Simple.
See FormValidator::Simple for more information.
.PP
This behaves like as Catalyst::Plugin::FormValidator.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
set config with 'validator' key.
.PP
.Vb 1
\&    MyApp\->config\->{validator} = { ... };
.Ve
.PP
or
.PP
.Vb 3
\&    MyApp\->config(
\&        validator => { ... },
\&    );
.Ve
.SS "\s-1PLUGINS\s0"
.IX Subsection "PLUGINS"
If you want to use some plugins for FormValidator::Simple, you can set like following.
.PP
.Vb 5
\&    MyApp\->config(
\&        validator => {
\&            plugins => [qw/Japanese CreditCard DBIC::Unique/],
\&        },
\&    );
.Ve
.PP
In this example, FormValidator::Simple::Plugin::Japanese, FormValidator::Simple::Plugin::CreditCard,
and FormValidator::Simple::Plugin::DBIC::Unique are loaded.
.SS "\s-1OPTIONS\s0"
.IX Subsection "OPTIONS"
When you set some options needed by specific validations, do like this.
.PP
.Vb 9
\&    MyApp\->config(
\&        validator => {
\&            plugins => [qw/Japanese CreditCard DBIC::Unique/],
\&            options => {
\&                charset => \*(Aqeuc\*(Aq,
\&                dbic_base_class => \*(AqMyApp::Model::DBIC\*(Aq,
\&            },
\&        },
\&    );
.Ve
.PP
\&'charset' is necessary for Plugin::Japanese, and 'dbic_cbase_class' is used in Plugin::DBIC::Unique.
.SH "VALIDATION"
.IX Header "VALIDATION"
use 'form' method, see FormValidator::Simple in detail.
.PP
.Vb 2
\&    sub do_add : Local {
\&        my ( $self, $c ) = @_;
\&
\&        # execute validation.
\&        $c\->form(
\&            name  => [qw/NOT_BLANK ASCII/,       [qw/LENGTH 0 20/] ],
\&            email => [qw/NOT_BLANK EMAIL_LOOSE/, [qw/LENGTH 0 20/] ],
\&            { unique => [qw/name email/] } => [qw/DBIC_UNIQUE User name email/],
\&        );
\&
\&        if ( ... ) {
\&
\&            # execute validation one more time in specific condition.
\&            $c\->form(
\&                ...                 
\&            );
\&
\&        }
\&
\&        # See Catalyst::Plugin::RequestToken for \*(Aq$c\->validate_token\*(Aq
\&        if ( $c\->validate_token ) {
\&
\&            # you can force to set invalid data.
\&            $c\->set_invalid_form( token => \*(AqTOKEN\*(Aq );
\&
\&        }
\&
\&        # check result.
\&        # you can pick up result\-object with \*(Aqform\*(Aq method
\&
\&        my $result = $c\->form;
\&
\&        if ( $result\->has_error ) {
\&
\&        # this is same as
\&        # if ( $result\->has_missing or $result\->has_invalid )
\&
\&            $c\->detach(\*(Aqadd\*(Aq);
\&
\&        }
\&
\&    }
.Ve
.SH "HANDLING SUCCESSFUL RESULT"
.IX Header "HANDLING SUCCESSFUL RESULT"
After it passes all validations, you may wanna put input-data into database.
It's a elegant way to use [ Class::DBI and Class::DBI::FromForm ] or [ DBIx::Class and DBIx::Class::WebForm ].
.PP
.Vb 2
\&    sub do_add : Local {
\&        my ( $self, $c ) = @_;
\&
\&        $c\->form(
\&            name  => [qw/NOT_BLANK/],
\&            email => [qw/NOT_BLANK/],
\&        );
\&
\&        my $result = $c\->form;
\&        if ( $result\->has_error ) {
\&            $c\->detach(\*(Aqadd\*(Aq);
\&        }
\&
\&        my $user = MyProj::Model::DBIC::User\->create_from_form($result);
\&        
\&        # this behaves like this...
\&        # MyProj::Model::DBIC::User\->create({
\&        #    name  => $result\->valid(\*(Aqname\*(Aq),
\&        #    email => $result\->valid(\*(Aqemail\*(Aq),
\&        # });
\&        #
\&        # if the key exists as the table\*(Aqs column, set the value with \*(Aqvalid\*(Aq
\&    }
.Ve
.PP
Here, I explain about 'valid' method. If the value indicated with key-name passes validations,
You can get the data with 'valid',
.PP
.Vb 4
\&    my $result = $c\->form(
\&        name  => [qw/NOT_BLANK/],
\&        email => [qw/NOT_BLANK/],
\&    ); 
\&
\&    print $result\->valid(\*(Aqname\*(Aq);
\&
\&    print $result\->valid(\*(Aqemail\*(Aq);
.Ve
.PP
But, this is for only single key validation normally.
.PP
.Vb 4
\&    my $result = $c\->form(
\&        name => [qw/NOT_BLANK/], # single key validation
\&        { mail_dup => [qw/email email2/] } => [\*(AqDUPLICATION\*(Aq] # multiple keys one
\&    );
\&
\&    print $result\->valid(\*(Aqname\*(Aq); # print out the value of \*(Aqname\*(Aq
\&
\&    print $result\->valid(\*(Aqmail_dup\*(Aq); # no value.
.Ve
.PP
There are exceptions. These are '\s-1DATETIME\s0', '\s-1DATE\s0'.
.PP
.Vb 5
\&    my $result = $c\->form(
\&        { created_on => [qw/created_year created_month created_day/] }
\&        =>
\&        [qw/DATETIME/],
\&    );
\&
\&    print $result\->valid(\*(Aqcreated_on\*(Aq); #print out datetime string like "2005\-11\-23 00:00:00".
.Ve
.PP
If you set some class around datetime in configuration. It returns object of the class you indicate.
You can choose from Time::Piece and DateTime. For example...
.PP
.Vb 8
\&    MyApp\->config(
\&        validator => {
\&            plugins => [...],
\&            options => {
\&                datetime_class => \*(AqTime::Piece\*(Aq,
\&            },
\&        },
\&    );
.Ve
.PP
or
.PP
.Vb 9
\&    MyApp\->config(
\&        validator => {
\&            plugins => [...],
\&            options => {
\&                datetime_class => \*(AqDateTime\*(Aq,
\&                time_zone      => \*(AqAsia/Tokyo\*(Aq,
\&            },
\&        },
\&    );
.Ve
.PP
then
.PP
.Vb 5
\&    my $result = $c\->form(
\&        { created_on => [qw/created_year created_month created_day/] }
\&        =>
\&        [qw/DATETIME/],
\&    );
\&
\&    my $dt = $result\->valid(\*(Aqcreated_on\*(Aq);
\&
\&    print $dt\->ymd;
\&
\&    MyProj::Model::CDBI::User\->create_from_form($result);
.Ve
.PP
This may be useful when you define 'has_a' relation for datetime columns.
For example, in your table class inherits 'Class::DBI'
.PP
.Vb 4
\&    _\|_PACKAGE_\|_\->has_a( created_on => \*(AqDateTime\*(Aq,
\&        inflate => ...,
\&        deflate => ...,
\&    );
.Ve
.PP
And see also Class::DBI::Plugin::TimePiece, Class::DBI::Plugin::DateTime.
.SH "MESSAGE HANDLING"
.IX Header "MESSAGE HANDLING"
in template file, you can handle it in detail.
.PP
.Vb 10
\&    [% IF c.form.has_error %]
\&    <p>Input Error</p>
\&    <ul>
\&    [% IF c.form.missing(\*(Aqname\*(Aq) %]
\&    <li>input name!</li>
\&    [% END %]
\&    [% IF c.form.invalid(\*(Aqname\*(Aq) %]
\&    <li>name is wrong</li>
\&    [% END %]
\&    [% IF c.form.invalid(\*(Aqname\*(Aq, \*(AqASCII\*(Aq) %]
\&    <li>input name with ascii code.</li>
\&    [% END %]
\&    [% IF c.form.invalid(\*(Aqname\*(Aq, \*(AqLENGTH\*(Aq) %]
\&    <li>wrong length for name.</li>
\&    [% END %]
\&    </ul>
\&    [% END %]
.Ve
.PP
or, make it more easy.
.PP
.Vb 10
\&    [% IF c.form.has_error %]
\&    <p>Input Error</p>
\&    <ul>
\&    [% FOREACH key IN c.form.error %]
\&        [% FOREACH type IN c.form.error(key) %]
\&        <li>Invalid: [% key %] \- [% type %]</li>
\&        [% END %]
\&    [% END %]
\&    </li>
\&    [% END %]
.Ve
.PP
And you can also use messages configuration as hash reference.
.PP
.Vb 10
\&    MyApp\->config(
\&        validator => {
\&            plugins  => [...],
\&            messages => {
\&                user => {
\&                    name => {
\&                        NOT_BLANK => \*(AqInput name!\*(Aq,
\&                        ASCII     => \*(AqInput name with ascii code!\*(Aq,
\&                    },
\&                    email => {
\&                        DEFAULT   => \*(Aqemail is wrong.!\*(Aq,
\&                        NOT_BLANK => \*(Aqinput email.!\*(Aq
\&                    },
\&                },
\&                company => {
\&                    name => {
\&                        NOT_BLANK => \*(AqInput name!\*(Aq,
\&                    },
\&                },
\&            },
\&        },
\&    );
.Ve
.PP
or \s-1YAML\s0 file. set file name
.PP
.Vb 6
\&    MyApp\->config(
\&        validator => {
\&            plugins  => [...],
\&            messages => \*(Aqconf/messages.yml\*(Aq,
\&        },
\&    );
.Ve
.PP
and prepare yaml file like following,
.PP
.Vb 10
\&    DEFAULT:
\&        name:
\&            DEFAULT: name is invalid
\&    user:
\&        name:
\&            NOT_BLANK: Input name!
\&            ASCII: Input name with ascii code!
\&        email:
\&            DEFAULT: Email is wrong!
\&            NOT_BLANK: Input email!
\&    company:
\&        name:
\&            NOT_BLANK: Input name!
.Ve
.PP
the format is...
.PP
.Vb 9
\&    Action1_Name:
\&        Key1_Name:
\&            Validation1_Name: Message
\&            Validation2_Name: Message
\&        Key2_Name:
\&            Validation1_Name: Message
\&    Action2_Name:
\&        Key1_Name:
\&            ...
.Ve
.PP
After messages configuration, call \fImessages()\fR method from result-object.
and set action-name as argument.
.PP
.Vb 7
\&    [% IF c.form.has_error %]
\&    <ul>
\&        [% FOREACH message IN c.form.messages(\*(Aquser\*(Aq) %]
\&        <li>[% message %]</li>
\&        [% END %]
\&    </ul>
\&    [% END %]
.Ve
.PP
you can set each message format
.PP
.Vb 6
\&    MyApp\->config(
\&        validator => {
\&            messages => \*(Aqmessages.yml\*(Aq,  
\&            message_format => \*(Aq<p>%s</p>\*(Aq
\&        },
\&    );
\&
\&    [% IF c.form.has_error %]
\&        [% c.form.messages(\*(Aquser\*(Aq).join("\en") %]
\&    [% END %]
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
FormValidator::Simple
.PP
Catalyst
.SH "AUTHOR"
.IX Header "AUTHOR"
Lyo Kato <lyo.kato@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright(C) 2005 by Lyo Kato
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
