.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "FormValidator::Simple::Results 3"
.TH FormValidator::Simple::Results 3 "2011-12-08" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
FormValidator::Simple::Results \- results of validation
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    my $results = FormValidator::Simple\->check( $req => [
\&        name  => [qw/NOT_BLANK ASCII/, [qw/LENGTH 0 10/] ],
\&        email => [qw/NOT_BLANK EMAIL_LOOSE/, [qw/LENGTH 0 30/] ],
\&    ] );
\&
\&    if ( $results\->has_error ) {
\&        foreach my $key ( @{ $results\->error() } ) {
\&            foreach my $type ( @{ $results\->erorr($key) } ) {
\&                print "invalid: $key \- $type \en";
\&            }
\&        }
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is for handling resuls of FormValidator::Simple's check.
.PP
This object behaves like Data::FormValidator's results object, but
has some specific methods.
.SH "CHECK RESULT"
.IX Header "CHECK RESULT"
.IP "has_missing" 4
.IX Item "has_missing"
If there are missing values ( failed in validation '\s-1NOT_BLANK\s0' ), this method returns true.
.Sp
.Vb 3
\&    if ( $results\->has_missing ) {
\&        ...
\&    }
.Ve
.IP "has_invalid" 4
.IX Item "has_invalid"
If there are invalid values ( failed in some validations except '\s-1NOT_BLANK\s0' ), this method returns true.
.Sp
.Vb 3
\&    if ( $results\->has_invalid ) {
\&        ...
\&    }
.Ve
.IP "has_error" 4
.IX Item "has_error"
If there are missing or invalid values, this method returns true.
.Sp
.Vb 3
\&    if ( $results\->has_error ) {
\&        ...
\&    }
.Ve
.IP "success" 4
.IX Item "success"
inverse of has_error
.Sp
.Vb 3
\&    unless ( $resuls\->success ) {
\&        ...
\&    }
.Ve
.SH "ANALYZING RESULTS"
.IX Header "ANALYZING RESULTS"
.SS "missing"
.IX Subsection "missing"
.IP "no argument" 4
.IX Item "no argument"
When you call this method with no argument, it returns keys failed '\s-1NOT_BLANK\s0' validation.
.Sp
.Vb 7
\&    my $missings = $results\->missing;
\&    foreach my $missing_data ( @$missings ) {
\&        print $missing_data, "\en";
\&    }
\&    # \-\- print out, for example \-\-
\&    # name
\&    # email
.Ve
.IP "key" 4
.IX Item "key"
When you call this method with key-name, it returnes true if the value of the key is missing.
.Sp
.Vb 3
\&    if ( $results\->missing(\*(Aqname\*(Aq) ) {
\&        print "name is empty! \en";
\&    }
.Ve
.SS "invalid"
.IX Subsection "invalid"
.IP "no argument" 4
.IX Item "no argument"
When you call this method with no argument, it returns keys that failed some validation except '\s-1NOT_BLANK\s0'.
.Sp
.Vb 7
\&    my $invalids = $results\->invalid;
\&    foreach my $invalid_data ( @$invalids ) {
\&        print $invalid_data, "\en";
\&    }
\&    # \-\- print out, for example \-\-
\&    # name
\&    # email
.Ve
.IP "key" 4
.IX Item "key"
When you call this method with key-name, it returns names of failed validation.
.Sp
.Vb 7
\&    my $failed_validations = $results\->invalid(\*(Aqname\*(Aq);
\&    foreach my $validation ( @$failed_validations ) {
\&        print $validation, "\en";
\&    }
\&    # \-\- print out, for example \-\-
\&    # ASCII
\&    # LENGTH
.Ve
.IP "key and validation-name" 4
.IX Item "key and validation-name"
When you call this method with key-name, it returns false if the value has passed the validation.
.Sp
.Vb 3
\&    if ( $results\->invalid( name => \*(AqLENGTH\*(Aq ) ) {
\&        print "name is wrong length! \en";
\&    }
.Ve
.SS "error"
.IX Subsection "error"
This doesn't distinguish 'missing' and 'invalid'. You can use this like 'invalid' method,
but this consider '\s-1NOT_BLANK\s0' same as other validations.
.PP
.Vb 1
\&    my $error_keys = $results\->error;
\&
\&    my $failed_validation = $resuls\->error(\*(Aqname\*(Aq);
\&    # this includes \*(AqNOT_BLANK\*(Aq
\&
\&    if ( $results\->error( name => \*(AqNOT_BLANK\*(Aq ) ) {
\&        print "name is missing! \en";
\&    }
\&
\&    if ( $results\->error( name => \*(AqASCII\*(Aq ) ) {
\&        print "name should be ascii code! \en";
\&    }
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
FormValidator::Simple
.SH "AUTHOR"
.IX Header "AUTHOR"
Lyo Kato <lyo.kato@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This library is free software.
You can redistribute it and/or modify it under the same terms as perl itself.
