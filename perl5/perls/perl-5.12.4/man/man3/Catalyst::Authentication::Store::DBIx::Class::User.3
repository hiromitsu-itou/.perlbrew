.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Catalyst::Authentication::Store::DBIx::Class::User 3"
.TH Catalyst::Authentication::Store::DBIx::Class::User 3 "2011-12-08" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::Authentication::Store::DBIx::Class::User \- The backing user
class for the Catalyst::Authentication::Store::DBIx::Class storage
module.
.SH "VERSION"
.IX Header "VERSION"
This documentation refers to version 0.1503.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Internal \- not used directly, please see
Catalyst::Authentication::Store::DBIx::Class for details on how to
use this module. If you need more information than is present there, read the
source.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Catalyst::Authentication::Store::DBIx::Class::User class implements user storage
connected to an underlying DBIx::Class schema object.
.SH "SUBROUTINES / METHODS"
.IX Header "SUBROUTINES / METHODS"
.SS "new"
.IX Subsection "new"
Constructor.
.ie n .SS "load ( $authinfo, $c )"
.el .SS "load ( \f(CW$authinfo\fP, \f(CW$c\fP )"
.IX Subsection "load ( $authinfo, $c )"
Retrieves a user from storage using the information provided in \f(CW$authinfo\fR.
.SS "supported_features"
.IX Subsection "supported_features"
Indicates the features supported by this class.  These are currently Roles and Session.
.SS "roles"
.IX Subsection "roles"
Returns an array of roles associated with this user, if roles are configured for this user class.
.SS "for_session"
.IX Subsection "for_session"
Returns a serialized user for storage in the session.
.SS "from_session"
.IX Subsection "from_session"
Revives a serialized user from storage in the session.
.ie n .SS "get ( $fieldname )"
.el .SS "get ( \f(CW$fieldname\fP )"
.IX Subsection "get ( $fieldname )"
Returns the value of \f(CW$fieldname\fR for the user in question.  Roughly translates to a call to
the DBIx::Class::Row's get_column( \f(CW$fieldname\fR ) routine.
.SS "get_object"
.IX Subsection "get_object"
Retrieves the DBIx::Class object that corresponds to this user
.SS "obj (method)"
.IX Subsection "obj (method)"
Synonym for get_object
.SS "auto_create"
.IX Subsection "auto_create"
This is called when the auto_create_user option is turned on in
Catalyst::Plugin::Authentication and a user matching the authinfo provided is not found.
By default, this will call the \f(CW\*(C`auto_create()\*(C'\fR method of the resultset associated
with this object. It is up to you to implement that method.
.SS "auto_update"
.IX Subsection "auto_update"
This is called when the auto_update_user option is turned on in
Catalyst::Plugin::Authentication. Note that by default the DBIx::Class store
uses every field in the authinfo hash to match the user. This means any
information you provide with the intent to update must be ignored during the
user search process. Otherwise the information will most likely cause the user
record to not be found. To ignore fields in the search process, you
have to add the fields you wish to update to the 'ignore_fields_in_find'
authinfo element.  Alternately, you can use one of the advanced row retrieval
methods (searchargs or resultset).
.PP
By default, auto_update will call the \f(CW\*(C`auto_update()\*(C'\fR method of the
DBIx::Class::Row object associated with the user. It is up to you to implement
that method (probably in your schema file)
.SS "\s-1AUTOLOAD\s0"
.IX Subsection "AUTOLOAD"
Delegates method calls to the underlieing user row.
.SS "can"
.IX Subsection "can"
Delegates handling of the \f(CW\*(C`can\*(C'\fR method to the underlieing user row.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
None known currently, please email the author if you find any.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jason Kuri (jayk@cpan.org)
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Matt S Trout (mst) <mst@shadowcat.co.uk>
.PP
(fixes wrt can/AUTOLOAD sponsored by <http://reask.com/>)
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (c) 2007\-2010 the aforementioned authors. All rights
reserved. This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
