.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Catalyst::Manual::Tutorial::08_Testing 3"
.TH Catalyst::Manual::Tutorial::08_Testing 3 "2011-09-04" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::Manual::Tutorial::08_Testing \- Catalyst Tutorial \- Chapter 8: Testing
.SH "OVERVIEW"
.IX Header "OVERVIEW"
This is \fBChapter 8 of 10\fR for the Catalyst tutorial.
.PP
Tutorial Overview
.IP "1." 4
Introduction
.IP "2." 4
Catalyst Basics
.IP "3." 4
More Catalyst Basics
.IP "4." 4
Basic \s-1CRUD\s0
.IP "5." 4
Authentication
.IP "6." 4
Authorization
.IP "7." 4
Debugging
.IP "8." 4
\&\fB08_Testing\fR
.IP "9." 4
Advanced \s-1CRUD\s0
.IP "10." 4
Appendices
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
You may have noticed that the Catalyst Helper scripts automatically
create basic \f(CW\*(C`.t\*(C'\fR test scripts under the \f(CW\*(C`t\*(C'\fR directory.  This chapter
of the tutorial briefly looks at how these tests can be used not only to
ensure that your application is working correctly at the present time,
but also provide automated regression testing as you upgrade various
pieces of your application over time.
.PP
Source code for the tutorial in included in the \fI/home/catalyst/Final\fR
directory of the Tutorial Virtual machine (one subdirectory per
chapter).  There are also instructions for downloading the code in
Catalyst::Manual::Tutorial::01_Intro.
.PP
For an excellent introduction to learning the many benefits of testing
your Perl applications and modules, you might want to read 'Perl
Testing: A Developer's Notebook' by Ian Langworth and chromatic.
.ie n .SH "RUNNING THE ""CANNED"" CATALYST TESTS"
.el .SH "RUNNING THE ``CANNED'' CATALYST TESTS"
.IX Header "RUNNING THE CANNED CATALYST TESTS"
There are a variety of ways to run Catalyst and Perl tests (for example,
\&\f(CW\*(C`perl Makefile.PL\*(C'\fR and \f(CW\*(C`make test\*(C'\fR), but one of the easiest is with
the \f(CW\*(C`prove\*(C'\fR command.  For example, to run all of the tests in the \f(CW\*(C`t\*(C'\fR
directory, enter:
.PP
.Vb 1
\&    $ prove \-wl t
.Ve
.PP
There will be a lot of output because we have the \f(CW\*(C`\-Debug\*(C'\fR flag enabled
in \f(CW\*(C`lib/MyApp.pm\*(C'\fR (see the \f(CW\*(C`CATALYST_DEBUG=0\*(C'\fR tip below for a quick
and easy way to reduce the clutter).  Look for lines like this for
errors:
.PP
.Vb 3
\&    #   Failed test \*(AqRequest should succeed\*(Aq
\&    #   at t/controller_Books.t line 8.
\&    # Looks like you failed 1 test of 3.
.Ve
.PP
The redirection used by the Authentication plugins will cause several
failures in the default tests.  You can fix this by making the following
changes:
.PP
1) Change the line in \f(CW\*(C`t/01app.t\*(C'\fR that reads:
.PP
.Vb 1
\&    ok( request(\*(Aq/\*(Aq)\->is_success, \*(AqRequest should succeed\*(Aq );
.Ve
.PP
to:
.PP
.Vb 1
\&    ok( request(\*(Aq/login\*(Aq)\->is_success, \*(AqRequest should succeed\*(Aq );
.Ve
.PP
2) Change the line in \f(CW\*(C`t/controller_Logout.t\*(C'\fR that reads:
.PP
.Vb 1
\&    ok( request(\*(Aq/logout\*(Aq)\->is_success, \*(AqRequest should succeed\*(Aq );
.Ve
.PP
to:
.PP
.Vb 1
\&    ok( request(\*(Aq/logout\*(Aq)\->is_redirect, \*(AqRequest should succeed\*(Aq );
.Ve
.PP
3) Change the line in \f(CW\*(C`t/controller_Books.t\*(C'\fR that reads:
.PP
.Vb 1
\&    ok( request(\*(Aq/books\*(Aq)\->is_success, \*(AqRequest should succeed\*(Aq );
.Ve
.PP
to:
.PP
.Vb 1
\&    ok( request(\*(Aq/books\*(Aq)\->is_redirect, \*(AqRequest should succeed\*(Aq );
.Ve
.PP
4) Add the following statement to the top of \f(CW\*(C`t/view_HTML.t\*(C'\fR:
.PP
.Vb 1
\&    use MyApp;
.Ve
.PP
As you can see in the \f(CW\*(C`prove\*(C'\fR command line above, the \f(CW\*(C`\-l\*(C'\fR option (or
\&\f(CW\*(C`\-\-lib\*(C'\fR if you prefer) is used to set the location of the Catalyst
\&\f(CW\*(C`lib\*(C'\fR directory.  With this command, you will get all of the usual
development server debug output, something most people prefer to disable
while running tests cases.  Although you can edit the \f(CW\*(C`lib/MyApp.pm\*(C'\fR to
comment out the \f(CW\*(C`\-Debug\*(C'\fR plugin, it's generally easier to simply set
the \f(CW\*(C`CATALYST_DEBUG=0\*(C'\fR environment variable.  For example:
.PP
.Vb 1
\&    $ CATALYST_DEBUG=0 prove \-wl t
.Ve
.PP
During the \f(CW\*(C`t/02pod\*(C'\fR and \f(CW\*(C`t/03podcoverage\*(C'\fR tests, you might notice the
\&\f(CW\*(C`all skipped: set TEST_POD to enable this test\*(C'\fR warning message.  To
execute the Pod-related tests, add \f(CW\*(C`TEST_POD=1\*(C'\fR to the \f(CW\*(C`prove\*(C'\fR
command:
.PP
.Vb 1
\&    $ CATALYST_DEBUG=0 TEST_POD=1 prove \-wl t
.Ve
.PP
If you omitted the Pod comments from any of the methods that were
inserted, you might have to go back and fix them to get these tests to
pass. :\-)
.PP
Another useful option is the \f(CW\*(C`verbose\*(C'\fR (\f(CW\*(C`\-v\*(C'\fR) option to \f(CW\*(C`prove\*(C'\fR.  It
prints the name of each test case as it is being run:
.PP
.Vb 1
\&    $ CATALYST_DEBUG=0 prove \-vwl t
.Ve
.SH "RUNNING A SINGLE TEST"
.IX Header "RUNNING A SINGLE TEST"
You can also run a single script by appending its name to the \f(CW\*(C`prove\*(C'\fR
command. For example:
.PP
.Vb 1
\&    $ CATALYST_DEBUG=0 prove \-wl t/01app.t
.Ve
.PP
Also note that you can also run tests directly from Perl without
\&\f(CW\*(C`prove\*(C'\fR.  For example:
.PP
.Vb 1
\&    $ CATALYST_DEBUG=0 perl \-w \-Ilib t/01app.t
.Ve
.SH "ADDING YOUR OWN TEST SCRIPT"
.IX Header "ADDING YOUR OWN TEST SCRIPT"
Although the Catalyst helper scripts provide a basic level of checks
\&\*(L"for free,\*(R" testing can become significantly more helpful when you write
your own tests to exercise the various parts of your application.  The
Test::WWW::Mechanize::Catalyst module is very popular for writing
these sorts of test cases.  This module extends Test::WWW::Mechanize
(and therefore WWW::Mechanize) to allow you to automate the action of
a user \*(L"clicking around\*(R" inside your application.  It gives you all the
benefits of testing on a live system without the messiness of having to
use an actual web server, and a real person to do the clicking.
.PP
To create a sample test case, open the \f(CW\*(C`t/live_app01.t\*(C'\fR file in your
editor and enter the following:
.PP
.Vb 1
\&    #!/usr/bin/env perl
\&    
\&    use strict;
\&    use warnings;
\&    use Test::More;
\&    
\&    # Need to specify the name of your app as arg on next line
\&    # Can also do:
\&    #   use Test::WWW::Mechanize::Catalyst "MyApp";
\&    
\&    BEGIN { use_ok("Test::WWW::Mechanize::Catalyst" => "MyApp") }
\&    
\&    # Create two \*(Aquser agents\*(Aq to simulate two different users (\*(Aqtest01\*(Aq & \*(Aqtest02\*(Aq)
\&    my $ua1 = Test::WWW::Mechanize::Catalyst\->new;
\&    my $ua2 = Test::WWW::Mechanize::Catalyst\->new;
\&    
\&    # Use a simplified for loop to do tests that are common to both users
\&    # Use get_ok() to make sure we can hit the base URL
\&    # Second arg = optional description of test (will be displayed for failed tests)
\&    # Note that in test scripts you send everything to \*(Aqhttp://localhost\*(Aq
\&    $_\->get_ok("http://localhost/", "Check redirect of base URL") for $ua1, $ua2;
\&    # Use title_is() to check the contents of the <title>...</title> tags
\&    $_\->title_is("Login", "Check for login title") for $ua1, $ua2;
\&    # Use content_contains() to match on text in the html body
\&    $_\->content_contains("You need to log in to use this application",
\&        "Check we are NOT logged in") for $ua1, $ua2;
\&    
\&    # Log in as each user
\&    # Specify username and password on the URL
\&    $ua1\->get_ok("http://localhost/login?username=test01&password=mypass", "Login \*(Aqtest01\*(Aq");
\&    # Could make user2 like user1 above, but use the form to show another way
\&    $ua2\->submit_form(
\&        fields => {
\&            username => \*(Aqtest02\*(Aq,
\&            password => \*(Aqmypass\*(Aq,
\&        });
\&    
\&    # Go back to the login page and it should show that we are already logged in
\&    $_\->get_ok("http://localhost/login", "Return to \*(Aq/login\*(Aq") for $ua1, $ua2;
\&    $_\->title_is("Login", "Check for login page") for $ua1, $ua2;
\&    $_\->content_contains("Please Note: You are already logged in as ",
\&        "Check we ARE logged in" ) for $ua1, $ua2;
\&    
\&    # \*(AqClick\*(Aq the \*(AqLogout\*(Aq link (see also \*(Aqtext_regex\*(Aq and \*(Aqurl_regex\*(Aq options)
\&    $_\->follow_link_ok({n => 4}, "Logout via first link on page") for $ua1, $ua2;
\&    $_\->title_is("Login", "Check for login title") for $ua1, $ua2;
\&    $_\->content_contains("You need to log in to use this application",
\&        "Check we are NOT logged in") for $ua1, $ua2;
\&    
\&    # Log back in
\&    $ua1\->get_ok("http://localhost/login?username=test01&password=mypass",
\&        "Login \*(Aqtest01\*(Aq");
\&    $ua2\->get_ok("http://localhost/login?username=test02&password=mypass",
\&        "Login \*(Aqtest02\*(Aq");
\&    # Should be at the Book List page... do some checks to confirm
\&    $_\->title_is("Book List", "Check for book list title") for $ua1, $ua2;
\&    
\&    $ua1\->get_ok("http://localhost/books/list", "\*(Aqtest01\*(Aq book list");
\&    $ua1\->get_ok("http://localhost/login", "Login Page");
\&    $ua1\->get_ok("http://localhost/books/list", "\*(Aqtest01\*(Aq book list");
\&    
\&    $_\->content_contains("Book List", "Check for book list title") for $ua1, $ua2;
\&    # Make sure the appropriate logout buttons are displayed
\&    $_\->content_contains("/logout\e">User Logout</a>",
\&        "Both users should have a \*(AqUser Logout\*(Aq") for $ua1, $ua2;
\&    $ua1\->content_contains("/books/form_create\e">Admin Create</a>",
\&        "\*(Aqtest01\*(Aq should have a create link");
\&    $ua2\->content_lacks("/books/form_create\e">Admin Create</a>",
\&        "\*(Aqtest02\*(Aq should NOT have a create link");
\&    
\&    $ua1\->get_ok("http://localhost/books/list", "View book list as \*(Aqtest01\*(Aq");
\&    
\&    # User \*(Aqtest01\*(Aq should be able to create a book with the "formless create" URL
\&    $ua1\->get_ok("http://localhost/books/url_create/TestTitle/2/4",
\&        "\*(Aqtest01\*(Aq formless create");
\&    $ua1\->title_is("Book Created", "Book created title");
\&    $ua1\->content_contains("Added book \*(AqTestTitle\*(Aq", "Check title added OK");
\&    $ua1\->content_contains("by \*(AqStevens\*(Aq", "Check author added OK");
\&    $ua1\->content_contains("with a rating of 2.", "Check rating added");
\&    # Try a regular expression to combine the previous 3 checks & account for whitespace
\&    $ua1\->content_like(qr/Added book \*(AqTestTitle\*(Aq\es+by \*(AqStevens\*(Aq\es+with a rating of 2./,
\&        "Regex check");
\&    
\&    # Make sure the new book shows in the list
\&    $ua1\->get_ok("http://localhost/books/list", "\*(Aqtest01\*(Aq book list");
\&    $ua1\->title_is("Book List", "Check logged in and at book list");
\&    $ua1\->content_contains("Book List", "Book List page test");
\&    $ua1\->content_contains("TestTitle", "Look for \*(AqTestTitle\*(Aq");
\&    
\&    # Make sure the new book can be deleted
\&    # Get all the Delete links on the list page
\&    my @delLinks = $ua1\->find_all_links(text => \*(AqDelete\*(Aq);
\&    # Use the final link to delete the last book
\&    $ua1\->get_ok($delLinks[$#delLinks]\->url, \*(AqDelete last book\*(Aq);
\&    # Check that delete worked
\&    $ua1\->content_contains("Book List", "Book List page test");
\&    $ua1\->content_like(qr/Deleted book \ed+/, "Deleted book #");
\&    
\&    # User \*(Aqtest02\*(Aq should not be able to add a book
\&    $ua2\->get_ok("http://localhost/books/url_create/TestTitle2/2/5", "\*(Aqtest02\*(Aq add");
\&    $ua2\->content_contains("Unauthorized!", "Check \*(Aqtest02\*(Aq cannot add");
\&    
\&    done_testing;
.Ve
.PP
The \f(CW\*(C`live_app.t\*(C'\fR test cases uses copious comments to explain each step
of the process.  In addition to the techniques shown here, there are a
variety of other methods available in Test::WWW::Mechanize::Catalyst
(for example, regex-based matching). Consult
Test::WWW::Mechanize::Catalyst, Test::WWW::Mechanize,
WWW::Mechanize, and Test::More for more detail.
.PP
\&\fB\s-1TIP\s0\fR: For \fIunit tests\fR vs. the \*(L"full application tests\*(R" approach used
by Test::WWW::Mechanize::Catalyst, see Catalyst::Test.
.PP
\&\fBNote:\fR The test script does not test the \f(CW\*(C`form_create\*(C'\fR and
\&\f(CW\*(C`form_create_do\*(C'\fR actions.  That is left as an exercise for the reader
(you should be able to complete that logic using the existing code as a
template).
.PP
To run the new test script, use a command such as:
.PP
.Vb 1
\&    $ CATALYST_DEBUG=0 prove \-vwl t/live_app01.t
.Ve
.PP
or
.PP
.Vb 1
\&    $ DBIC_TRACE=0 CATALYST_DEBUG=0 prove \-vwl t/live_app01.t
.Ve
.PP
Experiment with the \f(CW\*(C`DBIC_TRACE\*(C'\fR, \f(CW\*(C`CATALYST_DEBUG\*(C'\fR and \f(CW\*(C`\-v\*(C'\fR settings.
If you find that there are errors, use the techniques discussed in the
\&\*(L"Catalyst Debugging\*(R" section (Chapter 7) to isolate and fix any
problems.
.PP
If you want to run the test case under the Perl interactive debugger,
try a command such as:
.PP
.Vb 1
\&    $ DBIC_TRACE=0 CATALYST_DEBUG=0 perl \-d \-Ilib t/live_app01.t
.Ve
.PP
Note that although this tutorial uses a single custom test case for
simplicity, you may wish to break your tests into different files for
better organization.
.PP
\&\fB\s-1TIP:\s0\fR If you have a test case that fails, you will receive an error
similar to the following:
.PP
.Vb 4
\&    #   Failed test \*(AqCheck we are NOT logged in\*(Aq
\&    #   in t/live_app01.t at line 31.
\&    #     searched: "\ex{0a}<!DOCTYPE HTML PUBLIC "\-//W3C//DTD HTML 4.01 Tran"...
\&    #   can\*(Aqt find: "You need to log in to use this application."
.Ve
.PP
Unfortunately, this only shows us the first 50 characters of the \s-1HTML\s0
returned by the request \*(-- not enough to determine where the problem
lies.  A simple technique that can be used in such situations is to
temporarily insert a line similar to the following right after the
failed test:
.PP
.Vb 1
\&    diag $ua1\->content;
.Ve
.PP
This will cause the full \s-1HTML\s0 returned by the request to be displayed.
.PP
Another approach to see the full \s-1HTML\s0 content at the failure point in a
series of tests would be to insert a "\f(CW\*(C`$DB::single=1;\*(C'\fR right above the
location of the failure and run the test under the Perl debugger (with
\&\f(CW\*(C`\-d\*(C'\fR) as shown above.  Then you can use the debugger to explore the
state of the application right before or after the failure.
.SH "SUPPORTING BOTH PRODUCTION AND TEST DATABASES"
.IX Header "SUPPORTING BOTH PRODUCTION AND TEST DATABASES"
You may wish to leverage the techniques discussed in this tutorial to
maintain both a \*(L"production database\*(R" for your live application and a
\&\*(L"testing database\*(R" for your test cases.  One advantage to
Test::WWW::Mechanize::Catalyst is that it runs your full application;
however, this can complicate things when you want to support multiple
databases.
.SS "\s-1DATABASE\s0 \s-1CONFIG\s0 \s-1SWITCHING\s0 \s-1IN\s0 \s-1YOUR\s0 \s-1MODEL\s0 \s-1CLASS\s0"
.IX Subsection "DATABASE CONFIG SWITCHING IN YOUR MODEL CLASS"
One solution is to allow the database specification to be overridden
with an environment variable.  For example, open
\&\f(CW\*(C`lib/MyApp/Model/DB.pm\*(C'\fR in your editor and change the
\&\f(CW\*(C`_\|_PACKAGE_\|_\->config(...\*(C'\fR declaration to resemble:
.PP
.Vb 3
\&    my $dsn = $ENV{MYAPP_DSN} ||= \*(Aqdbi:SQLite:myapp.db\*(Aq;
\&    _\|_PACKAGE_\|_\->config(
\&        schema_class => \*(AqMyApp::Schema\*(Aq,
\&    
\&        connect_info => {
\&            dsn => $dsn,
\&            user => \*(Aq\*(Aq,
\&            password => \*(Aq\*(Aq,
\&            on_connect_do => q{PRAGMA foreign_keys = ON},
\&        }
\&    );
.Ve
.PP
Then, when you run your test case, you can use commands such as:
.PP
.Vb 2
\&    $ cp myapp.db myappTEST.db
\&    $ CATALYST_DEBUG=0 MYAPP_DSN="dbi:SQLite:myappTEST.db" prove \-vwl t/live_app01.t
.Ve
.PP
This will modify the \s-1DSN\s0 only while the test case is running.  If you
launch your normal application without the \f(CW\*(C`MYAPP_DSN\*(C'\fR environment
variable defined, it will default to the same \f(CW\*(C`dbi:SQLite:myapp.db\*(C'\fR as
before.
.SS "\s-1DATABASE\s0 \s-1CONFIG\s0 \s-1SWITCHING\s0 \s-1USING\s0 \s-1MULTIPLE\s0 \s-1CONFIG\s0 \s-1FILES\s0"
.IX Subsection "DATABASE CONFIG SWITCHING USING MULTIPLE CONFIG FILES"
Catalyst::Plugin::ConfigLoader has functionality to load loading
multiple config files based on environment variablesi, allowing you to
override your default (production) database connection settings during
development (or vice versa).
.PP
Setting \f(CW$ENV{ MYAPP_CONFIG_LOCAL_SUFFIX }\fR to 'testing' in your test
script results in loading of an additional config file named
\&\f(CW\*(C`myapp_testing.conf\*(C'\fR after \f(CW\*(C`myapp.conf\*(C'\fR which will override any
parameters in \f(CW\*(C`myapp.conf\*(C'\fR.
.PP
You should set the environment variable in the \s-1BEGIN\s0 block of your test
script to make sure it's set before your Catalyst application is
started.
.PP
The following is an example for a config and test script for a
DBIx::Class model named MyDB and a controller named Foo:
.PP
myapp_testing.conf:
.PP
.Vb 5
\&    <Model::MyDB>
\&        <connect_info>
\&            dsn dbi:SQLite:myapp.db
\&        </connect_info>
\&    </Model::MyDB>
.Ve
.PP
t/controller_Foo.t:
.PP
.Vb 3
\&    use strict;
\&    use warnings;
\&    use Test::More;
\&    
\&    BEGIN {
\&        $ENV{ MYAPP_CONFIG_LOCAL_SUFFIX } = \*(Aqtesting\*(Aq;
\&    }
\&    
\&    eval "use Test::WWW::Mechanize::Catalyst \*(AqMyApp\*(Aq";
\&    plan $@
\&        ? ( skip_all => \*(AqTest::WWW::Mechanize::Catalyst required\*(Aq )
\&        : ( tests => 2 );
\&    
\&    ok( my $mech = Test::WWW::Mechanize::Catalyst\->new, \*(AqCreated mech object\*(Aq );
\&    
\&    $mech\->get_ok( \*(Aqhttp://localhost/foo\*(Aq );
.Ve
.PP
You can jump to the next chapter of the tutorial here:
Advanced \s-1CRUD\s0
.SH "AUTHOR"
.IX Header "AUTHOR"
Kennedy Clark, \f(CW\*(C`hkclark@gmail.com\*(C'\fR
.PP
Feel free to contact the author for any errors or suggestions, but the
best way to report issues is via the \s-1CPAN\s0 \s-1RT\s0 Bug system at
https://rt.cpan.org/Public/Dist/Display.html?Name=Catalyst\-Manual <https://rt.cpan.org/Public/Dist/Display.html?Name=Catalyst-Manual>.
.PP
Copyright 2006\-2011, Kennedy Clark, under the
Creative Commons Attribution Share-Alike License Version 3.0
(http://creativecommons.org/licenses/by\-sa/3.0/us/ <http://creativecommons.org/licenses/by-sa/3.0/us/>).
