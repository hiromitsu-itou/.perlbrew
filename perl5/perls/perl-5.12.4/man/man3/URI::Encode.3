.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "URI::Encode 3"
.TH URI::Encode 3 "2012-03-14" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
URI::Encode \- Simple percent Encoding/Decoding
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&    # OOP Interface
\&    use URI::Encode;
\&    my $uri = URI::Encode\->new({encode_reserved =>0});
\&    my $encoded = $uri\->encode($data);
\&    my $decoded = $uri\->decode($encoded);
\&
\&    # Functional
\&    use URI::Encode qw(uri_encode uri_decode);
\&    my $encoded = uri_encode($data);
\&    my $decoded = uri_decode($encoded);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This modules provides simple \s-1URI\s0 (Percent) encoding/decoding
.PP
The main purpose of this module (at least for me) was to provide an easy method
to encode strings (mainly URLs) into a format which can be pasted into a plain
text emails, and that those links are 'click\-able' by the person reading that
email. This can be accomplished by \s-1NOT\s0 encoding the reserved characters.
.PP
If you are looking for speed and want to encode reserved characters, use
URI::Escape::XS
.SH "METHODS"
.IX Header "METHODS"
.SS "\fInew()\fP"
.IX Subsection "new()"
Creates a new object, no arguments are required
.PP
.Vb 1
\&        my $encoder = URI::Encode\->new(\e%options);
.Ve
.PP
The following options can be passed to the constructor
.IP "encode_reserved" 4
.IX Item "encode_reserved"
.Vb 1
\&        my $encoder = URI::Encode\->new({encode_reserved => 0});
.Ve
.Sp
If true, \*(L"Reserved Characters\*(R" are also encoded. Defaults to false.
.ie n .SS "encode($url, $including_reserved)"
.el .SS "encode($url, \f(CW$including_reserved\fP)"
.IX Subsection "encode($url, $including_reserved)"
This method encodes the \s-1URL\s0 provided. The method does not encode any
\&\*(L"Reserved Characters\*(R" unless \f(CW$including_reserved\fR is true or set in the
constructor. The \f(CW$url\fR provided is first converted into \s-1UTF\-8\s0 before percent
encoding.
.PP
.Vb 2
\&        $uri\->encode("http://perl.com/foo bar");      # http://perl.com/foo%20bar
\&        $uri\->encode("http://perl.com/foo bar", 1);   # http%3A%2F%2Fperl.com%2Ffoo%20bar
.Ve
.SS "decode($url)"
.IX Subsection "decode($url)"
This method decodes a 'percent' encoded \s-1URL\s0. If you had encoded the \s-1URL\s0 using
this module (or any other method), chances are that the \s-1URL\s0 was converted to
\&\s-1UTF\-8\s0 before 'percent' encoding. Be sure to check the format and convert back
if required.
.PP
.Vb 1
\&        $uri\->decode("http%3A%2F%2Fperl.com%2Ffoo%20bar"); # "http://perl.com/foo bar"
.Ve
.SH "EXPORTED FUNCTIONS"
.IX Header "EXPORTED FUNCTIONS"
The following functions are exported upon request. This provides a non-OOP
interface
.ie n .SS "uri_encode($url, $including_reserved)"
.el .SS "uri_encode($url, \f(CW$including_reserved\fP)"
.IX Subsection "uri_encode($url, $including_reserved)"
See \*(L"encode($url, \f(CW$including_reserved\fR)\*(R"
.SS "uri_decode($url)"
.IX Subsection "uri_decode($url)"
See \*(L"decode($url)\*(R"
.SH "CHARACTER CLASSES"
.IX Header "CHARACTER CLASSES"
.SS "Reserved Characters"
.IX Subsection "Reserved Characters"
The following characters are considered as reserved (\s-1RFC\s0
3986 <http://tools.ietf.org/html/rfc3986>). They will be encoded only if
requested.
.PP
.Vb 1
\&         ! * \*(Aq ( ) ; : @ & = + $ , / ? % # [ ]
.Ve
.SS "Unreserved Characters"
.IX Subsection "Unreserved Characters"
The following characters are considered as Unreserved. They will not be encoded
.PP
.Vb 4
\&        a\-z
\&        A\-Z
\&        0\-9
\&        \- _ . ~
.Ve
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
Encode
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Gisle Aas for URI::Escape
.PP
David Nicol for Tie::UrlEncoder
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1RFC\s0 3986 <http://tools.ietf.org/html/rfc3986>
.PP
URI::Escape
.PP
URI::Escape::XS
.PP
URI::Escape::JavaScript
.PP
Tie::UrlEncoder
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-uri\-encode@rt.cpan.org\*(C'\fR, or
through the web interface at
http://rt.cpan.org/Public/Dist/Display.html?Name=URI\-Encode <http://rt.cpan.org/Public/Dist/Display.html?Name=URI-Encode>
.SH "AUTHOR"
.IX Header "AUTHOR"
Mithun Ayachit \f(CW\*(C`mithun@cpan.org\*(C'\fR
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (c) 2012, Mithun Ayachit. All rights reserved.
.PP
This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See perlartistic.
