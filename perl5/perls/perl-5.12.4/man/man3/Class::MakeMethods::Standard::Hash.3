.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MakeMethods::Standard::Hash 3"
.TH MakeMethods::Standard::Hash 3 "2004-09-07" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Class::MakeMethods::Standard::Hash \- Standard hash methods
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&  package MyObject;
\&  use Class::MakeMethods::Standard::Hash (
\&    new => \*(Aqnew\*(Aq,
\&    scalar => [ \*(Aqfoo\*(Aq, \*(Aqbar\*(Aq ],
\&    array => \*(Aqmy_list\*(Aq,
\&    hash => \*(Aqmy_index\*(Aq,
\&  );
\&  ...
\&  
\&  my $obj = MyObject\->new( foo => \*(AqFoozle\*(Aq );
\&  print $obj\->foo();
\&  
\&  $obj\->bar(\*(AqBarbados\*(Aq); 
\&  print $obj\->bar();
\&  
\&  $obj\->my_list(0 => \*(AqFoozle\*(Aq, 1 => \*(AqBang!\*(Aq);
\&  print $obj\->my_list(1);
\&  
\&  $obj\->my_index(\*(Aqbroccoli\*(Aq => \*(AqBlah!\*(Aq, \*(Aqfoo\*(Aq => \*(AqFiddle\*(Aq);
\&  print $obj\->my_index(\*(Aqfoo\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Standard::Hash suclass of MakeMethods provides a basic constructor and accessors for blessed-hash object instances.
.SS "Calling Conventions"
.IX Subsection "Calling Conventions"
When you \f(CW\*(C`use\*(C'\fR this package, the method names you provide
as arguments cause subroutines to be generated and installed in
your module.
.PP
See \*(L"Calling Conventions\*(R" in Class::MakeMethods::Standard for more information.
.SS "Declaration Syntax"
.IX Subsection "Declaration Syntax"
To declare methods, pass in pairs of a method-type name followed
by one or more method names.
.PP
Valid method-type names for this package are listed in \*(L"\s-1METHOD\s0
\&\s-1GENERATOR\s0 \s-1TYPES\s0\*(R".
.PP
See \*(L"Declaration Syntax\*(R" in Class::MakeMethods::Standard and \*(L"Parameter Syntax\*(R" in Class::MakeMethods::Standard for more information.
.SH "METHOD GENERATOR TYPES"
.IX Header "METHOD GENERATOR TYPES"
.SS "new \- Constructor"
.IX Subsection "new - Constructor"
For each method name passed, returns a subroutine with the following characteristics:
.IP "\(bu" 4
Has a reference to a sample item to copy. This defaults to a reference to an empty hash, but you may override this with the \f(CW\*(C`\*(Aqdefaults\*(Aq =\*(C'\fR \fIhash_ref\fR>  method parameter.
.IP "\(bu" 4
If called as a class method, makes a new hash and blesses it into that class.
.IP "\(bu" 4
If called on a hash-based instance, makes a copy of it and blesses the copy into the same class as the original instance.
.IP "\(bu" 4
If passed a list of key-value pairs, appends them to the new hash. These arguments override any copied values, and later arguments with the same name will override earlier ones.
.IP "\(bu" 4
Returns the new instance.
.PP
Sample declaration and usage:
.PP
.Vb 5
\&  package MyObject;
\&  use Class::MakeMethods::Standard::Hash (
\&    new => \*(Aqnew\*(Aq,
\&  );
\&  ...
\&  
\&  # Bare constructor
\&  my $empty = MyObject\->new();
\&  
\&  # Constructor with initial values
\&  my $obj = MyObject\->new( foo => \*(AqFoozle\*(Aq, bar => \*(AqBarbados\*(Aq );
\&  
\&  # Copy with overriding value
\&  my $copy = $obj\->new( bar => \*(AqBob\*(Aq );
.Ve
.SS "scalar \- Instance Accessor"
.IX Subsection "scalar - Instance Accessor"
For each method name passed, uses a closure to generate a subroutine with the following characteristics:
.IP "\(bu" 4
Must be called on a hash-based instance.
.IP "\(bu" 4
Has a specific hash key to use to access the related value for each instance.
This defaults to the method name, but you may override this with the \f(CW\*(C`\*(Aqhash_key\*(Aq =\*(C'\fR \fIstring\fR> method parameter.
.IP "\(bu" 4
If called without any arguments returns the current value.
.IP "\(bu" 4
If called with an argument, stores that as the value, and returns it,
.PP
Sample declaration and usage:
.PP
.Vb 5
\&  package MyObject;
\&  use Class::MakeMethods::Standard::Hash (
\&    scalar => \*(Aqfoo\*(Aq,
\&  );
\&  ...
\&  
\&  # Store value
\&  $obj\->foo(\*(AqFoozle\*(Aq);
\&  
\&  # Retrieve value
\&  print $obj\->foo;
.Ve
.SS "array \- Instance Ref Accessor"
.IX Subsection "array - Instance Ref Accessor"
For each method name passed, uses a closure to generate a subroutine with the following characteristics:
.IP "\(bu" 4
Must be called on a hash-based instance.
.IP "\(bu" 4
Has a specific hash key to use to access the related value for each instance.
This defaults to the method name, but you may override this with the \f(CW\*(C`\*(Aqhash_key\*(Aq =\*(C'\fR \fIstring\fR> method parameter.
.IP "\(bu" 4
The value for each instance will be a reference to an array (or undef).
.IP "\(bu" 4
If called without any arguments, returns the contents of the array in list context, or an array reference in scalar context (or undef).
.IP "\(bu" 4
If called with a single array ref argument, sets the contents of the array to match the contents of the provided one.
.IP "\(bu" 4
If called with a single numeric argument, uses that argument as an index to retrieve from the referenced array, and returns that value (or undef).
.IP "\(bu" 4
If called with a two arguments, the first undefined and the second an array ref argument, uses that array's contents as a list of indexes to return a slice of the referenced array.
.IP "\(bu" 4
If called with a list of argument pairs, each with a numeric index and an associated value, stores the value at the given index in the referenced array. If the instance's value was previously undefined, a new array is autovivified. The current value in each position will be overwritten, and later arguments with the same index will override earlier ones. Returns the current array-ref value.
.IP "\(bu" 4
If called with a list of argument pairs, each with the first item being a reference to an array of up to two numbers, loops over each pair and uses those numbers to splice the value array.
.Sp
The first controlling number is the position at which the splice will begin. Zero will start before the first item in the list. Negative numbers count backwards from the end of the array.
.Sp
The second number is the number of items to be removed from the list. If it is omitted, or undefined, or zero, no items are removed. If it is a positive integer, that many items will be returned.
.Sp
If both numbers are omitted, or are both undefined, they default to containing the entire value array.
.Sp
If the second argument is undef, no values will be inserted; if it is a non-reference value, that one value will be inserted; if it is an array-ref, its values will be copied.
.Sp
The method returns the items that removed from the array, if any.
.PP
Sample declaration and usage:
.PP
.Vb 5
\&  package MyObject;
\&  use Class::MakeMethods::Standard::Hash (
\&    array => \*(Aqbar\*(Aq,
\&  );
\&  ...
\&  
\&  # Clear and set contents of list
\&  print $obj\->bar([ \*(AqSpume\*(Aq, \*(AqFrost\*(Aq ] );  
\&  
\&  # Set values by position
\&  $obj\->bar(0 => \*(AqFoozle\*(Aq, 1 => \*(AqBang!\*(Aq);
\&  
\&  # Positions may be overwritten, and in any order
\&  $obj\->bar(2 => \*(AqAnd Mash\*(Aq, 1 => \*(AqBlah!\*(Aq);
\&  
\&  # Retrieve value by position
\&  print $obj\->bar(1);
\&  
\&  # Direct access to referenced array
\&  print scalar @{ $obj\->bar() };
.Ve
.PP
There are also calling conventions for slice and splice operations:
.PP
.Vb 2
\&  # Retrieve slice of values by position
\&  print join(\*(Aq, \*(Aq, $obj\->bar( undef, [0, 2] ) );
\&  
\&  # Insert an item at position in the array
\&  $obj\->bar([3], \*(AqPotatoes\*(Aq );  
\&  
\&  # Remove 1 item from position 3 in the array
\&  $obj\->bar([3, 1], undef );  
\&  
\&  # Set a new value at position 2, and return the old value 
\&  print $obj\->bar([2, 1], \*(AqFroth\*(Aq );
.Ve
.SS "hash \- Instance Ref Accessor"
.IX Subsection "hash - Instance Ref Accessor"
For each method name passed, uses a closure to generate a subroutine with the following characteristics:
.IP "\(bu" 4
Must be called on a hash-based instance.
.IP "\(bu" 4
Has a specific hash key to use to access the related value for each instance.
This defaults to the method name, but you may override this with the \f(CW\*(C`\*(Aqhash_key\*(Aq =\*(C'\fR \fIstring\fR> method parameter.
.IP "\(bu" 4
The value for each instance will be a reference to a hash (or undef).
.IP "\(bu" 4
If called without any arguments, returns the contents of the hash in list context, or a hash reference in scalar context (or undef).
.IP "\(bu" 4
If called with one non-ref argument, uses that argument as an index to retrieve from the referenced hash, and returns that value (or undef).
.IP "\(bu" 4
If called with one array-ref argument, uses the contents of that array to retrieve a slice of the referenced hash.
.IP "\(bu" 4
If called with one hash-ref argument, sets the contents of the referenced hash to match that provided.
.IP "\(bu" 4
If called with a list of key-value pairs, stores the value under the given key in the referenced hash. If the instance's value was previously undefined, a new hash is autovivified. The current value under each key will be overwritten, and later arguments with the same key will override earlier ones. Returns the contents of the hash in list context, or a hash reference in scalar context.
.PP
Sample declaration and usage:
.PP
.Vb 5
\&  package MyObject;
\&  use Class::MakeMethods::Standard::Hash (
\&    hash => \*(Aqbaz\*(Aq,
\&  );
\&  ...
\&  
\&  # Set values by key
\&  $obj\->baz(\*(Aqfoo\*(Aq => \*(AqFoozle\*(Aq, \*(Aqbar\*(Aq => \*(AqBang!\*(Aq);
\&  
\&  # Values may be overwritten, and in any order
\&  $obj\->baz(\*(Aqbroccoli\*(Aq => \*(AqBlah!\*(Aq, \*(Aqfoo\*(Aq => \*(AqFiddle\*(Aq);
\&  
\&  # Retrieve value by key
\&  print $obj\->baz(\*(Aqfoo\*(Aq);
\&  
\&  # Retrive slice of values by position
\&  print join(\*(Aq, \*(Aq, $obj\->baz( [\*(Aqfoo\*(Aq, \*(Aqbar\*(Aq] ) );
\&  
\&  # Direct access to referenced hash
\&  print keys %{ $obj\->baz() };
\&  
\&  # Reset the hash contents to empty
\&  %{ $obj\->baz() } = ();
.Ve
.SS "object \- Instance Ref Accessor"
.IX Subsection "object - Instance Ref Accessor"
For each method name passed, uses a closure to generate a subroutine with the following characteristics:
.IP "\(bu" 4
Must be called on a hash-based instance.
.IP "\(bu" 4
Has a specific hash key to use to access the related value for each instance.
This defaults to the method name, but you may override this with the \f(CW\*(C`\*(Aqhash_key\*(Aq =\*(C'\fR \fIstring\fR> method parameter.
.IP "\(bu" 4
The value for each instance will be a reference to an object (or undef).
.IP "\(bu" 4
If called without any arguments returns the current value.
.IP "\(bu" 4
If called with an argument, stores that as the value, and returns it,
.PP
Sample declaration and usage:
.PP
.Vb 5
\&  package MyObject;
\&  use Class::MakeMethods::Standard::Hash (
\&    object => \*(Aqfoo\*(Aq,
\&  );
\&  ...
\&  
\&  # Store value
\&  $obj\->foo( Foozle\->new() );
\&  
\&  # Retrieve value
\&  print $obj\->foo;
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
See Class::MakeMethods for general information about this distribution.
.PP
See Class::MakeMethods::Standard for more about this family of subclasses.
