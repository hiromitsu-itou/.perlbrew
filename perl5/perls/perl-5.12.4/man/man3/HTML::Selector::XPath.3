.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTML::Selector::XPath 3"
.TH HTML::Selector::XPath 3 "2012-01-17" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTML::Selector::XPath \- CSS Selector to XPath compiler
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use HTML::Selector::XPath;
\&
\&  my $selector = HTML::Selector::XPath\->new("li#main");
\&  $selector\->to_xpath; # //li[@id=\*(Aqmain\*(Aq]
\&
\&  # functional interface
\&  use HTML::Selector::XPath \*(Aqselector_to_xpath\*(Aq;
\&  my $xpath = selector_to_xpath(\*(Aqdiv.foo\*(Aq);
\&
\&  my $relative = selector_to_xpath(\*(Aqdiv.foo\*(Aq, root => \*(Aq/html/body/p\*(Aq );
\&  # /html/body/p/div[contains(concat(\*(Aq \*(Aq, @class, \*(Aq \*(Aq), \*(Aq foo \*(Aq)]
\&
\&  my $relative = selector_to_xpath(\*(Aqdiv:root\*(Aq, root => \*(Aq/html/body/p\*(Aq );
\&  # /html/body/p/div
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
HTML::Selector::XPath is a utility function to compile full set of
\&\s-1CSS2\s0 and partial \s-1CSS3\s0 selectors to the equivalent XPath expression.
.SH "FUNCTIONS and METHODS"
.IX Header "FUNCTIONS and METHODS"
.IP "selector_to_xpath" 4
.IX Item "selector_to_xpath"
.Vb 1
\&  $xpath = selector_to_xpath($selector, %options);
.Ve
.Sp
Shortcut for \f(CW\*(C`HTML::Selector\->new(shift)\->to_xpath(@_)\*(C'\fR. Exported upon request.
.IP "new" 4
.IX Item "new"
.Vb 1
\&  $sel = HTML::Selector::XPath\->new($selector, %options);
.Ve
.Sp
Creates a new object.
.IP "to_xpath" 4
.IX Item "to_xpath"
.Vb 2
\&  $xpath = $sel\->to_xpath;
\&  $xpath = $sel\->to_xpath(root => "."); # ./foo instead of //foo
.Ve
.Sp
Returns the translated XPath expression. You can optionally pass
\&\f(CW\*(C`root\*(C'\fR parameter, to specify which root to start the expression. It
defaults to \f(CW\*(C`/\*(C'\fR.
.Sp
The optional \f(CW\*(C`prefix\*(C'\fR option allows you to specify a namespace
prefix for the generated XPath expression.
.SH "SUBCLASSING NOTES"
.IX Header "SUBCLASSING NOTES"
.IP "parse_pseudo" 4
.IX Item "parse_pseudo"
This method is called during xpath construction when we encounter a pseudo 
selector (something that begins with comma). It is passed the selector and 
a reference to the string we are parsing. It should return one or more 
xpath sub-expressions to add to the parts if the selector is handled, 
otherwise return an empty list.
.SH "CAVEATS"
.IX Header "CAVEATS"
.SS "\s-1CSS\s0 \s-1SELECTOR\s0 \s-1VALIDATION\s0"
.IX Subsection "CSS SELECTOR VALIDATION"
This module doesn't validate whether the original \s-1CSS\s0 Selector
expression is valid. For example,
.PP
.Vb 1
\&  div.123foo
.Ve
.PP
is an invalid \s-1CSS\s0 selector (class names should not begin with
numbers), but this module ignores that and tries to generate
an equivalent XPath expression anyway.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Tatsuhiko Miyagawa 2006\-2011
.PP
Max Maischein 2011\-
.SH "AUTHOR"
.IX Header "AUTHOR"
Tatsuhiko Miyagawa <miyagawa@bulknews.net>
.PP
Most of the logic is based on Joe Hewitt's getElementsBySelector.js on
http://www.joehewitt.com/blog/2006\-03\-20.php <http://www.joehewitt.com/blog/2006-03-20.php> and Andrew Dupont's
patch to Prototype.js on <http://dev.rubyonrails.org/ticket/5171>,
but slightly modified using Aristotle Pegaltzis' \s-1CSS\s0 to XPath
translation table per <http://plasmasturm.org/log/444/>
.PP
Also see
.PP
http://www.mail\-archive.com/www\-archive@w3.org/msg00906.html <http://www.mail-archive.com/www-archive@w3.org/msg00906.html>
.PP
and
.PP
http://kilianvalkhof.com/2008/css\-xhtml/the\-css3\-not\-selector/ <http://kilianvalkhof.com/2008/css-xhtml/the-css3-not-selector/>
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
http://www.w3.org/TR/REC\-CSS2/selector.html <http://www.w3.org/TR/REC-CSS2/selector.html>
<http://use.perl.org/~miyagawa/journal/31090>
