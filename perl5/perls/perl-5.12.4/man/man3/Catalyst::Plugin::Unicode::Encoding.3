.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Catalyst::Plugin::Unicode::Encoding 3"
.TH Catalyst::Plugin::Unicode::Encoding 3 "2011-11-23" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::Plugin::Unicode::Encoding \- Unicode aware Catalyst
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Catalyst qw[Unicode::Encoding];
\&
\&    MyApp\->config( encoding => \*(AqUTF\-8\*(Aq ); # A valid Encode encoding
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
On request, decodes all params from encoding into a sequence of
logical characters. On response, encodes body into encoding.
.SH "METHODS"
.IX Header "METHODS"
.IP "encoding" 4
.IX Item "encoding"
Returns an instance of an \f(CW\*(C`Encode\*(C'\fR encoding
.Sp
.Vb 1
\&    print $c\->encoding\->name
.Ve
.SH "OVERLOADED METHODS"
.IX Header "OVERLOADED METHODS"
.IP "finalize_headers" 4
.IX Item "finalize_headers"
Encodes body into encoding.
.IP "prepare_uploads" 4
.IX Item "prepare_uploads"
Decodes parameters, query_parameters, body_parameters and filenames
in file uploads into a sequence of logical characters.
.IP "prepare_action" 4
.IX Item "prepare_action"
Decodes request arguments (i.e. \f(CW\*(C`$c\->request\->arguments\*(C'\fR) and
captures (i.e. \f(CW\*(C`$c\->request\->captures\*(C'\fR).
.IP "setup" 4
.IX Item "setup"
Setups \f(CW\*(C`$c\->encoding\*(C'\fR with encoding specified in \f(CW\*(C`$c\->config\->{encoding}\*(C'\fR.
.IP "handle_unicode_encoding_exception ($exception_context)" 4
.IX Item "handle_unicode_encoding_exception ($exception_context)"
Method called when decoding process for a request fails.
.Sp
An \f(CW$exception_context\fR hashref is provided to allow you to override the
behaviour of your application when given data with incorrect encodings.
.Sp
The default method throws exceptions in the case of invalid request parameters
(resulting in a 500 error), but ignores errors in upload filenames.
.Sp
The keys passed in the \f(CW$exception_context\fR hash are:
.RS 4
.IP "param_value" 4
.IX Item "param_value"
The value which was not able to be decoded.
.IP "error_msg" 4
.IX Item "error_msg"
The exception recieved from Encode.
.IP "encoding_step" 4
.IX Item "encoding_step"
What type of data was being decoded. Valid values are (currently)
\&\f(CW\*(C`params\*(C'\fR \- for request parameters / arguments / captures
and \f(CW\*(C`uploads\*(C'\fR \- for request upload filenames.
.RE
.RS 4
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Encode, Encode::Encoding, Catalyst::Plugin::Unicode, Catalyst.
.SH "AUTHORS"
.IX Header "AUTHORS"
Christian Hansen, \f(CW\*(C`ch@ngmedia.com\*(C'\fR
.PP
Masahiro Chiba
.PP
Tomas Doran, \f(CW\*(C`bobtfish@bobtfish.net\*(C'\fR
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software . You can redistribute it and/or modify
it under the same terms as perl itself.
