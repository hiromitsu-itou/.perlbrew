.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Number::Phone::JP 3"
.TH Number::Phone::JP 3 "2012-01-11" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Number::Phone::JP \- Validate Japanese phone numbers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Number::Phone::JP;
\& 
\& my $tel = Number::Phone::JP\->new(\*(Aq012\*(Aq, \*(Aq34567890\*(Aq);
\& print "This is valid!!\en" if $tel\->is_valid_number;
\& 
\& $tel\->set_number(\*(Aq098 7654 3210\*(Aq);
\& print "This is valid!!\en" if $tel\->is_valid_number;
\& 
\& $tel\->import(qw(mobile PHS));
\& $tel\->set_number(\*(Aq090\-0123\-4567\*(Aq);
\& print "This is valid!!\en" if $tel\->is_valid_number;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Number::Phone::JP is a simple module to validate Japanese phone
number formats. The Japanese phone numbers are regulated by
Ministry of Internal Afairs and Communications of Japan.
You can validate what a target number is valid from this
regulation point of view.
.PP
There are many categories for type of telephones in Japan. This module
is able to be used narrowed down to the type of phones.
.PP
This module only validates what a phone number agrees on the
regulation. Therefore, it does \fB\s-1NOT\s0\fR validate what a phone number
actually exists.
.PP
This validation needs only an area (or category) prefix and behind it.
The separator of number behind the prefix is ignored.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
This method constructs the Number::Phone::JP instance. you can put
some argument of a phone number to it.
It needs a two stuff for validation, area prefix (or carrier's prefix)
and following (means local-area prefix, subscriber's number, and something).
.PP
If you put only one argument, this module will separate it by
the first non-number character. And it will be ignored any non-number
characters.
.SS "import"
.IX Subsection "import"
It exists to select what categories is used for validation. You should
pass some specified categories to this method.
.PP
Categories list is as follows:
.PP
.Vb 10
\& Class1   ... Class1 undertaking associations
\& Class2   ... Class2 undertaking associations
\& Freedial ... Freedials
\& Home     ... Household phones
\& IPPhone  ... IP phones
\& Mobile   ... Mobile phones
\& Pager    ... Pager (called "pocketbell")
\& PHS      ... Personal Handy\-phone Systems
\& Q2       ... Dial Q2 services
\& United   ... United phone number
\& FMC      ... Fixed Mobile Convergence
\&              (was started in 2007 in Japan)
\& UPT      ... Universal Personal Telecommunication
\&              (was merged to FMC category in 2007 in Japan.
\&               this class works same as FMC.
\&               it\*(Aqs left for backward compatibility.)
.Ve
.PP
The category's names are \fBignored case\fR. Actually, the import method
calls others \f(CW\*(C`Number::Phone::JP::Table::\*(C'\fR\fICategory\fR module and
import this. The default importing table, \f(CW\*(C`Number::Phone::JP::Table\*(C'\fR
module is including all the categories table.
.PP
For importing, you can import by calling this method, and you can
import by \fBcalling this module\fR with some arguments.
.PP
.Vb 4
\& Example:
\&  # by calling import method
\&  use Number::Phone::JP; # import all the categories (default)
\&  my $tel = Number::Phone::JP\->new\->import(qw(mobile PHS));
\& 
\&  # by calling this module
\&  use Number::Phone::JP qw(Mobile Phs);
\&  my $tel = Number::Phone::JP\->new; # same as above
.Ve
.SS "set_number"
.IX Subsection "set_number"
Set/change the target phone number. The syntax of arguments for this
method is same as \f(CW\*(C`new()\*(C'\fR method (see above).
.SS "is_valid_number"
.IX Subsection "is_valid_number"
This method validates what the already set number is valid on your
specified categories. It returns true if the number is valid, and
returns false if the number is invalid.
.SH "Number::Phone COMPATIBLE METHODS"
.IX Header "Number::Phone COMPATIBLE METHODS"
.SS "is_valid"
.IX Subsection "is_valid"
Simply you can call \f(CW\*(C`is_valid()\*(C'\fR method instead of \f(CW\*(C`is_valid_number\*(C'\fR.
.SS "is_mobile"
.IX Subsection "is_mobile"
It checks that is the prefix of the number which you set is used
for mobile numbers. It just checks only prefix.
.SS "is_pager"
.IX Subsection "is_pager"
It checks that is the prefix of the number which you set is used
for pager (a.k.a pocketbell) numbers. It just checks only prefix.
.SS "is_ipphone"
.IX Subsection "is_ipphone"
It checks that is the prefix of the number which you set is used
for \s-1IP\s0 phone numbers. It just checks only prefix.
.SS "is_tollfree"
.IX Subsection "is_tollfree"
It checks that is the prefix of the number which you set is used
for \s-1IP\s0 tollfree (a.k.a. freedial) numbers. It just checks only prefix.
.SS "is_specialrate"
.IX Subsection "is_specialrate"
It checks that is the prefix of the number which you set is used
for specialrate (a.k.a. dial Q2) numbers. It just checks only prefix.
.SS "country_code"
.IX Subsection "country_code"
The numeric code for Japan. Just returns 81. Note that there is *no* + sign.
.SS "format"
.IX Subsection "format"
Return a sanely formatted version of the number, complete with \s-1IDD\s0 code, eg
for the Japanese number 090\-0123\-4567 it would return +81 90 01234567.
.SH "UNIMPLEMENTED METHODS"
.IX Header "UNIMPLEMENTED METHODS"
Following methods are not implemented on this module. It just returns undef.
.SS "is_allocated"
.IX Subsection "is_allocated"
.SS "is_in_use"
.IX Subsection "is_in_use"
.SS "is_geographic"
.IX Subsection "is_geographic"
.SS "is_fixed_line"
.IX Subsection "is_fixed_line"
.SS "is_isdn"
.IX Subsection "is_isdn"
.SS "is_adult"
.IX Subsection "is_adult"
.SS "is_personal"
.IX Subsection "is_personal"
.SS "is_corporate"
.IX Subsection "is_corporate"
.SS "is_government"
.IX Subsection "is_government"
.SS "is_international"
.IX Subsection "is_international"
.SS "is_network_service"
.IX Subsection "is_network_service"
.SS "regulator"
.IX Subsection "regulator"
.SS "areacode"
.IX Subsection "areacode"
.SS "areaname"
.IX Subsection "areaname"
.SS "location"
.IX Subsection "location"
.SS "subscriber"
.IX Subsection "subscriber"
.SS "operator"
.IX Subsection "operator"
.SS "type"
.IX Subsection "type"
.SS "country"
.IX Subsection "country"
.SS "translates_to"
.IX Subsection "translates_to"
.SH "EXAMPLE"
.IX Header "EXAMPLE"
.Vb 1
\& use Number::Phone::JP qw(mobile phs);
\& 
\& my $tel = Number::Phone::JP\->new;
\& open FH, \*(Aqcustomer.list\*(Aq or die "$!";
\& while (<FH>) {
\&     chomp;
\&     unless ($tel\->set_number($_)\->is_valid_number) {
\&         print "$_ is invalid number\en"
\&     }
\& }
\& close FH;
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Koichi Taniguchi (a.k.a. nipotan) <taniguchi@livedoor.jp>
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Number::Phone::JP::Table
