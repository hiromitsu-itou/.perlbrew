.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Furl::Headers 3"
.TH Furl::Headers 3 "2011-05-30" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Furl::Headers \- HTTP Headers object
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.ie n .IP "my $headers = Furl::Headers\->new(\e%headers);" 4
.el .IP "my \f(CW$headers\fR = Furl::Headers\->new(\e%headers);" 4
.IX Item "my $headers = Furl::Headers->new(%headers);"
The constructor takes one argument. It is a hashref.
Every key of hashref must be lower-cased.
.Sp
The format of the argument is like following:
.Sp
.Vb 4
\&    +{
\&        \*(Aqcontent\-length\*(Aq => [30],
\&        \*(Aqset\-cookies\*(Aq    => [\*(Aqauth_token=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT\*(Aq, \*(Aq_twitter_sess=JKLJBNBLKSFJBLKSJBLKSJLKJFLSDJFjkDKFUFIOSDUFSDVjOTUzNzUwNTE2%250AZWFiMWRiNDZhMDcwOWEwMWQ5IgpmbGFzaElDOidBY3Rpb25Db250cm9sbGVy%250AOjpGbGFzaDo6Rmxhc2hIYXNoewAGOgpAdXNlZHsA\-\-d9ce07496a22525bc178jlkhafklsdjflajfl411; domain=.twitter.com; path=/\*(Aq],
\&    }
.Ve
.SH "INSTANCE METHODS"
.IX Header "INSTANCE METHODS"
.ie n .IP "my @values = $headers\->header($key);" 4
.el .IP "my \f(CW@values\fR = \f(CW$headers\fR\->header($key);" 4
.IX Item "my @values = $headers->header($key);"
Get the header value in array.
.ie n .IP "my $values_joined = $headers\->header($key);" 4
.el .IP "my \f(CW$values_joined\fR = \f(CW$headers\fR\->header($key);" 4
.IX Item "my $values_joined = $headers->header($key);"
Get the header value in scalar. This is not a first value of header. This is same as:
.Sp
.Vb 1
\&    my $values = join(", ", $headers\->header($key))
.Ve
.ie n .IP "$headers\->header($key, $val);" 4
.el .IP "\f(CW$headers\fR\->header($key, \f(CW$val\fR);" 4
.IX Item "$headers->header($key, $val);"
.PD 0
.ie n .IP "$headers\->header($key, \e@val);" 4
.el .IP "\f(CW$headers\fR\->header($key, \e@val);" 4
.IX Item "$headers->header($key, @val);"
.PD
Set the new value of headers.
.ie n .IP "$headers\->remove_header($key);" 4
.el .IP "\f(CW$headers\fR\->remove_header($key);" 4
.IX Item "$headers->remove_header($key);"
Delete key from headers.
.ie n .IP "my @h = $headers\->\fIflatten()\fR;" 4
.el .IP "my \f(CW@h\fR = \f(CW$headers\fR\->\fIflatten()\fR;" 4
.IX Item "my @h = $headers->flatten();"
Gets pairs of keys and values.
.ie n .IP "my @keys = $headers\->\fIkeys()\fR;" 4
.el .IP "my \f(CW@keys\fR = \f(CW$headers\fR\->\fIkeys()\fR;" 4
.IX Item "my @keys = $headers->keys();"
.PD 0
.ie n .IP "my @keys = $headers\->\fIheader_field_names()\fR;" 4
.el .IP "my \f(CW@keys\fR = \f(CW$headers\fR\->\fIheader_field_names()\fR;" 4
.IX Item "my @keys = $headers->header_field_names();"
.PD
Returns keys of headers in array. The return value do not contains duplicated value.
.ie n .IP "my $str = $headers\->\fIas_string()\fR;" 4
.el .IP "my \f(CW$str\fR = \f(CW$headers\fR\->\fIas_string()\fR;" 4
.IX Item "my $str = $headers->as_string();"
Return the header fields as a formatted \s-1MIME\s0 header.
.ie n .IP "my $val = $headers\->\fIreferer()\fR" 4
.el .IP "my \f(CW$val\fR = \f(CW$headers\fR\->\fIreferer()\fR" 4
.IX Item "my $val = $headers->referer()"
.PD 0
.ie n .IP "my $val = $headers\->\fIexpires()\fR" 4
.el .IP "my \f(CW$val\fR = \f(CW$headers\fR\->\fIexpires()\fR" 4
.IX Item "my $val = $headers->expires()"
.ie n .IP "my $val = $headers\->\fIlast_modified()\fR" 4
.el .IP "my \f(CW$val\fR = \f(CW$headers\fR\->\fIlast_modified()\fR" 4
.IX Item "my $val = $headers->last_modified()"
.ie n .IP "my $val = $headers\->\fIif_modified_since()\fR" 4
.el .IP "my \f(CW$val\fR = \f(CW$headers\fR\->\fIif_modified_since()\fR" 4
.IX Item "my $val = $headers->if_modified_since()"
.ie n .IP "my $val = $headers\->\fIcontent_type()\fR" 4
.el .IP "my \f(CW$val\fR = \f(CW$headers\fR\->\fIcontent_type()\fR" 4
.IX Item "my $val = $headers->content_type()"
.ie n .IP "my $val = $headers\->\fIcontent_length()\fR" 4
.el .IP "my \f(CW$val\fR = \f(CW$headers\fR\->\fIcontent_length()\fR" 4
.IX Item "my $val = $headers->content_length()"
.ie n .IP "my $val = $headers\->\fIcontent_encoding()\fR" 4
.el .IP "my \f(CW$val\fR = \f(CW$headers\fR\->\fIcontent_encoding()\fR" 4
.IX Item "my $val = $headers->content_encoding()"
.PD
These methods are shortcut for popular headers.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
HTTP::Headers
