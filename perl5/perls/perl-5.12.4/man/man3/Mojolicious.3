.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojolicious 3"
.TH Mojolicious 3 "2012-03-14" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious \- Real\-time web framework
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  # Application
\&  package MyApp;
\&  use Mojo::Base \*(AqMojolicious\*(Aq;
\&
\&  # Route
\&  sub startup {
\&    my $self = shift;
\&    $self\->routes\->get(\*(Aq/hello\*(Aq)\->to(\*(Aqfoo#hello\*(Aq);
\&  }
\&
\&  # Controller
\&  package MyApp::Foo;
\&  use Mojo::Base \*(AqMojolicious::Controller\*(Aq;
\&
\&  # Action
\&  sub hello {
\&    my $self = shift;
\&    $self\->render_text(\*(AqHello World!\*(Aq);
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Take a look at our excellent documentation in Mojolicious::Guides!
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojolicious inherits all attributes from Mojo and implements the
following new ones.
.ie n .SS """controller_class"""
.el .SS "\f(CWcontroller_class\fP"
.IX Subsection "controller_class"
.Vb 2
\&  my $class = $app\->controller_class;
\&  $app      = $app\->controller_class(\*(AqMojolicious::Controller\*(Aq);
.Ve
.PP
Class to be used for the default controller, defaults to
Mojolicious::Controller.
.ie n .SS """mode"""
.el .SS "\f(CWmode\fP"
.IX Subsection "mode"
.Vb 2
\&  my $mode = $app\->mode;
\&  $app     = $app\->mode(\*(Aqproduction\*(Aq);
.Ve
.PP
The operating mode for your application, defaults to the value of the
\&\f(CW\*(C`MOJO_MODE\*(C'\fR environment variable or \f(CW\*(C`development\*(C'\fR. You can also add per
mode logic to your application by defining methods named \f(CW\*(C`${mode}_mode\*(C'\fR in
the application class, which will be called right before \f(CW\*(C`startup\*(C'\fR.
.PP
.Vb 4
\&  sub development_mode {
\&    my $self = shift;
\&    ...
\&  }
\&
\&  sub production_mode {
\&    my $self = shift;
\&    ...
\&  }
.Ve
.PP
Right before calling \f(CW\*(C`startup\*(C'\fR and mode specific methods, Mojolicious
will pick up the current mode, name the log file after it and raise the log
level from \f(CW\*(C`debug\*(C'\fR to \f(CW\*(C`info\*(C'\fR if it has a value other than \f(CW\*(C`development\*(C'\fR.
.ie n .SS """plugins"""
.el .SS "\f(CWplugins\fP"
.IX Subsection "plugins"
.Vb 2
\&  my $plugins = $app\->plugins;
\&  $app        = $app\->plugins(Mojolicious::Plugins\->new);
.Ve
.PP
The plugin loader, defaults to a Mojolicious::Plugins object. You can
usually leave this alone, see Mojolicious::Plugin if you want to write a
plugin or the \f(CW\*(C`plugin\*(C'\fR method below if you want to load a plugin.
.ie n .SS """renderer"""
.el .SS "\f(CWrenderer\fP"
.IX Subsection "renderer"
.Vb 2
\&  my $renderer = $app\->renderer;
\&  $app         = $app\->renderer(Mojolicious::Renderer\->new);
.Ve
.PP
Used in your application to render content, defaults to a
Mojolicious::Renderer object. The two main renderer plugins
Mojolicious::Plugin::EPRenderer and Mojolicious::Plugin::EPLRenderer
contain more information.
.PP
.Vb 2
\&  # Add another "templates" directory
\&  push @{$app\->renderer\->paths}, \*(Aq/foo/bar/templates\*(Aq;
.Ve
.ie n .SS """routes"""
.el .SS "\f(CWroutes\fP"
.IX Subsection "routes"
.Vb 2
\&  my $routes = $app\->routes;
\&  $app       = $app\->routes(Mojolicious::Routes\->new);
.Ve
.PP
The router, defaults to a Mojolicious::Routes object. You use this in your
startup method to define the url endpoints for your application.
.PP
.Vb 2
\&  sub startup {
\&    my $self = shift;
\&
\&    my $r = $self\->routes;
\&    $r\->route(\*(Aq/:controller/:action\*(Aq)\->to(\*(Aqtest#welcome\*(Aq);
\&  }
.Ve
.ie n .SS """secret"""
.el .SS "\f(CWsecret\fP"
.IX Subsection "secret"
.Vb 2
\&  my $secret = $app\->secret;
\&  $app       = $app\->secret(\*(Aqpassw0rd\*(Aq);
.Ve
.PP
A secret passphrase used for signed cookies and the like, defaults to the
application name which is not very secure, so you should change it!!! As long
as you are using the unsecure default there will be debug messages in the log
file reminding you to change your passphrase.
.ie n .SS """sessions"""
.el .SS "\f(CWsessions\fP"
.IX Subsection "sessions"
.Vb 2
\&  my $sessions = $app\->sessions;
\&  $app         = $app\->sessions(Mojolicious::Sessions\->new);
.Ve
.PP
Simple signed cookie based sessions, defaults to a Mojolicious::Sessions
object. You can usually leave this alone, see
\&\*(L"session\*(R" in Mojolicious::Controller for more information about working with
session data.
.ie n .SS """static"""
.el .SS "\f(CWstatic\fP"
.IX Subsection "static"
.Vb 2
\&  my $static = $app\->static;
\&  $app       = $app\->static(Mojolicious::Static\->new);
.Ve
.PP
For serving static files from your \f(CW\*(C`public\*(C'\fR directories, defaults to a
Mojolicious::Static object.
.PP
.Vb 2
\&  # Add another "public" directory
\&  push @{$app\->static\->paths}, \*(Aq/foo/bar/public\*(Aq;
.Ve
.ie n .SS """types"""
.el .SS "\f(CWtypes\fP"
.IX Subsection "types"
.Vb 2
\&  my $types = $app\->types;
\&  $app      = $app\->types(Mojolicious::Types\->new);
.Ve
.PP
Responsible for connecting file extensions with \s-1MIME\s0 types, defaults to a
Mojolicious::Types object.
.PP
.Vb 1
\&  $app\->types\->type(twt => \*(Aqtext/tweet\*(Aq);
.Ve
.SH "METHODS"
.IX Header "METHODS"
Mojolicious inherits all methods from Mojo and implements the following
new ones.
.ie n .SS """new"""
.el .SS "\f(CWnew\fP"
.IX Subsection "new"
.Vb 1
\&  my $app = Mojolicious\->new;
.Ve
.PP
Construct a new Mojolicious application. Will automatically detect your
home directory and set up logging based on your current operating mode. Also
sets up the renderer, static dispatcher and a default set of plugins.
.ie n .SS """build_tx"""
.el .SS "\f(CWbuild_tx\fP"
.IX Subsection "build_tx"
.Vb 1
\&  my $tx = $app\->build_tx;
.Ve
.PP
Transaction builder, defaults to building a Mojo::Transaction::HTTP
object.
.ie n .SS """defaults"""
.el .SS "\f(CWdefaults\fP"
.IX Subsection "defaults"
.Vb 4
\&  my $defaults = $app\->defaults;
\&  my $foo      = $app\->defaults(\*(Aqfoo\*(Aq);
\&  $app         = $app\->defaults({foo => \*(Aqbar\*(Aq});
\&  $app         = $app\->defaults(foo => \*(Aqbar\*(Aq);
.Ve
.PP
Default values for \*(L"stash\*(R" in Mojolicious::Controller, assigned for every new
request.
.PP
.Vb 4
\&  # Manipulate defaults
\&  $app\->defaults\->{foo} = \*(Aqbar\*(Aq;
\&  my $foo = $app\->defaults\->{foo};
\&  delete $app\->defaults\->{foo};
.Ve
.ie n .SS """dispatch"""
.el .SS "\f(CWdispatch\fP"
.IX Subsection "dispatch"
.Vb 1
\&  $app\->dispatch($c);
.Ve
.PP
The heart of every Mojolicious application, calls the \f(CW\*(C`static\*(C'\fR and \f(CW\*(C`routes\*(C'\fR
dispatchers for every request and passes them a Mojolicious::Controller
object.
.ie n .SS """handler"""
.el .SS "\f(CWhandler\fP"
.IX Subsection "handler"
.Vb 2
\&  $app\->handler($tx);
\&  $app\->handler($c);
.Ve
.PP
Sets up the default controller and calls process for every request.
.ie n .SS """helper"""
.el .SS "\f(CWhelper\fP"
.IX Subsection "helper"
.Vb 1
\&  $app\->helper(foo => sub {...});
.Ve
.PP
Add a new helper that will be available as a method of the controller object
and the application object, as well as a function in \f(CW\*(C`ep\*(C'\fR templates.
.PP
.Vb 2
\&  # Helper
\&  $app\->helper(add => sub { $_[1] + $_[2] });
\&
\&  # Controller/Application
\&  my $result = $self\->add(2, 3);
\&
\&  # Template
\&  %= add 2, 3
.Ve
.ie n .SS """hook"""
.el .SS "\f(CWhook\fP"
.IX Subsection "hook"
.Vb 1
\&  $app\->hook(after_dispatch => sub {...});
.Ve
.PP
Extend Mojolicious with hooks.
.PP
.Vb 6
\&  # Dispatchers will not run if there\*(Aqs already a response code defined
\&  $app\->hook(before_dispatch => sub {
\&    my $c = shift;
\&    $c\->render(text => \*(AqSkipped dispatchers!\*(Aq)
\&      if $c\->req\->url\->path\->contains(\*(Aq/do_not_dispatch\*(Aq);
\&  });
.Ve
.PP
These hooks are currently available and are emitted in the listed order:
.IP "\fBafter_build_tx\fR" 2
.IX Item "after_build_tx"
Emitted right after the transaction is built and before the \s-1HTTP\s0 request gets
parsed.
.Sp
.Vb 4
\&  $app\->hook(after_build_tx => sub {
\&    my ($tx, $app) = @_;
\&    ...
\&  });
.Ve
.Sp
This is a very powerful hook and should not be used lightly, it makes some
rather advanced features such as upload progress bars possible, just note
that it will not work for embedded applications. (Passed the transaction and
application object)
.IP "\fBbefore_dispatch\fR" 2
.IX Item "before_dispatch"
Emitted right before the static dispatcher and router start their work.
.Sp
.Vb 4
\&  $app\->hook(before_dispatch => sub {
\&    my $c = shift;
\&    ...
\&  });
.Ve
.Sp
Very useful for rewriting incoming requests and other preprocessing tasks.
(Passed the default controller object)
.IP "\fBafter_static_dispatch\fR" 2
.IX Item "after_static_dispatch"
Emitted in reverse order after the static dispatcher determined if a static
file should be served and before the router starts its work.
.Sp
.Vb 4
\&  $app\->hook(after_static_dispatch => sub {
\&    my $c = shift;
\&    ...
\&  });
.Ve
.Sp
Mostly used for custom dispatchers and postprocessing static file responses.
(Passed the default controller object)
.IP "\fBafter_dispatch\fR" 2
.IX Item "after_dispatch"
Emitted in reverse order after a response has been rendered. Note that this
hook can trigger before \f(CW\*(C`after_static_dispatch\*(C'\fR due to its dynamic nature.
.Sp
.Vb 4
\&  $app\->hook(after_dispatch => sub {
\&    my $c = shift;
\&    ...
\&  });
.Ve
.Sp
Useful for all kinds of postprocessing tasks. (Passed the current controller
object)
.IP "\fBaround_dispatch\fR" 2
.IX Item "around_dispatch"
Emitted right before the \f(CW\*(C`before_dispatch\*(C'\fR hook and wraps around the whole
dispatch process, so you have to manually forward to the next hook if you
want to continue the chain.
.Sp
.Vb 6
\&  $app\->hook(around_dispatch => sub {
\&    my ($next, $c) = @_;
\&    ...
\&    $next\->();
\&    ...
\&  });
.Ve
.Sp
This is a very powerful hook and should not be used lightly, it allows you to
customize application wide exception handling for example, consider it the
sledgehammer in your toolbox. (Passed a closure leading to the next hook and
the current controller object)
.ie n .SS """plugin"""
.el .SS "\f(CWplugin\fP"
.IX Subsection "plugin"
.Vb 9
\&  $app\->plugin(\*(Aqsome_thing\*(Aq);
\&  $app\->plugin(\*(Aqsome_thing\*(Aq, foo => 23);
\&  $app\->plugin(\*(Aqsome_thing\*(Aq, {foo => 23});
\&  $app\->plugin(\*(AqSomeThing\*(Aq);
\&  $app\->plugin(\*(AqSomeThing\*(Aq, foo => 23);
\&  $app\->plugin(\*(AqSomeThing\*(Aq, {foo => 23});
\&  $app\->plugin(\*(AqMyApp::Plugin::SomeThing\*(Aq);
\&  $app\->plugin(\*(AqMyApp::Plugin::SomeThing\*(Aq, foo => 23);
\&  $app\->plugin(\*(AqMyApp::Plugin::SomeThing\*(Aq, {foo => 23});
.Ve
.PP
Load a plugin with \*(L"register_plugin\*(R" in Mojolicious::Plugins.
.PP
These plugins are included in the Mojolicious distribution as examples:
.IP "Mojolicious::Plugin::Charset" 2
.IX Item "Mojolicious::Plugin::Charset"
Change the application charset.
.IP "Mojolicious::Plugin::Config" 2
.IX Item "Mojolicious::Plugin::Config"
Perl-ish configuration files.
.IP "Mojolicious::Plugin::DefaultHelpers" 2
.IX Item "Mojolicious::Plugin::DefaultHelpers"
General purpose helper collection.
.IP "Mojolicious::Plugin::EPLRenderer" 2
.IX Item "Mojolicious::Plugin::EPLRenderer"
Renderer for plain embedded Perl templates.
.IP "Mojolicious::Plugin::EPRenderer" 2
.IX Item "Mojolicious::Plugin::EPRenderer"
Renderer for more sophisiticated embedded Perl templates.
.IP "Mojolicious::Plugin::HeaderCondition" 2
.IX Item "Mojolicious::Plugin::HeaderCondition"
Route condition for all kinds of headers.
.IP "Mojolicious::Plugin::I18N" 2
.IX Item "Mojolicious::Plugin::I18N"
Internationalization helpers.
.IP "Mojolicious::Plugin::JSONConfig" 2
.IX Item "Mojolicious::Plugin::JSONConfig"
\&\s-1JSON\s0 configuration files.
.IP "Mojolicious::Plugin::Mount" 2
.IX Item "Mojolicious::Plugin::Mount"
Mount whole Mojolicious applications.
.IP "Mojolicious::Plugin::PODRenderer" 2
.IX Item "Mojolicious::Plugin::PODRenderer"
Renderer for \s-1POD\s0 files and documentation browser.
.IP "Mojolicious::Plugin::PoweredBy" 2
.IX Item "Mojolicious::Plugin::PoweredBy"
Add an \f(CW\*(C`X\-Powered\-By\*(C'\fR header to outgoing responses.
.IP "Mojolicious::Plugin::RequestTimer" 2
.IX Item "Mojolicious::Plugin::RequestTimer"
Log timing information.
.IP "Mojolicious::Plugin::TagHelpers" 2
.IX Item "Mojolicious::Plugin::TagHelpers"
Template specific helper collection.
.ie n .SS """start"""
.el .SS "\f(CWstart\fP"
.IX Subsection "start"
.Vb 2
\&  Mojolicious\->start;
\&  Mojolicious\->start(\*(Aqdaemon\*(Aq);
.Ve
.PP
Start the Mojolicious::Commands command line interface for your
application.
.ie n .SS """startup"""
.el .SS "\f(CWstartup\fP"
.IX Subsection "startup"
.Vb 1
\&  $app\->startup;
.Ve
.PP
This is your main hook into the application, it will be called at application
startup.
.PP
.Vb 4
\&  sub startup {
\&    my $self = shift;
\&    ...
\&  }
.Ve
.SH "HELPERS"
.IX Header "HELPERS"
In addition to the attributes and methods above you can also call helpers on
Mojolicious objects. This includes all helpers from
Mojolicious::Plugin::DefaultHelpers and
Mojolicious::Plugin::TagHelpers. Note that application helpers are always
called with a new \f(CW\*(C`controller_class\*(C'\fR object, so they can't depend on or
change controller state, which includes request, response and stash.
.PP
.Vb 1
\&  $app\->log\->debug($app\->dumper({foo => \*(Aqbar\*(Aq}));
.Ve
.SH "SUPPORT"
.IX Header "SUPPORT"
.SS "Web"
.IX Subsection "Web"
<http://mojolicio.us>
.SS "\s-1IRC\s0"
.IX Subsection "IRC"
\&\f(CW\*(C`#mojo\*(C'\fR on \f(CW\*(C`irc.perl.org\*(C'\fR
.SS "Mailing-List"
.IX Subsection "Mailing-List"
<http://groups.google.com/group/mojolicious>
.SH "DEVELOPMENT"
.IX Header "DEVELOPMENT"
.SS "Repository"
.IX Subsection "Repository"
<http://github.com/kraih/mojo>
.SH "BUNDLED FILES"
.IX Header "BUNDLED FILES"
Mojolicious ships with a few popular static files bundled in the \f(CW\*(C`public\*(C'\fR
directory.
.SS "Mojolicious Artwork"
.IX Subsection "Mojolicious Artwork"
.Vb 1
\&  Copyright (C) 2010\-2012, Sebastian Riedel.
.Ve
.PP
Licensed under the CC-SA License, Version 3.0
http://creativecommons.org/licenses/by\-sa/3.0 <http://creativecommons.org/licenses/by-sa/3.0>.
.SS "jQuery"
.IX Subsection "jQuery"
.Vb 1
\&  Copyright 2011, John Resig.
.Ve
.PP
Licensed under the \s-1MIT\s0 License, <http://creativecommons.org/licenses/MIT>.
.SS "prettify.js"
.IX Subsection "prettify.js"
.Vb 1
\&  Copyright (C) 2006, Google Inc.
.Ve
.PP
Licensed under the Apache License, Version 2.0
http://www.apache.org/licenses/LICENSE\-2.0 <http://www.apache.org/licenses/LICENSE-2.0>.
.SH "CODE NAMES"
.IX Header "CODE NAMES"
Every major release of Mojolicious has a code name, these are the ones
that have been used in the past.
.PP
2.0, \f(CW\*(C`Leaf Fluttering In Wind\*(C'\fR (u1F343)
.PP
1.4, \f(CW\*(C`Smiling Face With Sunglasses\*(C'\fR (u1F60E)
.PP
1.3, \f(CW\*(C`Tropical Drink\*(C'\fR (u1F379)
.PP
1.1, \f(CW\*(C`Smiling Cat Face With Heart\-Shaped Eyes\*(C'\fR (u1F63B)
.PP
1.0, \f(CW\*(C`Snowflake\*(C'\fR (u2744)
.PP
0.999930, \f(CW\*(C`Hot Beverage\*(C'\fR (u2615)
.PP
0.999927, \f(CW\*(C`Comet\*(C'\fR (u2604)
.PP
0.999920, \f(CW\*(C`Snowman\*(C'\fR (u2603)
.SH "PROJECT FOUNDER"
.IX Header "PROJECT FOUNDER"
Sebastian Riedel, \f(CW\*(C`sri@cpan.org\*(C'\fR
.SH "CORE DEVELOPERS"
.IX Header "CORE DEVELOPERS"
Current members of the core team in alphabetical order:
.Sp
.RS 4
Abhijit Menon-Sen, \f(CW\*(C`ams@cpan.org\*(C'\fR
.Sp
Glen Hinkle, \f(CW\*(C`tempire@cpan.org\*(C'\fR
.Sp
Marcus Ramberg, \f(CW\*(C`mramberg@cpan.org\*(C'\fR
.RE
.SH "CREDITS"
.IX Header "CREDITS"
In alphabetical order:
.Sp
.RS 2
Adam Kennedy
.Sp
Adriano Ferreira
.Sp
Al Newkirk
.Sp
Alex Salimon
.Sp
Alexey Likhatskiy
.Sp
Anatoly Sharifulin
.Sp
Andre Vieth
.Sp
Andreas Jaekel
.Sp
Andrew Fresh
.Sp
Andreas Koenig
.Sp
Andy Grundman
.Sp
Aristotle Pagaltzis
.Sp
Ashley Dev
.Sp
Ask Bjoern Hansen
.Sp
Audrey Tang
.Sp
Ben van Staveren
.Sp
Benjamin Erhart
.Sp
Bernhard Graf
.Sp
Breno G. de Oliveira
.Sp
Brian Duggan
.Sp
Burak Gursoy
.Sp
Ch Lamprecht
.Sp
Charlie Brady
.Sp
Chas. J. Owens \s-1IV\s0
.Sp
Christian Hansen
.Sp
chromatic
.Sp
Curt Tilmes
.Sp
Daniel Kimsey
.Sp
Danijel Tasov
.Sp
David Davis
.Sp
Diego Kuperman
.Sp
Dmitriy Shalashov
.Sp
Dmitry Konstantinov
.Sp
Douglas Christopher Wilson
.Sp
Eugene Toropov
.Sp
Gisle Aas
.Sp
Graham Barr
.Sp
Henry Tang
.Sp
Hideki Yamamura
.Sp
James Duncan
.Sp
Jan Jona Javorsek
.Sp
Jaroslav Muhin
.Sp
Jesse Vincent
.Sp
Johannes Plunien
.Sp
John Kingsley
.Sp
Jonathan Yu
.Sp
Kazuhiro Shibuya
.Sp
Kevin Old
.Sp
\&\s-1KITAMURA\s0 Akatsuki
.Sp
Lars Balker Rasmussen
.Sp
Leon Brocard
.Sp
Magnus Holm
.Sp
Maik Fischer
.Sp
Mark Stosberg
.Sp
Matthew Lineen
.Sp
Maksym Komar
.Sp
Maxim Vuets
.Sp
Michael Harris
.Sp
Mirko Westermeier
.Sp
Mons Anderson
.Sp
Moritz Lenz
.Sp
Neil Watkiss
.Sp
Nils Diewald
.Sp
Oleg Zhelo
.Sp
Pascal Gaudette
.Sp
Paul Tomlin
.Sp
Pedro Melo
.Sp
Peter Edwards
.Sp
Pierre-Yves Ritschard
.Sp
Quentin Carbonneaux
.Sp
Rafal Pocztarski
.Sp
Randal Schwartz
.Sp
Robert Hicks
.Sp
Robin Lee
.Sp
Roland Lammel
.Sp
Ryan Jendoubi
.Sp
Sascha Kiefer
.Sp
Sergey Zasenko
.Sp
Simon Bertrang
.Sp
Simone Tampieri
.Sp
Shu Cho
.Sp
Skye Shaw
.Sp
Stanis Trendelenburg
.Sp
Stephane Este-Gracias
.Sp
Tatsuhiko Miyagawa
.Sp
Terrence Brannon
.Sp
The Perl Foundation
.Sp
Tomas Znamenacek
.Sp
Ulrich Habel
.Sp
Ulrich Kautz
.Sp
Uwe Voelker
.Sp
Viacheslav Tykhanovskyi
.Sp
Victor Engmark
.Sp
Viliam Pucik
.Sp
Wes Cravens
.Sp
Yaroslav Korshak
.Sp
Yuki Kimoto
.Sp
Zak B. Elep
.RE
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2008\-2012, Sebastian Riedel.
.PP
This program is free software, you can redistribute it and/or modify it under
the terms of the Artistic License version 2.0.
