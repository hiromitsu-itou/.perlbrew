.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTML::FormHandler::Field::Select 3"
.TH HTML::FormHandler::Field::Select 3 "2012-02-04" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTML::FormHandler::Field::Select \- select fields
.SH "VERSION"
.IX Header "VERSION"
version 0.36002
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a field that includes a list of possible valid options.
This can be used for select and multiple-select fields.
Widget type is 'select'.
.PP
Because select lists and checkbox_groups do not return an \s-1HTTP\s0
parameter when the entire list is unselected, the Select field
must assume that the lack of a param means unselection. So to
avoid setting a Select field, it must be set to inactive, not
merely not included in the \s-1HTML\s0 for a form.
.PP
This field type can also be used for fields that use the
\&'radio_group' widget, and the 'checkbox_group' widget (for
selects with multiple flag turned on, or that use the Multiple
field).
.PP
The 'options' array can come from four different places.
The options attribute itself, either declaratively or using a
\&'build_options' method in the field, from a method in the
form ('options_<fieldname>') or from the database.
.PP
In a field declaration:
.PP
.Vb 2
\&   has_field \*(Aqopt_in\*(Aq => ( type => \*(AqSelect\*(Aq, widget => \*(Aqradio_group\*(Aq,
\&      options => [{ value => 0, label => \*(AqNo\*(Aq}, { value => 1, label => \*(AqYes\*(Aq} ] );
.Ve
.PP
In a custom field class:
.PP
.Vb 10
\&   package MyApp::Field::WeekDay;
\&   use Moose;
\&   extends \*(AqHTML::FormHandler::Field::Select\*(Aq;
\&   ....
\&   sub build_options {
\&       my $i = 0;
\&       my @days = (\*(AqSunday\*(Aq, \*(AqMonday\*(Aq, \*(AqTuesday\*(Aq, \*(AqWednesday\*(Aq,
\&           \*(AqThursday\*(Aq, \*(AqFriday\*(Aq, \*(AqSaturday\*(Aq );
\&       return [
\&           map {
\&               {   value => $i++, label => $_ }
\&           } @days
\&       ];
\&   }
.Ve
.PP
In a form:
.PP
.Vb 12
\&   has_field \*(Aqfruit\*(Aq => ( type => \*(AqSelect\*(Aq );
\&   sub options_fruit {
\&       return (
\&           1   => \*(Aqapples\*(Aq,
\&           2   => \*(Aqoranges\*(Aq,
\&           3   => \*(Aqkiwi\*(Aq,
\&       );
\&   }
\&   \-\- or \-\-
\&   has \*(Aqoptions_fruit\*(Aq => ( is => \*(Aqrw\*(Aq, traits => [\*(AqArray\*(Aq],
\&       default => sub { [1 => \*(Aqapples\*(Aq, 2 => \*(Aqoranges\*(Aq,
\&           3 => \*(Aqkiwi\*(Aq] } );
.Ve
.PP
Notice that, as a convenience, you can return a simple array (or arrayref)
for the options array in the 'options_field_name' method. The hashrefs with
\&'value' and 'label' keys will be constructed for you by FormHandler. The
arrayref of hashrefs format can be useful if you want to add another key
to the hashes that you can use in creating the \s-1HTML:\s0
.PP
.Vb 10
\&   sub options_license
\&   {
\&      my $self = shift;
\&      return unless $self\->schema;
\&      my $licenses = $self\->schema\->resultset(\*(AqLicense\*(Aq)\->search({active => 1},
\&           {order_by => \*(Aqsequence\*(Aq});
\&      my @selections;
\&      while ( my $license = $licenses\->next ) {
\&         push @selections, { value => $license\->id, label => $license\->label,
\&              note => $license\->note };
\&      }
\&      return @selections;
\&   }
.Ve
.PP
To have an option being shown, but disabled (thus not selectable), use the
\&'disabled' key with a true value inside this hashref. Let's extend the example
above, adding also inactive licenses, and disabling them.  Keep in mind that a
disabled option can be made selectable later, by removing the disabled
attribute, e.g. using javascript.
.PP
.Vb 10
\&   sub options_license
\&   {
\&      my $self = shift;
\&      return unless $self\->schema;
\&      my $licenses = $self\->schema\->resultset(\*(AqLicense\*(Aq)\->search(undef,
\&           {order_by => \*(Aqsequence\*(Aq});
\&      my @selections;
\&      while ( my $license = $licenses\->next ) {
\&         push @selections, { value => $license\->id, label => $license\->label,
\&              note => $license\->note, disabled => ($license\->active == 0) ? 1 : 0 };
\&      }
\&      return @selections;
\&   }
.Ve
.PP
The final source of the options array is a database when the name of the
accessor is a relation to the table holding the information used to construct
the select list.  The primary key is used as the value. The other columns used are:
.PP
.Vb 4
\&    label_column  \-\-  Used for the labels in the options (default \*(Aqname\*(Aq)
\&    active_column \-\-  The name of the column to be used in the query (default \*(Aqactive\*(Aq)
\&                      that allows the rows retrieved to be restricted
\&    sort_column   \-\-  The name of the column used to sort the options
.Ve
.PP
See also HTML::FormHandler::Model::DBIC, the 'lookup_options' method.
.PP
If the options come from the options_<fieldname> method or the database, they
will be reloaded every time the form is reloaded because the available options
may have changed. To prevent this from happening when the available options are
known to be static, set the 'do_not_reload' flag, and the options will not be
reloaded after the first time
.PP
The sorting of the options may be changed using a 'sort_options' method in a
custom field class. The 'Multiple' field uses this method to put the already
selected options at the top of the list.
.SH "Attributes and Methods"
.IX Header "Attributes and Methods"
.SS "options"
.IX Subsection "options"
This is an array of hashes for this field.
Each has must have a label and value keys.
.SS "set_options"
.IX Subsection "set_options"
Name of form method that sets options
.SS "multiple"
.IX Subsection "multiple"
If true allows multiple input values
.SS "size"
.IX Subsection "size"
This can be used to store how many items should be offered in the \s-1UI\s0
at a given time.  Defaults to 0.
.SS "empty_select"
.IX Subsection "empty_select"
Set to the string value of the select label if you want the renderer
to create an empty select value. This only affects rendering \- it does
not add an entry to the list of options.
.PP
.Vb 2
\&   has_field \*(Aqfruit\*(Aq => ( type => \*(AqSelect,
\&        empty_select => \*(Aq\-\-\-Choose a Fruit\-\-\-\*(Aq );
.Ve
.SS "label_column"
.IX Subsection "label_column"
Sets or returns the name of the method to call on the foreign class
to fetch the text to use for the select list.
.PP
Refers to the method (or column) name to use in a related
object class for the label for select lists.
.PP
Defaults to \*(L"name\*(R"
.SS "localize_labels"
.IX Subsection "localize_labels"
For the renderers: whether or not to call the localize method on the select
labels. Default is off.
.SS "active_column"
.IX Subsection "active_column"
Sets or returns the name of a boolean column that is used as a flag to indicate that
a row is active or not.  Rows that are not active are ignored.
.PP
The default is \*(L"active\*(R".
.PP
If this column exists on the class then the list of options will included only
rows that are marked \*(L"active\*(R".
.PP
The exception is any columns that are marked inactive, but are also part of the
input data will be included with brackets around the label.  This allows
updating records that might have data that is now considered inactive.
.SS "auto_widget_size"
.IX Subsection "auto_widget_size"
This is a way to provide a hint as to when to automatically
select the widget to display for fields with a small number of options.
For example, this can be used to decided to display a radio select for
select lists smaller than the size specified.
.PP
See select_widget below.
.SS "sort_column"
.IX Subsection "sort_column"
Sets or returns the column used in the foreign class for sorting the
options labels.  Default is undefined.
.PP
If this column exists in the foreign table then labels returned will be sorted
by this column.
.PP
If not defined or the column is not found as a method on the foreign class then
the label_column is used as the sort condition.
.SS "select_widget"
.IX Subsection "select_widget"
If the widget is 'select' for the field then will look if the field
also has a auto_widget_size.  If the options list is less than or equal
to the auto_widget_size then will return \f(CW\*(C`radio_group\*(C'\fR if multiple is false,
otherwise will return \f(CW\*(C`checkbox_group\*(C'\fR.
.SS "as_label"
.IX Subsection "as_label"
Returns the option label for the option value that matches the field's current value.
Can be helpful for displaying information about the field in a more friendly format.
This does a string compare.
.SS "error messages"
.IX Subsection "error messages"
Customize 'select_invalid_value' and 'select_not_multiple'. Though neither of these
messages should really be seen by users in a properly constructed select.
.SH "Database relations"
.IX Header "Database relations"
Also see HTML::FormHandler::TraitFor::Model::DBIC.
.PP
The single select is for a \s-1DBIC\s0 'belongs_to' relation. The multiple select is for
a 'many_to_many' relation.
.PP
There is very limited ability to do multiple select with 'has_many' relations.
It will only work in very specific circumstances, and requires setting
the 'has_many' attribute to the name of the primary key of the related table.
This is a somewhat peculiar data structure for a relational database, and may
not be what you really want. A 'has_many' is usually represented with a Repeatable
field, and may require custom code if the form structure doesn't match the database
structure. See HTML::FormHandler::Manual::Cookbook.
.SH "AUTHOR"
.IX Header "AUTHOR"
FormHandler Contributors \- see HTML::FormHandler
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2012 by Gerda Shank.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
