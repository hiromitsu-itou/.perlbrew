.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTML::Entities::Numbered 3"
.TH HTML::Entities::Numbered 3 "2004-09-02" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTML::Entities::Numbered \- Conversion of numbered HTML entities
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use HTML::Entities::Numbered;
\& 
\& $html    = \*(AqHi Honey<b>&hearts;</b>\*(Aq;
\& 
\& # convert named HTML entities to numbered (decimal)
\& $decimal = name2decimal($html);    # Hi Honey<b>&#9829;</b>
\& 
\& # to numbered (hexadecimal)
\& $hex     = name2hex($html);        # Hi Honey<b>&#x2665;</b>
\& 
\& $content = \*(AqCopyright &#169; Larry Wall\*(Aq;
\& 
\& # convert numbered HTML entities (decimal) to named
\& $name1   = decimal2name($content); # Copyright &copy; Larry Wall
\& 
\& $content = \*(AqCopyright &#xA9; Larry Wall\*(Aq;
\& # convert numbered HTML entitites (hexadecimal) to named
\& $name2   = hex2name($content);     # Copyright &copy; Larry Wall
\& 
\& $xml     = \*(Aq&quot;Give me &yen;10,000&quot; &gt; cherie&spades;\*(Aq;
\& 
\& # convert named HTML entities to numbered
\& # except valid XML entities (decimal)
\& $decimal = name2decimal_xml($xml); # &quot;Give me &#165;10,000&quot;
\&                                    # &gt; cherie&#9824;
\& 
\& # to numbered except valid XML entities (hexdecimal)
\& $hex     = name2hex_xml($xml);     # &quot;Give me &#xA5;10,000&quot;
\&                                    # &gt; cherie&#x2660;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
HTML::Entities::Numbered is a content conversion filter for named \s-1HTML\s0
entities (symbols, mathmetical symbols, Greek letters, Latin letters,
etc.).
When an argument of \f(CW\*(C`name2decimal()\*(C'\fR or \f(CW\*(C`name2hex()\*(C'\fR contains some
\&\fBnameable\fR \s-1HTML\s0 entities, they will be replaced to numbered \s-1HTML\s0
entities. And when an argument of \f(CW\*(C`name2decimal_xml()\*(C'\fR or
\&\f(CW\*(C`name2hex_xml()\*(C'\fR contains some \fBnameable\fR numbered \s-1HTML\s0 entities,
they will be replaced to numbered \s-1HTML\s0 entities \fBexcept valid \s-1XML\s0
entities\fR (the excepted \*(L"valid \s-1XML\s0 entities\*(R" are the following five
entities: \f(CW\*(C`&lt;\*(C'\fR, \f(CW\*(C`&gt;\*(C'\fR, \f(CW\*(C`&amp;\*(C'\fR, \f(CW\*(C`&quot;\*(C'\fR, \f(CW\*(C`&apos;\*(C'\fR).
By the same token, when an argument of \f(CW\*(C`decimal2name()\*(C'\fR or
\&\f(CW\*(C`hex2name()\*(C'\fR contains some \fBnameable\fR numbered \s-1HTML\s0 entities, they
will be replaced to named \s-1HTML\s0 entities.
.PP
(the exception \*(L"valid \s-1XML\s0 entities\*(R" means the following five entities:
\&\f(CW\*(C`&lt;\*(C'\fR, \f(CW\*(C`&gt;\*(C'\fR, \f(CW\*(C`&amp;\*(C'\fR, \f(CW\*(C`&quot;\*(C'\fR, \f(CW\*(C`&apos;\*(C'\fR)
.PP
On version 0.03, the entities hash table is imported from
HTML::Entities (with obsolete class
\&\f(CW\*(C`HTML::Entities::Numbered::Extra\*(C'\fR for older releases of Perl).
At the moment, 0.04 (or later) is included
HTML::Entities::Numbered::Table to import \s-1HTML\s0 entities table, and
thereby we do not need to have HTML::Entities (included in
HTML::Parser distribution).
.PP
This may be also useful for making valid \s-1XML\s0 (corrects the undefined
entity references, and enhanced by addition of functions conform to
the \s-1XML\s0).
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
Following all functions are exported by default.
.IP "\(bu" 4
name2decimal
.Sp
Some included named \s-1HTML\s0 entities in argument of \f(CW\*(C`name2decimal()\*(C'\fR
will be replaced to decimal numbered \s-1HTML\s0 entities.
.IP "\(bu" 4
name2hex
.Sp
Some included named \s-1HTML\s0 entities in argument of \f(CW\*(C`name2hex()\*(C'\fR
will be replaced to hexadecimal numbered \s-1HTML\s0 entities.
.IP "\(bu" 4
decimal2name
.Sp
Some include decimal numbered \s-1HTML\s0 entities in argument of
\&\f(CW\*(C`decimal2name()\*(C'\fR will be replaced to named \s-1HTML\s0 entities
(If they're nameable).
.IP "\(bu" 4
hex2name
.Sp
Some include hexadecimal numbered \s-1HTML\s0 entities in argument of
\&\f(CW\*(C`hex2name()\*(C'\fR will be replaced to named \s-1HTML\s0 entities
(If they're nameable).
.IP "\(bu" 4
name2decimal_xml
.Sp
Some included named \s-1HTML\s0 entities in argument of \f(CW\*(C`name2decimal_xml()\*(C'\fR
will be replaced to decimal numbered \s-1HTML\s0 entities \fBexcept valid \s-1XML\s0
entities\fR.
.IP "\(bu" 4
name2hex_xml
.Sp
Some included named \s-1HTML\s0 entities in argument of \f(CW\*(C`name2hex_xml()\*(C'\fR
will be replaced to hexadecimal numbered \s-1HTML\s0 entities \fBexcept valid
\&\s-1XML\s0 entities\fR.
.PP
If you'd prefer not to import them functions into the caller's
namespace, you can call them as below:
.PP
.Vb 1
\& use HTML::Entities::Numbered ();
\& 
\& $decimal = HTML::Entities::Numbered::name2decimal($str);
\& $hex     = HTML::Entities::Numbered::name2hex($str);
\& $named1  = HTML::Entities::Numbered::decimal2name($str);
\& $named2  = HTML::Entities::Numbered::hex2name($str);
\& $decimal = HTML::Entities::Numbered::name2decimal_xml($str);
\& $hex     = HTML::Entities::Numbered::name2hex_xml($str);
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Koichi Taniguchi <taniguchi@livedoor.jp>
.PP
Develop triggered by \s-1IKEBE\s0 Tomohiro <ikebe@cpan.org>
.PP
Many thanks to Tatsuhiko Miyagawa <miyagawa@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2004 Koichi Taniguchi. Japan. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
HTML::Entities,
http://www.w3.org/TR/REC\-html40/sgml/entities.html <http://www.w3.org/TR/REC-html40/sgml/entities.html>
