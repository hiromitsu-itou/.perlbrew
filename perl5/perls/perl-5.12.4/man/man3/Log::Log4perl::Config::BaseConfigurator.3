.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Config::BaseConfigurator 3"
.TH Config::BaseConfigurator 3 "2010-07-23" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Log::Log4perl::Config::BaseConfigurator \- Configurator Base Class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This is a virtual base class, all configurators should be derived from it.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.ie n .IP """new""" 4
.el .IP "\f(CWnew\fR" 4
.IX Item "new"
Constructor, typically called like
.Sp
.Vb 3
\&    my $config_parser = SomeConfigParser\->new(
\&        file => $file,
\&    );
\&
\&    my $data = $config_parser\->parse();
.Ve
.Sp
Instead of \f(CW\*(C`file\*(C'\fR, the derived class \f(CW\*(C`SomeConfigParser\*(C'\fR may define any 
type of configuration input medium (e.g. \f(CW\*(C`url => \*(Aqhttp://foobar\*(Aq\*(C'\fR).
It just has to make sure its \f(CW\*(C`parse()\*(C'\fR method will later pull the input
data from the medium specified.
.Sp
The base class accepts a filename or a reference to an array
of text lines:
.RS 4
.ie n .IP """file""" 4
.el .IP "\f(CWfile\fR" 4
.IX Item "file"
Specifies a file which the \f(CW\*(C`parse()\*(C'\fR method later parses.
.ie n .IP """text""" 4
.el .IP "\f(CWtext\fR" 4
.IX Item "text"
Specifies a reference to an array of scalars, representing configuration
records (typically lines of a file). Also accepts a simple scalar, which it 
splits at its newlines and transforms it into an array:
.Sp
.Vb 5
\&    my $config_parser = MyYAMLParser\->new(
\&        text => [\*(Aqfoo: bar\*(Aq,
\&                 \*(Aqbaz: bam\*(Aq,
\&                ],
\&    );
\&
\&    my $data = $config_parser\->parse();
.Ve
.RE
.RS 4
.Sp
If either \f(CW\*(C`file\*(C'\fR or \f(CW\*(C`text\*(C'\fR parameters have been specified in the 
constructor call, a later call to the configurator's \f(CW\*(C`text()\*(C'\fR method
will return a reference to an array of configuration text lines.
This will typically be used by the \f(CW\*(C`parse()\*(C'\fR method to process the 
input.
.RE
.ie n .IP """parse""" 4
.el .IP "\f(CWparse\fR" 4
.IX Item "parse"
Virtual method, needs to be defined by the derived class.
.SS "Parser requirements"
.IX Subsection "Parser requirements"
.IP "\(bu" 4
If the parser provides variable substitution functionality, it has
to implement it.
.IP "\(bu" 4
The parser's \f(CW\*(C`parse()\*(C'\fR method returns a reference to a hash of hashes (HoH). 
The top-most hash contains the
top-level keywords (\f(CW\*(C`category\*(C'\fR, \f(CW\*(C`appender\*(C'\fR) as keys, associated
with values which are references to more deeply nested hashes.
.IP "\(bu" 4
The \f(CW\*(C`log4perl.\*(C'\fR prefix (e.g. as used in the PropertyConfigurator class)
is stripped, it's not part in the HoH structure.
.IP "\(bu" 4
Each Log4perl config value is indicated by the \f(CW\*(C`value\*(C'\fR key, as in
.Sp
.Vb 1
\&    $data\->{category}\->{Bar}\->{Twix}\->{value} = "WARN, Logfile"
.Ve
.SS "\s-1EXAMPLES\s0"
.IX Subsection "EXAMPLES"
The following Log::Log4perl configuration:
.PP
.Vb 4
\&    log4perl.category.Bar.Twix        = WARN, Screen
\&    log4perl.appender.Screen          = Log::Log4perl::Appender::File
\&    log4perl.appender.Screen.filename = test.log
\&    log4perl.appender.Screen.layout   = Log::Log4perl::Layout::SimpleLayout
.Ve
.PP
needs to be transformed by the parser's \f(CW\*(C`parse()\*(C'\fR method 
into this data structure:
.PP
.Vb 10
\&    { appender => {
\&        Screen  => {
\&          layout => { 
\&            value  => "Log::Log4perl::Layout::SimpleLayout" },
\&            value  => "Log::Log4perl::Appender::Screen",
\&        },
\&      },
\&      category => { 
\&        Bar => { 
\&          Twix => { 
\&            value => "WARN, Screen" } 
\&        } }
\&    }
.Ve
.PP
For a full-fledged example, check out the sample \s-1YAML\s0 parser implementation 
in \f(CW\*(C`eg/yamlparser\*(C'\fR. It uses a simple \s-1YAML\s0 syntax to specify the Log4perl 
configuration to illustrate the concept.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Log::Log4perl::Config::PropertyConfigurator
.PP
Log::Log4perl::Config::DOMConfigurator
.PP
Log::Log4perl::Config::LDAPConfigurator (tbd!)
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2002\-2009 by Mike Schilli <m@perlmeister.com> 
and Kevin Goess <cpan@goess.org>.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
