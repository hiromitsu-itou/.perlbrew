.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Data::Serializer::Raw 3"
.TH Data::Serializer::Raw 3 "2012-02-08" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Data::Serializer::Raw \- Provides unified raw interface to perl serializers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Data::Serializer::Raw;
\&                
\&  $obj = Data::Serializer::Raw\->new();
\&                
\&  $obj = Data::Serializer::Raw\->new(serializer => \*(AqStorable\*(Aq);
\&
\&  $serialized = $obj\->serialize({a => [1,2,3],b => 5});
\&  $deserialized = $obj\->deserialize($serialized);
\&
\&  print "$deserialized\->{b}\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Provides a unified interface to the various serializing modules
currently available.
.PP
This is a straight pass through to the underlying serializer,
nothing else is done. (no encoding, encryption, compression, etc)
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.IP "Please see \fIData::Serializer::Cookbook\fR\|(3)" 4
.IX Item "Please see Data::Serializer::Cookbook"
.SH "METHODS"
.IX Header "METHODS"
.PD 0
.IP "\fBnew\fR \- constructor" 4
.IX Item "new - constructor"
.PD
.Vb 1
\&  $obj = Data::Serializer::Raw\->new();
\&
\&
\&  $obj = Data::Serializer::Raw\->new(
\&                         serializer => \*(AqData::Dumper\*(Aq,
\&                           options  => {},
\&                        );
.Ve
.Sp
\&\fBnew\fR is the constructor object for Data::Serializer::Raw objects.
.RS 4
.IP "\(bu" 4
The default \fIserializer\fR is \f(CW\*(C`Data::Dumper\*(C'\fR
.IP "\(bu" 4
The default \fIoptions\fR is \f(CW\*(C`{}\*(C'\fR (pass nothing on to serializer)
.RE
.RS 4
.RE
.IP "\fBserialize\fR \- serialize reference" 4
.IX Item "serialize - serialize reference"
.Vb 1
\&  $serialized = $obj\->serialize({a => [1,2,3],b => 5});
.Ve
.Sp
This is a straight pass through to the underlying serializer,
nothing else is done. (no encoding, encryption, compression, etc)
.IP "\fBdeserialize\fR \- deserialize reference" 4
.IX Item "deserialize - deserialize reference"
.Vb 1
\&  $deserialized = $obj\->deserialize($serialized);
.Ve
.Sp
This is a straight pass through to the underlying serializer,
nothing else is done. (no encoding, encryption, compression, etc)
.IP "\fBserializer\fR \- change the serializer" 4
.IX Item "serializer - change the serializer"
Currently supports the following serializers:
.RS 4
.IP "\fIBencode\fR\|(3)" 4
.IX Item "Bencode"
.PD 0
.IP "\fIConvert::Bencode\fR\|(3)" 4
.IX Item "Convert::Bencode"
.IP "\fIConvert::Bencode_XS\fR\|(3)" 4
.IX Item "Convert::Bencode_XS"
.IP "\fIConfig::General\fR\|(3)" 4
.IX Item "Config::General"
.IP "\fIData::Denter\fR\|(3)" 4
.IX Item "Data::Denter"
.IP "\fIData::Dumper\fR\|(3)" 4
.IX Item "Data::Dumper"
.IP "\fIData::Taxi\fR\|(3)" 4
.IX Item "Data::Taxi"
.IP "\fIFreezeThaw\fR\|(3)" 4
.IX Item "FreezeThaw"
.IP "\s-1\fIJSON\s0\fR\|(3)" 4
.IX Item "JSON"
.IP "\fIJSON::Syck\fR\|(3)" 4
.IX Item "JSON::Syck"
.IP "\fIPHP::Serialization\fR\|(3)" 4
.IX Item "PHP::Serialization"
.IP "\fIStorable\fR\|(3)" 4
.IX Item "Storable"
.IP "\fIXML::Dumper\fR\|(3)" 4
.IX Item "XML::Dumper"
.IP "\fIXML::Simple\fR\|(3)" 4
.IX Item "XML::Simple"
.IP "\s-1\fIYAML\s0\fR\|(3)" 4
.IX Item "YAML"
.IP "\fIYAML::Syck\fR\|(3)" 4
.IX Item "YAML::Syck"
.RE
.RS 4
.PD
.Sp
Default is to use Data::Dumper.
.Sp
Each serializer has its own caveat's about usage especially when dealing with
cyclical data structures or \s-1CODE\s0 references.  Please see the appropriate
documentation in those modules for further information.
.RE
.IP "\fBoptions\fR \- pass options through to underlying serializer" 4
.IX Item "options - pass options through to underlying serializer"
Currently is only supported by \fIConfig::General\fR\|(3), and \fIXML::Dumper\fR\|(3).
.Sp
.Vb 9
\&  my $obj = Data::Serializer::Raw\->new(serializer => \*(AqConfig::General\*(Aq,
\&                                  options    => {
\&                                             \-LowerCaseNames       => 1,
\&                                             \-UseApacheInclude     => 1,
\&                                             \-MergeDuplicateBlocks => 1,
\&                                             \-AutoTrue             => 1,
\&                                             \-InterPolateVars      => 1
\&                                                },
\&                                              ) or die "$!\en";
\&
\&  or
\&
\&  my $obj = Data::Serializer::Raw\->new(serializer => \*(AqXML::Dumper\*(Aq,
\&                                  options    => { dtd => 1, }
\&                                  ) or die "$!\en";
.Ve
.IP "\fBstore\fR \- serialize data and write it to a file (or file handle)" 4
.IX Item "store - serialize data and write it to a file (or file handle)"
.Vb 1
\&  $obj\->store({a => [1,2,3],b => 5},$file, [$mode, $perm]);
\&
\&  or 
\&
\&  $obj\->store({a => [1,2,3],b => 5},$fh);
.Ve
.Sp
Serializes the reference specified using the \fBserialize\fR method
and writes it out to the specified file or filehandle.
.Sp
If a file path is specified you may specify an optional mode and permission as the
next two arguments.  See IO::File for examples.
.Sp
Trips an exception if it is unable to write to the specified file.
.IP "\fBretrieve\fR \- read data from file (or file handle) and return it after deserialization" 4
.IX Item "retrieve - read data from file (or file handle) and return it after deserialization"
.Vb 1
\&  my $ref = $obj\->retrieve($file);
\&
\&  or 
\&
\&  my $ref = $obj\->retrieve($fh);
.Ve
.Sp
Reads first line of supplied file or filehandle and returns it deserialized.
.SH "AUTHOR"
.IX Header "AUTHOR"
Neil Neely <\fIneil@neely.cx\fR>.
.PP
http://neil\-neely.blogspot.com/
.SH "BUGS"
.IX Header "BUGS"
Please report all bugs here:
.PP
http://rt.cpan.org/Public/Dist/Display.html?Name=Data\-Serializer
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2011 Neil Neely.  All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.2 or,
at your option, any later version of Perl 5 you may have available.
.PP
See http://www.perl.com/language/misc/Artistic.html
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Peter Makholm took the time to profile \fIData::Serializer\fR\|(3) and pointed out the value
of having a very lean implementation that minimized overhead and just used the raw underlying serializers.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), \fIData::Serializer\fR\|(3).
