.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Facebook::Graph::Query 3"
.TH Facebook::Graph::Query 3 "2011-10-19" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Facebook::Graph::Query \- Simple and fast searching and fetching of Facebook data.
.SH "VERSION"
.IX Header "VERSION"
version 1.0301
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& my $fb = Facebook::Graph\->new;
\& 
\& my $perl_page = $fb\->find(\*(Aq16665510298\*(Aq)
\&    \->include_metadata
\&    \->request
\&    \->as_hashref;
\& 
\& my $sarah_bownds = $fb\->find(\*(Aqsarahbownds\*(Aq)
\&    \->select_fields(qw(id name))
\&    \->request
\&    \->as_hashref;
\&
\& # this one would require an access token
\& my $new_years_posts = $fb\->query
\&    \->from(\*(Aqposts\*(Aq)
\&    \->where_since(\*(Aq1 January 2011\*(Aq)
\&    \->where_until(\*(Aq2 January 2011\*(Aq)
\&    \->limit(25)
\&    \->request
\&    \->as_hashref;
\&
\& # this one would require an access token
\& my $new_car_posts = $fb\->query
\&    \->search(\*(Aqcar\*(Aq, \*(Aqmy_news\*(Aq)
\&    \->where_since(\*(Aqyesterday\*(Aq)
\&    \->request
\&    \->as_hashref;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module presents a programatic approach to building the queries necessary to search and retrieve Facebook data. It provides an almost \s-1SQL\s0 like way of writing queries using code. For example:
.PP
.Vb 7
\& my $results = $fb
\&    \->select_fields(qw(id name))
\&    \->search(\*(AqDave\*(Aq,\*(Aquser\*(Aq)
\&    \->where_since(\*(Aqyesterday\*(Aq)
\&    \->limit_results(25)
\&    \->request
\&    \->as_hashref;
.Ve
.PP
The above query, if you were read it like text, says: \*(L"Give me the user ids and full names of all users named Dave that have been created since yesterday, and limit the result set to the first 25.\*(R"
.SH "METHODS"
.IX Header "METHODS"
.SS "find ( id )"
.IX Subsection "find ( id )"
Fetch a single item.
.PP
\fIid\fR
.IX Subsection "id"
.PP
The unique id or object name of an object.
.PP
\&\fBExample:\fR For user \*(L"Sarah Bownds\*(R" you could use either her profile id \f(CW\*(C`sarahbownds\*(C'\fR or her object id \f(CW767598108\fR.
.SS "from ( context )"
.IX Subsection "from ( context )"
If you prefer to search by keyword see the \f(CW\*(C`search\*(C'\fR method.
.PP
\fIcontext\fR
.IX Subsection "context"
.PP
One of the following contexts:
.IP "my_news" 4
.IX Item "my_news"
The current user's news feed (home page). Requires that you have an access_token so you know who the current user is.
.IP "post" 4
.IX Item "post"
All public posts.
.IP "user" 4
.IX Item "user"
All people.
.IP "page" 4
.IX Item "page"
All pages.
.IP "event" 4
.IX Item "event"
All events.
.IP "group" 4
.IX Item "group"
All groups.
.SS "search ( query, context )"
.IX Subsection "search ( query, context )"
Perform a keyword search on a group of items.
.PP
If you prefer not to search by keyword see the \f(CW\*(C`from\*(C'\fR method.
.PP
\fIquery\fR
.IX Subsection "query"
.PP
They keywords to search by.
.PP
\fIcontext\fR
.IX Subsection "context"
.PP
See the \f(CW\*(C`context\*(C'\fR param in the \f(CW\*(C`from\*(C'\fR method.
.SS "limit_results ( amount )"
.IX Subsection "limit_results ( amount )"
The result set will only return a certain number of records when this is set. Useful for paging result sets. Returns \f(CW$self\fR for method chaining.
.PP
\fIamount\fR
.IX Subsection "amount"
.PP
An integer representing the number of records to be returned.
.SS "offset_results ( amount )"
.IX Subsection "offset_results ( amount )"
Skips ahead the result set by the amount. Useful for paging result sets. Is only applied when used in combination with \f(CW\*(C`limit_results\*(C'\fR. Returns \f(CW$self\fR for method chaining.
.PP
\fIamount\fR
.IX Subsection "amount"
.PP
An integer representing the amount to offset the results by.
.SS "include_metadata ( [ include ] )"
.IX Subsection "include_metadata ( [ include ] )"
Adds metadata to the result set including things like connections to other objects and the object type being returned. Returns \f(CW$self\fR for method chaining.
.PP
\fIinclude\fR
.IX Subsection "include"
.PP
Defaults to 1 when the method is called, but defaults to 0 if the method is never called. You may set it specifically by passing in a 1 or 0.
.SS "select_fields ( fields )"
.IX Subsection "select_fields ( fields )"
Limit the result set to only include the specific fields if they exist in the objects in the result set. Returns \f(CW$self\fR for method chaining. May be called multiple times to add more fields.
.PP
\fIfields\fR
.IX Subsection "fields"
.PP
An array of fields you want in the result set.
.PP
\&\fBExample:\fR 'id', 'name', 'picture'
.SS "where_ids ( ids )"
.IX Subsection "where_ids ( ids )"
Limit the result set to these specifically identified objects. Returns \f(CW$self\fR for method chaining. May be called multiple times to add more ids.
.PP
\fIids\fR
.IX Subsection "ids"
.PP
An array of object ids, object names, or URIs.
.PP
\&\fBExample:\fR 'http://www.thegamecrafter.com/', 'sarahbownds', '16665510298'
.SS "where_until ( date )"
.IX Subsection "where_until ( date )"
Include only records that were created before \f(CW\*(C`date\*(C'\fR. Returns \f(CW$self\fR for method chaining.
.PP
\fIdate\fR
.IX Subsection "date"
.PP
Anything accepted by \s-1PHP\s0's strtotime function <http://php.net/manual/en/function.strtotime.php>.
.SS "where_since ( date )"
.IX Subsection "where_since ( date )"
Include only records that have been created since \f(CW\*(C`date\*(C'\fR. Returns \f(CW$self\fR for method chaining.
.PP
\fIdate\fR
.IX Subsection "date"
.PP
Anything accepted by \s-1PHP\s0's strtotime function <http://php.net/manual/en/function.strtotime.php>.
.SS "uri_as_string ()"
.IX Subsection "uri_as_string ()"
Returns a \s-1URI\s0 string based upon all the methods you've called so far on the query. Mainly useful for debugging. Usually you want to call \f(CW\*(C`request\*(C'\fR and have it fetch the data for you.
.SS "request ( [ uri ] )"
.IX Subsection "request ( [ uri ] )"
Forms a \s-1URI\s0 string based on every method you've called so far, and fetches the data. Returns a Facebook::Graph::Response object.
.PP
\fIuri\fR
.IX Subsection "uri"
.PP
Optionally pass in your own \s-1URI\s0 string and all the other options will be ignored. This is mainly useful with metadata connections. See \f(CW\*(C`include_metadata\*(C'\fR for details.
.SH "LEGAL"
.IX Header "LEGAL"
Facebook::Graph is Copyright 2010 Plain Black Corporation (<http://www.plainblack.com>) and is licensed under the same terms as Perl itself.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 310:" 4
.IX Item "Around line 310:"
You forgot a '=back' before '=head2'
.IP "Around line 324:" 4
.IX Item "Around line 324:"
=back without =over
