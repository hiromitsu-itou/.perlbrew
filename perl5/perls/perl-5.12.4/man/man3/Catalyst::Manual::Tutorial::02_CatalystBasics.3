.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Catalyst::Manual::Tutorial::02_CatalystBasics 3"
.TH Catalyst::Manual::Tutorial::02_CatalystBasics 3 "2011-09-04" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::Manual::Tutorial::02_CatalystBasics \- Catalyst Tutorial \- Chapter 2: Catalyst Application Development Basics
.SH "OVERVIEW"
.IX Header "OVERVIEW"
This is \fBChapter 2 of 10\fR for the Catalyst tutorial.
.PP
Tutorial Overview
.IP "1." 4
Introduction
.IP "2." 4
\&\fB02_Catalyst Basics\fR
.IP "3." 4
More Catalyst Basics
.IP "4." 4
Basic \s-1CRUD\s0
.IP "5." 4
Authentication
.IP "6." 4
Authorization
.IP "7." 4
Debugging
.IP "8." 4
Testing
.IP "9." 4
Advanced \s-1CRUD\s0
.IP "10." 4
Appendices
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
In this chapter of the tutorial, we will create a very basic Catalyst
web application, demonstrating a number of powerful capabilities, such
as:
.IP "\(bu" 4
Helper Scripts
.Sp
Catalyst helper scripts that can be used to rapidly bootstrap the
skeletal structure of an application.
.IP "\(bu" 4
\&\s-1MVC\s0
.Sp
Model/View/Controller (\s-1MVC\s0) provides an architecture that facilitates a
clean \*(L"separation of control\*(R" between the different portions of your
application. Given that many other documents cover this subject in
detail, \s-1MVC\s0 will not be discussed in depth here (for an excellent
introduction to \s-1MVC\s0 and general Catalyst concepts, please see
Catalyst::Manual::About). In short:
.RS 4
.IP "\(bu" 4
Model
.Sp
The model usually represents a data store. In most applications, the
model equates to the objects that are created from and saved to your \s-1SQL\s0
database.
.IP "\(bu" 4
View
.Sp
The view takes model objects and renders them into something for the end
user to look at. Normally this involves a template-generation tool that
creates \s-1HTML\s0 for the user's web browser, but it could easily be code
that generates other forms such as \s-1PDF\s0 documents, e\-mails, spreadsheets,
or even \*(L"behind the scenes\*(R" formats such as \s-1XML\s0 and \s-1JSON\s0.
.IP "\(bu" 4
Controller
.Sp
As suggested by its name, the controller takes user requests and routes
them to the necessary model and view.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\s-1ORM\s0
.Sp
The use of Object-Relational Mapping (\s-1ORM\s0) technology for database
access. Specifically, \s-1ORM\s0 provides an automated and standardized means
to persist and restore objects to/from a relational database and will
automatically create our Catalyst model for use with a database.
.PP
You can checkout the source code for this example from the catalyst
subversion repository as per the instructions in
Catalyst::Manual::Tutorial::01_Intro.
.SH "CREATE A CATALYST PROJECT"
.IX Header "CREATE A CATALYST PROJECT"
Catalyst provides a number of helper scripts that can be used to quickly
flesh out the basic structure of your application. All Catalyst projects
begin with the \f(CW\*(C`catalyst.pl\*(C'\fR helper (see
Catalyst::Helper for more information on helpers).
Also note that as of Catalyst 5.7000, you will not have the helper
scripts unless you install both Catalyst::Runtime
and Catalyst::Devel.
.PP
In this first chapter of the tutorial, use the Catalyst \f(CW\*(C`catalyst.pl\*(C'\fR
script to initialize the framework for an application called \f(CW\*(C`Hello\*(C'\fR:
.PP
.Vb 9
\&    $ catalyst.pl Hello
\&    created "Hello"
\&    created "Hello/script"
\&    created "Hello/lib"
\&    created "Hello/root"
\&    ...
\&    created "Hello/script/hello_create.pl"
\&    Change to application directory and Run "perl Makefile.PL" to make sure your install is complete
\&    $ cd Hello
.Ve
.PP
Note: If you are using Strawberry Perl on Win32, drop the \*(L".pl\*(R"
from the end of the \*(L"catalyst.pl\*(R" command and simply use
\&\*(L"catalyst Hello\*(R".
.PP
The \f(CW\*(C`catalyst.pl\*(C'\fR helper script will display the names of the
directories and files it creates:
.PP
.Vb 10
\&    Changes               # Record of application changes
\&    lib                   # Lib directory for your app\*(Aqs Perl modules
\&        Hello             # Application main code directory
\&            Controller    # Directory for Controller modules 
\&            Model         # Directory for Models
\&            View          # Directory for Views
\&        Hello.pm          # Base application module
\&    Makefile.PL           # Makefile to build application
\&    hello.conf            # Application configuration file
\&    README                # README file
\&    root                  # Equiv of htdocs, dir for templates, css, javascript
\&        favicon.ico
\&        static            # Directory for static files
\&            images        # Directory for image files used in welcome screen
\&    script                # Directory for Perl scripts
\&        hello_cgi.pl      # To run your app as a cgi (not recommended)
\&        hello_create.pl   # To create models, views, controllers
\&        hello_fastcgi.pl  # To run app as a fastcgi program
\&        hello_server.pl   # The normal development server
\&        hello_test.pl     # Test your app from the command line
\&    t                     # Directory for tests
\&        01app.t           # Test scaffold       
\&        02pod.t           
\&        03podcoverage.t
.Ve
.PP
Catalyst will \*(L"auto-discover\*(R" modules in the Controller, Model, and View
directories. When you use the \f(CW\*(C`hello_create.pl\*(C'\fR script it will create Perl
module scaffolds in those directories, plus test files in the \*(L"t\*(R"
directory. The default location for templates is in the \*(L"root\*(R"
directory. The scripts in the script directory will always start with
the lowercased version of your application name. If your app is MaiTai,
then the create script would be \*(L"maitai_create.pl\*(R".
.PP
Though it's too early for any significant celebration, we already have a
functioning application. We can use the Catalyst supplied script to
start up a development server and view the default Catalyst page in your
browser. All scripts in the script directory should be run from the base
directory of your application, so change to the Hello directory.
.PP
Run the following command to start up the built-in development web
server (make sure you didn't forget the "\f(CW\*(C`cd Hello\*(C'\fR" from the previous
step):
.PP
\&\fBNote\fR: The \*(L"\-r\*(R" argument enables reloading on code changes so you
don't have to stop and start the server when you update code. See
\&\f(CW\*(C`perldoc script/hello_server.pl\*(C'\fR or \f(CW\*(C`script/hello_server.pl \-\-help\*(C'\fR
for additional options you might find helpful. Most of the rest of the
tutorial will assume that you are using \*(L"\-r\*(R" when you start the
development server, but feel free to manually start and stop it (use
\&\f(CW\*(C`Ctrl\-C\*(C'\fR to breakout of the dev server) if you prefer.
.PP
.Vb 7
\&    $ script/hello_server.pl \-r
\&    [debug] Debug messages enabled
\&    [debug] Statistics enabled
\&    [debug] Loaded plugins:
\&    .\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-.
\&    | Catalyst::Plugin::ConfigLoader  0.30                                       |
\&    \*(Aq\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\*(Aq
\&    
\&    [debug] Loaded dispatcher "Catalyst::Dispatcher"
\&    [debug] Loaded engine "Catalyst::Engine"
\&    [debug] Found home "/home/catalyst/Hello"
\&    [debug] Loaded Config "/home/catalyst/Hello/hello.conf"
\&    [debug] Loaded components:
\&    .\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-.
\&    | Class                                                           | Type     |
\&    +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-+
\&    | Hello::Controller::Root                                         | instance |
\&    \*(Aq\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\*(Aq
\&    
\&    [debug] Loaded Private actions:
\&    .\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-.
\&    | Private              | Class                                | Method       |
\&    +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&    | /default             | Hello::Controller::Root              | default      |
\&    | /end                 | Hello::Controller::Root              | end          |
\&    | /index               | Hello::Controller::Root              | index        |
\&    \*(Aq\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\*(Aq
\&    
\&    [debug] Loaded Path actions:
\&    .\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-.
\&    | Path                                | Private                              |
\&    +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&    | /                                   | /index                               |
\&    | /                                   | /default                             |
\&    \*(Aq\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\*(Aq
\&    
\&    [info] Hello powered by Catalyst 5.90002
\&    HTTP::Server::PSGI: Accepting connections at http://0:3000/
.Ve
.PP
Point your web browser to <http://localhost:3000> (substituting a
different hostname or \s-1IP\s0 address as appropriate) and you should be
greeted by the Catalyst welcome screen (if you get some other welcome
screen or an \*(L"Index\*(R" screen, you probably forgot to specify port 3000 in
your \s-1URL\s0).  Information similar to the following should be appended to
the logging output of the development server:
.PP
.Vb 10
\&    [info] Hello powered by Catalyst 5.90002
\&    HTTP::Server::PSGI: Accepting connections at http://0:3000/
\&    [info] *** Request 1 (0.067/s) [19026] [Tue Aug 30 17:24:32 2011] ***
\&    [debug] "GET" request for "/" from "192.168.245.2"
\&    [debug] Path is "/"
\&    [debug] Response Code: 200; Content\-Type: text/html; charset=utf\-8; Content\-Length: 5613
\&    [info] Request took 0.040895s (24.453/s)
\&    .\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-.
\&    | Action                                                     | Time      |
\&    +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-+
\&    | /index                                                     | 0.000916s |
\&    | /end                                                       | 0.000877s |
\&    \*(Aq\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\*(Aq
.Ve
.PP
\&\fBNote\fR: Press \f(CW\*(C`Ctrl\-C\*(C'\fR to break out of the development server if
necessary.
.SH "HELLO WORLD"
.IX Header "HELLO WORLD"
.SS "The Simplest Way"
.IX Subsection "The Simplest Way"
The Root.pm controller is a place to put global actions that usually
execute on the root \s-1URL\s0. Open the \f(CW\*(C`lib/Hello/Controller/Root.pm\*(C'\fR file
in your editor. You will see the \*(L"index\*(R" subroutine, which is
responsible for displaying the welcome screen that you just saw in your
browser.
.PP
.Vb 2
\&    sub index :Path :Args(0) {
\&        my ( $self, $c ) = @_;
\&    
\&        # Hello World
\&        $c\->response\->body( $c\->welcome_message );
\&    }
.Ve
.PP
Later on you'll want to change that to something more reasonable, such
as a \*(L"404\*(R" message or a redirect, but for now just leave it alone.
.PP
The "\f(CW$c\fR\*(L" here refers to the Catalyst context, which is used to access
the Catalyst application. In addition to many other things, the Catalyst
context provides access to \*(R"response\*(L" and \*(R"request" objects. (See
Catalyst::Runtime, Catalyst::Response, and
Catalyst::Request)
.PP
\&\f(CW\*(C`$c\->response\->body\*(C'\fR sets the \s-1HTTP\s0 response (see
Catalyst::Response), while
\&\f(CW\*(C`$c\->welcome_message\*(C'\fR is a special method that returns the welcome
message that you saw in your browser.
.PP
The \*(L":Path :\fIArgs\fR\|(0)\*(R" after the method name are attributes which
determine which URLs will be dispatched to this method. (You might see
\&\*(L":Private\*(R" if you are using an older version of Catalyst, but using that
with \*(L"default\*(R" or \*(L"index\*(R" is currently deprecated.  If so, you should
also probably upgrade before continuing the tutorial.)
.PP
Some \s-1MVC\s0 frameworks handle dispatching in a central place. Catalyst, by
policy, prefers to handle \s-1URL\s0 dispatching with attributes on controller
methods. There is a lot of flexibility in specifying which URLs to
match.  This particular method will match all URLs, because it doesn't
specify the path (nothing comes after \*(L"Path\*(R"), but will only accept a
\&\s-1URL\s0 without any args because of the \*(L":\fIArgs\fR\|(0)\*(R".
.PP
The default is to map URLs to controller names, and because of the way
that Perl handles namespaces through package names, it is simple to
create hierarchical structures in Catalyst. This means that you can
create controllers with deeply nested actions in a clean and logical
way. For example, the \s-1URL\s0 \f(CW\*(C`http://hello.com/admin/articles/create\*(C'\fR maps
to the package \f(CW\*(C`Hello::Controller::Admin::Articles\*(C'\fR, and the \f(CW\*(C`create\*(C'\fR
method.
.PP
While you leave the \f(CW\*(C`script/hello_server.pl \-r\*(C'\fR command running the
development server in one window (don't forget the \*(L"\-r\*(R" on the end!),
open another window and add the following subroutine to your
\&\f(CW\*(C`lib/Hello/Controller/Root.pm\*(C'\fR file:
.PP
.Vb 2
\&    sub hello :Global {
\&        my ( $self, $c ) = @_;
\&    
\&        $c\->response\->body("Hello, World!");
\&    }
.Ve
.PP
\&\fB\s-1TIP\s0\fR: See Appendix 1 for tips on removing the leading spaces when
cutting and pasting example code from POD-based documents.
.PP
Notice in the window running the Development Server that you should
get output similar to the following:
.PP
.Vb 2
\&    Saw changes to the following files:
\&     \- /home/catalyst/Hello/lib/Hello/Controller/Root.pm (modify)
\&    
\&    Attempting to restart the server
\&    ...
\&    [debug] Loaded Private actions:
\&    .\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-.
\&    | Private              | Class                                | Method       |
\&    +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&    | /default             | Hello::Controller::Root              | default      |
\&    | /end                 | Hello::Controller::Root              | end          |
\&    | /index               | Hello::Controller::Root              | index        |
\&    | /hello               | Hello::Controller::Root              | hello        |
\&    \*(Aq\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\*(Aq
\&    ...
.Ve
.PP
The development server noticed the change in \f(CW\*(C`Hello::Controller::Root\*(C'\fR
and automatically restarted itself.
.PP
Go to <http://localhost:3000/hello> to see \*(L"Hello, World!\*(R".   Also
notice that the newly defined 'hello' action is listed under \*(L"Loaded
Private actions\*(R" in the development server debug output.
.SS "Hello, World! Using a View and a Template"
.IX Subsection "Hello, World! Using a View and a Template"
In the Catalyst world a \*(L"View\*(R" itself is not a page of \s-1XHTML\s0 or a
template designed to present a page to a browser. Rather, it is the
module that determines the \fItype\fR of view \*(-- \s-1HTML\s0, pdf, \s-1XML\s0, etc. For
the thing that generates the \fIcontent\fR of that view (such as a
Toolkit Template template file), the actual templates go under the
\&\*(L"root\*(R" directory.
.PP
To create a \s-1TT\s0 view, run:
.PP
.Vb 1
\&    $ script/hello_create.pl view HTML TT
.Ve
.PP
This creates the \f(CW\*(C`lib/Hello/View/HTML.pm\*(C'\fR module, which is a subclass
of \f(CW\*(C`Catalyst::View::TT\*(C'\fR.
.IP "\(bu" 4
The \*(L"view\*(R" keyword tells the create script that you are creating a view.
.IP "\(bu" 4
The first argument \*(L"\s-1HTML\s0\*(R" tells the script to name the View module \*(L"\s-1HTML\s0.pm\*(R",
which is a commonly used name for \s-1TT\s0 views.  You can name it anything you want,
such as \*(L"MyView.pm\*(R". If you have more than one view, be sure to set the
default_view in Hello.pm (See Catalyst::View::TT for more
details on setting this).
.IP "\(bu" 4
The final \*(L"\s-1TT\s0\*(R" tells Catalyst the \fItype\fR of the view, with \*(L"\s-1TT\s0\*(R"
indicating that you want to a Template Toolkit view.
.PP
If you look at \f(CW\*(C`lib/Hello/View/HTML.pm\*(C'\fR you will find that it only
contains a config statement to set the \s-1TT\s0 extension to \*(L".tt\*(R".
.PP
Now that the \s-1HTML\s0.pm \*(L"View\*(R" exists, Catalyst will autodiscover it and be
able to use it to display the view templates using the \*(L"process\*(R" method
that it inherits from the \f(CW\*(C`Catalyst::View::TT\*(C'\fR class.
.PP
Template Toolkit is a very full featured template facility, with
excellent documentation at http://template\-toolkit.org/ <http://template-toolkit.org/>, but since
this is not a \s-1TT\s0 tutorial, we'll stick to only basic \s-1TT\s0 usage here (and
explore some of the more common \s-1TT\s0 features in later chapters of the
tutorial).
.PP
Create a \f(CW\*(C`root/hello.tt\*(C'\fR template file (put it in the \f(CW\*(C`root\*(C'\fR under the
\&\f(CW\*(C`Hello\*(C'\fR directory that is the base of your application). Here is a
simple sample:
.PP
.Vb 3
\&    <p>
\&        This is a TT view template, called \*(Aq[% template.name %]\*(Aq.
\&    </p>
.Ve
.PP
[% and %] are markers for the \s-1TT\s0 parts of the template. Inside you can
access Perl variables and classes, and use \s-1TT\s0 directives. In this case,
we're using a special \s-1TT\s0 variable that defines the name of the template
file (\f(CW\*(C`hello.tt\*(C'\fR).  The rest of the template is normal \s-1HTML\s0.
.PP
Change the hello method in \f(CW\*(C`lib/Hello/Controller/Root.pm\*(C'\fR to the
following:
.PP
.Vb 2
\&    sub hello :Global {
\&        my ( $self, $c ) = @_;
\&    
\&        $c\->stash(template => \*(Aqhello.tt\*(Aq);
\&    }
.Ve
.PP
This time, instead of doing \f(CW\*(C`$c\->response\->body()\*(C'\fR, you are
setting the value of the \*(L"template\*(R" hash key in the Catalyst \*(L"stash\*(R", an
area for putting information to share with other parts of your
application. The \*(L"template\*(R" key determines which template will be
displayed at the end of the request cycle. Catalyst controllers have a
default \*(L"end\*(R" action for all methods which causes the first (or default)
view to be rendered (unless there's a \f(CW\*(C`$c\->response\- >body()\*(C'\fR
statement). So your template will be magically displayed at the end of
your method.
.PP
After saving the file, the development server should automatically
restart (again, the tutorial is written to assume that you are using the
\&\*(L"\-r\*(R" option \*(-- manually restart it if you aren't), and look at
<http://localhost:3000/hello> in your again. You should see the
template that you just made.
.PP
\&\fB\s-1TIP:\s0\fR If you keep the server running with \*(L"\-r\*(R" in a \*(L"background
window,\*(R" don't let that window get totally hidden... if you have an
syntax error in your code, the debug server output will contain the
error information.
.PP
\&\fBNote:\fR You will probably run into a variation of the \*(L"stash\*(R"
statement above that looks like:
.PP
.Vb 1
\&    $c\->stash\->{template} = \*(Aqhello.tt\*(Aq;
.Ve
.PP
Although this style is still relatively common, the approach we
used previous is becoming more common because it allows you to
set multiple stash variables in one line.  For example:
.PP
.Vb 2
\&    $c\->stash(template => \*(Aqhello.tt\*(Aq, foo => \*(Aqbar\*(Aq, 
\&              another_thing => 1);
.Ve
.PP
You can also set multiple stash values with a hashref:
.PP
.Vb 2
\&    $c\->stash({template => \*(Aqhello.tt\*(Aq, foo => \*(Aqbar\*(Aq, 
\&              another_thing => 1});
.Ve
.PP
Any of these formats work, but the \f(CW\*(C`$c\->stash(name => value);\*(C'\fR
style is growing in popularity \*(-- you may wish to use it all the time
(even when you are only setting a single value).
.SH "CREATE A SIMPLE CONTROLLER AND AN ACTION"
.IX Header "CREATE A SIMPLE CONTROLLER AND AN ACTION"
Create a controller named \*(L"Site\*(R" by executing the create script:
.PP
.Vb 1
\&    $ script/hello_create.pl controller Site
.Ve
.PP
This will create a \f(CW\*(C`lib/Hello/Controller/Site.pm\*(C'\fR file (and a test
file). Bring Site.pm up in your editor, and you can see that there's not
much there.
.PP
In \f(CW\*(C`lib/Hello/Controller/Site.pm\*(C'\fR, add the following method:
.PP
.Vb 2
\&    sub test :Local {
\&        my ( $self, $c ) = @_;
\&    
\&        $c\->stash(username => \*(AqJohn\*(Aq,
\&                  template => \*(Aqsite/test.tt\*(Aq);
\&    }
.Ve
.PP
Notice the \*(L"Local\*(R" attribute on the \f(CW\*(C`test\*(C'\fR method. This will cause the
\&\f(CW\*(C`test\*(C'\fR action (now that we have assigned an \*(L"action type\*(R" to the method
it appears as a \*(L"controller action\*(R" to Catalyst) to be executed on the
\&\*(L"controller/method\*(R" \s-1URL\s0, or, in this case, \*(L"site/test\*(R".  We will see
additional information on controller actions throughout the rest of the
tutorial, but if you are curious take a look at
\&\*(L"Actions\*(R" in Catalyst::Manual::Intro.
.PP
It's not actually necessary to set the template value as we do here.  By
default \s-1TT\s0 will attempt to render a template that follows the naming
pattern \*(L"controller/method.tt\*(R", and we're following that pattern here.
However, in other situations you will need to specify the template (such
as if you've \*(L"forwarded\*(R" to the method, or if it doesn't follow the
default naming convention).
.PP
We've also put the variable \*(L"username\*(R" into the stash, for use in the
template.
.PP
Make a subdirectory \*(L"site\*(R" in the \*(L"root\*(R" directory.
.PP
.Vb 1
\&    $ mkdir root/site
.Ve
.PP
Create a new template file in that direction named \f(CW\*(C`root/site/test.tt\*(C'\fR
and include a line like:
.PP
.Vb 1
\&    <p>Hello, [% username %]!</p>
.Ve
.PP
Once the server automatically restarts, notice in the server output that
\&\f(CW\*(C`/site/test\*(C'\fR is listed in the Loaded Path actions.  Go to
<http://localhost:3000/site/test> in your browser and you should see
your test.tt file displayed, including the name \*(L"John\*(R" that you set in
the controller.
.PP
You can jump to the next chapter of the tutorial here:
More Catalyst Basics
.SH "AUTHORS"
.IX Header "AUTHORS"
Gerda Shank, \f(CW\*(C`gerda.shank@gmail.com\*(C'\fR
Kennedy Clark, \f(CW\*(C`hkclark@gmail.com\*(C'\fR
.PP
Feel free to contact the author for any errors or suggestions, but the
best way to report issues is via the \s-1CPAN\s0 \s-1RT\s0 Bug system at
https://rt.cpan.org/Public/Dist/Display.html?Name=Catalyst\-Manual <https://rt.cpan.org/Public/Dist/Display.html?Name=Catalyst-Manual>.
.PP
Copyright 2006\-2011, Kennedy Clark, under the
Creative Commons Attribution Share-Alike License Version 3.0
(http://creativecommons.org/licenses/by\-sa/3.0/us/ <http://creativecommons.org/licenses/by-sa/3.0/us/>).
