.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "README 3"
.TH README 3 "2012-03-05" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
Back in the early days of the web, many people learned Perl because of a
wonderful Perl library called \s-1CGI\s0. It was simple enough to get started
without knowing much about the language and powerful enough to keep you
going, learning by doing was much fun. While most of the techniques used are
outdated now, the idea behind it is not. Mojolicious is a new attempt at
implementing this idea using state of the art technology.
.SS "Features"
.IX Subsection "Features"
.IP "\(bu" 2
An amazing real-time web framework supporting a simplified single file mode
through Mojolicious::Lite.
.RS 2
.Sp
.RS 2
Powerful out of the box with RESTful routes, plugins, Perl-ish templates,
session management, signed cookies, testing framework, static file server,
I18N, first class unicode support and much more for you to discover.
.RE
.RE
.RS 2
.RE
.IP "\(bu" 2
Very clean, portable and Object Oriented pure Perl \s-1API\s0 without any hidden
magic and no requirements besides Perl 5.10.1 (although 5.12+ is recommended,
and optional \s-1CPAN\s0 modules will be used to provide advanced functionality if
they are installed).
.IP "\(bu" 2
Full stack \s-1HTTP\s0 1.1 and WebSocket client/server implementation with IPv6,
\&\s-1TLS\s0, Bonjour, \s-1IDNA\s0, Comet (long polling), chunking and multipart support.
.IP "\(bu" 2
Built-in non-blocking I/O web server supporting libev and hot deployment,
perfect for embedding.
.IP "\(bu" 2
Automatic \s-1CGI\s0 and \s-1PSGI\s0 detection.
.IP "\(bu" 2
\&\s-1JSON\s0 and \s-1HTML5/XML\s0 parser with \s-1CSS3\s0 selector support.
.IP "\(bu" 2
Fresh code based upon years of experience developing Catalyst.
.SS "Installation"
.IX Subsection "Installation"
All you need is a oneliner, it takes less than a minute.
.PP
.Vb 1
\&  $ curl get.mojolicio.us | sh
.Ve
.SS "Getting Started"
.IX Subsection "Getting Started"
These three lines are a whole web application.
.PP
.Vb 1
\&  use Mojolicious::Lite;
\&
\&  get \*(Aq/\*(Aq => {text => \*(AqHello World!\*(Aq};
\&
\&  app\->start;
.Ve
.PP
To run this example with the built-in development web server just put the
code into a file and start it with \f(CW\*(C`morbo\*(C'\fR.
.PP
.Vb 2
\&  $ morbo hello.pl
\&  Server available at http://127.0.0.1:3000.
\&
\&  $ curl http://127.0.0.1:3000/
\&  Hello World!
.Ve
.SS "Duct tape for the \s-1HTML5\s0 web"
.IX Subsection "Duct tape for the HTML5 web"
Web development for humans, making hard things possible and everything fun.
.PP
.Vb 1
\&  use Mojolicious::Lite;
\&
\&  # Simple plain text response
\&  get \*(Aq/\*(Aq => {text => \*(AqHello World!\*(Aq};
\&
\&  # Route associating "/time" with template in DATA section
\&  get \*(Aq/time\*(Aq => \*(Aqclock\*(Aq;
\&
\&  # RESTful web service with JSON and text representation
\&  get \*(Aq/list/:offset\*(Aq => sub {
\&    my $self    = shift;
\&    my $numbers = [0 .. $self\->param(\*(Aqoffset\*(Aq)];
\&    $self\->respond_to(
\&      json => {json => $numbers},
\&      txt  => {text => join(\*(Aq,\*(Aq, @$numbers)}
\&    );
\&  };
\&
\&  # Scrape information from remote sites
\&  post \*(Aq/title\*(Aq => sub {
\&    my $self = shift;
\&    my $url  = $self\->param(\*(Aqurl\*(Aq) || \*(Aqhttp://mojolicio.us\*(Aq;
\&    $self\->render_text(
\&      $self\->ua\->get($url)\->res\->dom\->html\->head\->title\->text);
\&  };
\&
\&  # WebSocket echo service
\&  websocket \*(Aq/echo\*(Aq => sub {
\&    my $self = shift;
\&    $self\->on(message => sub {
\&      my ($self, $message) = @_;
\&      $self\->send("echo: $message");
\&    });
\&  };
\&
\&  app\->start;
\&  _\|_DATA_\|_
\&
\&  @@ clock.html.ep
\&  % use Time::Piece;
\&  % my $now = localtime;
\&  The time is <%= $now\->hms %>.
.Ve
.PP
Single file prototypes like this one can easily grow into well-structured
applications.
.SS "Want to know more?"
.IX Subsection "Want to know more?"
Take a look at our excellent documentation at <http://mojolicio.us/perldoc>!
