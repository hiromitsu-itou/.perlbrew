.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "UNIVERSAL::isa 3"
.TH UNIVERSAL::isa 3 "2011-06-15" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
UNIVERSAL::isa \- recover from people calling UNIVERSAL::isa as a function
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # from the shell
\&    echo \*(Aqexport PERL5OPT=\-MUNIVERSAL::isa\*(Aq >> /etc/profile
\&
\&    # within your program
\&    use UNIVERSAL::isa;
\&
\&    # enable warnings for all dodgy uses of UNIVERSAL::isa
\&    use UNIVERSAL::isa \*(Aqverbose\*(Aq;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Whenever you use \*(L"isa\*(R" in \s-1UNIVERSAL\s0 as a function, a kitten using
Test::MockObject dies. Normally, the kittens would be helpless, but if they
use UNIVERSAL::isa (the module whose docs you are reading), the kittens can
live long and prosper.
.PP
This module replaces \f(CW\*(C`UNIVERSAL::isa\*(C'\fR with a version that makes sure that,
when called as a function on objects which override \f(CW\*(C`isa\*(C'\fR, \f(CW\*(C`isa\*(C'\fR will call
the appropriate method on those objects
.PP
In all other cases, the real \f(CW\*(C`UNIVERSAL::isa\*(C'\fR gets called directly.
.PP
\&\fB\s-1NOTE:\s0\fR You should use this module only for debugging purposes. It does not
belong as a dependency in running code.
.SH "WARNINGS"
.IX Header "WARNINGS"
If the lexical warnings pragma is available, this module will emit a warning
for each naughty invocation of \f(CW\*(C`UNIVERSAL::isa\*(C'\fR. Silence these warnings by
saying:
.PP
.Vb 1
\&    no warnings \*(AqUNIVERSAL::isa\*(Aq;
.Ve
.PP
in the lexical scope of the naughty code.
.PP
After version 1.00, warnings only appear when naughty code calls
\&\fIUNIVERSAL::isa()\fR as a function on an invocant for which there is an overridden
\&\fIisa()\fR.  These are really truly \fIactive\fR bugs, and you should fix them rather
than relying on this module to find them.
.PP
To get warnings for all potentially dangerous uses of \fIUNIVERSAL::isa()\fR as a
function, not a method (that is, for \fIall\fR uses of the method as a function,
which are latent bugs, if not bugs that will break your code as it exists now),
pass the \f(CW\*(C`verbose\*(C'\fR flag when using the module.  This can generate many extra
warnings, but they're more specific as to the actual wrong practice and they
usually suggest proper fixes.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Perl::Critic::Policy::BuiltinFunctions::ProhibitUniversalIsa
.PP
UNIVERSAL::can for another discussion of the problem at hand.
.PP
Test::MockObject for one example of a module that really needs to override
\&\f(CW\*(C`isa()\*(C'\fR.
.PP
Any decent explanation of \s-1OO\s0 to understand why calling methods as functions is
a staggeringly bad idea.
.SH "AUTHORS"
.IX Header "AUTHORS"
Audrey Tang <cpan@audreyt.org>
.PP
chromatic <chromatic@wgz.org>
.PP
Yuval Kogman <nothingmuch@woobling.org>
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright (c) 2005 \- 2011, chromatic. This module is made available under the
same terms as Perl 5.12.
