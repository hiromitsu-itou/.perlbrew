.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "General::Interpolated 3"
.TH General::Interpolated 3 "2010-12-01" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Config::General::Interpolated \- Parse variables within Config files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\& use Config::General;
\& $conf = new Config::General(
\&    \-ConfigFile      => \*(Aqconfigfile\*(Aq,
\&    \-InterPolateVars => 1
\& );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an internal module which makes it possible to interpolate
Perl style variables in your config file (i.e. \f(CW$variable\fR
or \f(CW\*(C`${variable}\*(C'\fR).
.PP
Normally you don't call it directly.
.SH "VARIABLES"
.IX Header "VARIABLES"
Variables can be defined everywhere in the config and can be used
afterwards as the value of an option. Variables cannot be used as
keys or as part of keys.
.PP
If you define a variable inside
a block or a named block then it is only visible within this block or
within blocks which are defined inside this block. Well \- let's take a
look to an example:
.PP
.Vb 10
\& # sample config which uses variables
\& basedir   = /opt/ora
\& user      = t_space
\& sys       = unix
\& <table intern>
\&     instance  = INTERN
\&     owner     = $user                 # "t_space"
\&     logdir    = $basedir/log          # "/opt/ora/log"
\&     sys       = macos
\&     <procs>
\&         misc1   = ${sys}_${instance}  # macos_INTERN
\&         misc2   = $user               # "t_space"
\&     </procs>
\& </table>
.Ve
.PP
This will result in the following structure:
.PP
.Vb 10
\& {
\&     \*(Aqbasedir\*(Aq => \*(Aq/opt/ora\*(Aq,
\&     \*(Aquser\*(Aq    => \*(Aqt_space\*(Aq
\&     \*(Aqsys\*(Aq     => \*(Aqunix\*(Aq,
\&     \*(Aqtable\*(Aq   => {
\&          \*(Aqintern\*(Aq => {
\&                \*(Aqsys\*(Aq      => \*(Aqmacos\*(Aq,
\&                \*(Aqlogdir\*(Aq   => \*(Aq/opt/ora/log\*(Aq,
\&                \*(Aqinstance\*(Aq => \*(AqINTERN\*(Aq,
\&                \*(Aqowner\*(Aq => \*(Aqt_space\*(Aq,
\&                \*(Aqprocs\*(Aq => {
\&                     \*(Aqmisc1\*(Aq => \*(Aqmacos_INTERN\*(Aq,
\&                     \*(Aqmisc2\*(Aq => \*(Aqt_space\*(Aq
\&            }
\&         }
\&     }
.Ve
.PP
As you can see, the variable \fBsys\fR has been defined twice. Inside
the <procs> block a variable ${sys} has been used, which then were
interpolated into the value of \fBsys\fR defined inside the <table>
block, not the sys variable one level above. If sys were not defined
inside the <table> block then the \*(L"global\*(R" variable \fBsys\fR would have
been used instead with the value of \*(L"unix\*(R".
.PP
Variables inside double quotes will be interpolated, but variables
inside single quotes will \fBnot\fR interpolated. This is the same
behavior as you know of Perl itself.
.PP
In addition you can surround variable names with curly braces to
avoid misinterpretation by the parser.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Config::General
.SH "AUTHORS"
.IX Header "AUTHORS"
.Vb 3
\& Thomas Linden <tlinden |AT| cpan.org>
\& Autrijus Tang <autrijus@autrijus.org>
\& Wei\-Hon Chen <plasmaball@pchome.com.tw>
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2001 by Wei-Hon Chen <plasmaball@pchome.com.tw>.
Copyright 2002\-2010 by Thomas Linden <tlinden |AT| cpan.org>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See <http://www.perl.com/perl/misc/Artistic.html>
.SH "VERSION"
.IX Header "VERSION"
2.14
