.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Crypt::OpenSSL::AES 3"
.TH Crypt::OpenSSL::AES 3 "2007-11-17" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Crypt::OpenSSL::AES \- A Perl wrapper around OpenSSL's AES library
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&     use Crypt::OpenSSL::AES;
\&
\&     my $cipher = new Crypt::OpenSSL::AES($key);
\&
\&     $encrypted = $cipher\->encrypt($plaintext)
\&     $decrypted = $cipher\->decrypt($encrypted)
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements a wrapper around OpenSSL.  Specifically, it
wraps the methods related to the \s-1US\s0 Government's Advanced
Encryption Standard (the Rijndael algorithm).
.PP
This module is compatible with Crypt::CBC (and likely other modules
that utilize a block cipher to make a stream cipher).
.PP
This module is an alternative to the implementation provided by 
Crypt::Rijndael which implements \s-1AES\s0 itself. In contrast, this module
is simply a wrapper around the OpenSSL library.
.PP
The Crypt::Rijndael implementation seems to produce inaccurate
results on 64\-bit x86 machines. By using OpenSSL, this module
aims to avoid architecture specific problems, allowing the OpenSSL
maintainers to overcome such issues.
.ie n .IP "$cipher\->encrypt($data)" 4
.el .IP "\f(CW$cipher\fR\->encrypt($data)" 4
.IX Item "$cipher->encrypt($data)"
Encrypt data. The size of \f(CW$data\fR must be exactly \f(CW\*(C`blocksize\*(C'\fR in
length (16 bytes), otherwise this function will croak.
.Sp
You should use Crypt::CBC or something similar to encrypt/decrypt data
of arbitrary lengths.
.ie n .IP "$cipher\->decrypt($data)" 4
.el .IP "\f(CW$cipher\fR\->decrypt($data)" 4
.IX Item "$cipher->decrypt($data)"
Decrypts \f(CW$data\fR. The size of \f(CW$data\fR must be exactly \f(CW\*(C`blocksize\*(C'\fR in
length (16 bytes), otherwise this function will croak.
.Sp
You should use Crypt::CBC or something similar to encrypt/decrypt data
of arbitrary lengths.
.IP "keysize" 4
.IX Item "keysize"
This method is used by Crypt::CBC to verify the key length.
This module actually supports key lengths of 16, 24, and 32 bytes,
but this method always returns 32 for Crypt::CBC's sake.
.IP "blocksize" 4
.IX Item "blocksize"
This method is used by Crypt::CBC to check the block size.
The blocksize for \s-1AES\s0 is always 16 bytes.
.SS "\s-1USE\s0 \s-1WITH\s0 \s-1CRYPT::CBC\s0"
.IX Subsection "USE WITH CRYPT::CBC"
.Vb 1
\&        use Crypt::CBC
\&
\&        $cipher = Crypt::CBC\->new(
\&                \-key    => $key,
\&                \-cipher => "Crypt::OpenSSL::AES"
\&        );             
\&
\&        $encrypted = $cipher\->encrypt($plaintext)
\&        $decrypted = $cipher\->decrypt($encrypted)
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Crypt::CBC
.PP
http://www.openssl.org/
.PP
http://en.wikipedia.org/wiki/Advanced_Encryption_Standard
.PP
http://www.csrc.nist.gov/encryption/aes/
.SH "BUGS"
.IX Header "BUGS"
Need more (and better) test cases.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tolga Tarhan, <cpan at ttar dot org>
.PP
The \s-1US\s0 Government's Advanced Encryption Standard is the Rijndael
Algorithm and was developed by Vincent Rijmen and Joan Daemen.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2006 DelTel, Inc.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.5 or,
at your option, any later version of Perl 5 you may have available.
