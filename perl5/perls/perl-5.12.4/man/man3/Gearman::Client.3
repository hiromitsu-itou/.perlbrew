.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Gearman::Client 3"
.TH Gearman::Client 3 "2010-01-18" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Gearman::Client \- Client for gearman distributed job system
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use Gearman::Client;
\&    my $client = Gearman::Client\->new;
\&    $client\->job_servers(\*(Aq127.0.0.1\*(Aq, \*(Aq10.0.0.1\*(Aq);
\&
\&    # running a single task
\&    my $result_ref = $client\->do_task("add", "1+2");
\&    print "1 + 2 = $$result_ref\en";
\&
\&    # waiting on a set of tasks in parallel
\&    my $taskset = $client\->new_task_set;
\&    $taskset\->add_task( "add" => "1+2", {
\&       on_complete => sub { ... }
\&    });
\&    $taskset\->add_task( "divide" => "5/0", {
\&       on_fail => sub { print "divide by zero error!\en"; },
\&    });
\&    $taskset\->wait;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fIGearman::Client\fR is a client class for the Gearman distributed job
system, providing a framework for sending jobs to one or more Gearman
servers.  These jobs are then distributed out to a farm of workers.
.PP
Callers instantiate a \fIGearman::Client\fR object and from it dispatch
single tasks, sets of tasks, or check on the status of tasks.
.SH "USAGE"
.IX Header "USAGE"
.SS "Gearman::Client\->new(%options)"
.IX Subsection "Gearman::Client->new(%options)"
Creates a new \fIGearman::Client\fR object, and returns the object.
.PP
If \fI\f(CI%options\fI\fR is provided, initializes the new client object with the
settings in \fI\f(CI%options\fI\fR, which can contain:
.IP "\(bu" 4
job_servers
.Sp
Calls \fIjob_servers\fR (see below) to initialize the list of job
servers.  Value in this case should be an arrayref.
.IP "\(bu" 4
prefix
.Sp
Calls \fIprefix\fR (see below) to set the prefix / namespace.
.ie n .SS "$client\->job_servers(@servers)"
.el .SS "\f(CW$client\fP\->job_servers(@servers)"
.IX Subsection "$client->job_servers(@servers)"
Initializes the client \fI\f(CI$client\fI\fR with the list of job servers in \fI\f(CI@servers\fI\fR.
\&\fI\f(CI@servers\fI\fR should contain a list of \s-1IP\s0 addresses, with optional port
numbers. For example:
.PP
.Vb 1
\&    $client\->job_servers(\*(Aq127.0.0.1\*(Aq, \*(Aq192.168.1.100:7003\*(Aq);
.Ve
.PP
If the port number is not provided, \f(CW7003\fR is used as the default.
.ie n .SS "$client\->do_task($task)"
.el .SS "\f(CW$client\fP\->do_task($task)"
.IX Subsection "$client->do_task($task)"
.ie n .SS "$client\->do_task($funcname, $arg, \e%options)"
.el .SS "\f(CW$client\fP\->do_task($funcname, \f(CW$arg\fP, \e%options)"
.IX Subsection "$client->do_task($funcname, $arg, %options)"
Dispatches a task and waits on the results.  May either provide a
Gearman::Task object, or the 3 arguments that the Gearman::Task
constructor takes.
.PP
Returns a scalar reference to the result, or undef on failure.
.PP
If you provide on_complete and on_fail handlers, they're ignored, as
this function currently overrides them.
.ie n .SS "$client\->dispatch_background($task)"
.el .SS "\f(CW$client\fP\->dispatch_background($task)"
.IX Subsection "$client->dispatch_background($task)"
.ie n .SS "$client\->dispatch_background($funcname, $arg, \e%options)"
.el .SS "\f(CW$client\fP\->dispatch_background($funcname, \f(CW$arg\fP, \e%options)"
.IX Subsection "$client->dispatch_background($funcname, $arg, %options)"
Dispatches a task and doesn't wait for the result.  Return value
is an opaque scalar that can be used to refer to the task.
.ie n .SS "$taskset = $client\->new_task_set"
.el .SS "\f(CW$taskset\fP = \f(CW$client\fP\->new_task_set"
.IX Subsection "$taskset = $client->new_task_set"
Creates and returns a new \fIGearman::Taskset\fR object.
.ie n .SS "$taskset\->add_task($task)"
.el .SS "\f(CW$taskset\fP\->add_task($task)"
.IX Subsection "$taskset->add_task($task)"
.ie n .SS "$taskset\->add_task($funcname, $arg, $uniq)"
.el .SS "\f(CW$taskset\fP\->add_task($funcname, \f(CW$arg\fP, \f(CW$uniq\fP)"
.IX Subsection "$taskset->add_task($funcname, $arg, $uniq)"
.ie n .SS "$taskset\->add_task($funcname, $arg, \e%options)"
.el .SS "\f(CW$taskset\fP\->add_task($funcname, \f(CW$arg\fP, \e%options)"
.IX Subsection "$taskset->add_task($funcname, $arg, %options)"
Adds a task to a taskset.  Three different calling conventions are
available.
.ie n .SS "$taskset\->wait"
.el .SS "\f(CW$taskset\fP\->wait"
.IX Subsection "$taskset->wait"
Waits for a response from the job server for any of the tasks listed
in the taskset. Will call the \fIon_*\fR handlers for each of the tasks
that have been completed, updated, etc.  Doesn't return until
everything has finished running or failing.
.ie n .SS "$client\->prefix($prefix)"
.el .SS "\f(CW$client\fP\->prefix($prefix)"
.IX Subsection "$client->prefix($prefix)"
Sets the namespace / prefix for the function names.
.PP
See Gearman::Worker for more details.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.SS "Summation"
.IX Subsection "Summation"
This is an example client that sends off a request to sum up a list of
integers.
.PP
.Vb 9
\&    use Gearman::Client;
\&    use Storable qw( freeze );
\&    my $client = Gearman::Client\->new;
\&    $client\->job_servers(\*(Aq127.0.0.1\*(Aq);
\&    my $tasks = $client\->new_task_set;
\&    my $handle = $tasks\->add_task(sum => freeze([ 3, 5 ]), {
\&        on_complete => sub { print ${ $_[0] }, "\en" }
\&    });
\&    $tasks\->wait;
.Ve
.PP
See the \fIGearman::Worker\fR documentation for the worker for the \fIsum\fR
function.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2006\-2007 Six Apart, Ltd.
.PP
License granted to use/distribute under the same terms as Perl itself.
.SH "WARRANTY"
.IX Header "WARRANTY"
This is free software.  This comes with no warranty whatsoever.
.SH "AUTHORS"
.IX Header "AUTHORS"
.Vb 2
\& Brad Fitzpatrick (brad@danga.com)
\& Jonathan Steinert (hachi@cpan.org)
.Ve
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 423:" 4
.IX Item "Around line 423:"
=cut found outside a pod block.  Skipping to next block.
