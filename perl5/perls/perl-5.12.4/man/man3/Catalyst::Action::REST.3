.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Catalyst::Action::REST 3"
.TH Catalyst::Action::REST 3 "2012-01-30" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::Action::REST \- Automated REST Method Dispatching
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    sub foo :Local :ActionClass(\*(AqREST\*(Aq) {
\&      ... do setup for HTTP method specific handlers ...
\&    }
\&
\&    sub foo_GET {
\&      ... do something for GET requests ...
\&    }
\&
\&    # alternatively use an Action
\&    sub foo_PUT : Action {
\&      ... do something for PUT requests ...
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This Action handles doing automatic method dispatching for \s-1REST\s0 requests.  It
takes a normal Catalyst action, and changes the dispatch to append an
underscore and method name.  First it will try dispatching to an action with
the generated name, and failing that it will try to dispatch to a regular
method.
.PP
For example, in the synopsis above, calling \s-1GET\s0 on \*(L"/foo\*(R" would result in
the foo_GET method being dispatched.
.PP
If a method is requested that is not implemented, this action will
return a status 405 (Method Not Found).  It will populate the \*(L"Allow\*(R" header
with the list of implemented request methods.  You can override this behavior
by implementing a custom 405 handler like so:
.PP
.Vb 3
\&   sub foo_not_implemented {
\&      ... handle not implemented methods ...
\&   }
.Ve
.PP
If you do not provide an _OPTIONS subroutine, we will automatically respond
with a 200 \s-1OK\s0.  The \*(L"Allow\*(R" header will be populated with the list of
implemented request methods.
.PP
It is likely that you really want to look at Catalyst::Controller::REST,
which brings this class together with automatic Serialization of requests
and responses.
.PP
When you use this module, it adds the Catalyst::TraitFor::Request::REST
role to your request class.
.SH "METHODS"
.IX Header "METHODS"
.IP "dispatch" 4
.IX Item "dispatch"
This method overrides the default dispatch mechanism to the re-dispatching
mechanism described above.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
You likely want to look at Catalyst::Controller::REST, which implements a
sensible set of defaults for a controller doing \s-1REST\s0.
.PP
This class automatically adds the Catalyst::TraitFor::Request::REST role to
your request class.  If you're writing a web application which provides RESTful
responses and still needs to accommodate web browsers, you may prefer to use
Catalyst::TraitFor::Request::REST::ForBrowsers instead.
.PP
Catalyst::Action::Serialize, Catalyst::Action::Deserialize
.SH "TROUBLESHOOTING"
.IX Header "TROUBLESHOOTING"
.ie n .IP "Q: I'm getting a ""415 Unsupported Media Type"" error. What gives?!" 4
.el .IP "Q: I'm getting a ``415 Unsupported Media Type'' error. What gives?!" 4
.IX Item "Q: I'm getting a 415 Unsupported Media Type error. What gives?!"
A:  Most likely, you haven't set Content-type equal to \*(L"application/json\*(R", or
one of the accepted return formats.  You can do this by setting it in your query
accepted return formats.  You can do this by setting it in your query string
thusly: \f(CW\*(C`?content\-type=application%2Fjson (where %2F == / uri escaped).\*(C'\fR
.Sp
\&\fB\s-1NOTE\s0\fR Apache will refuse \f(CW%2F\fR unless configured otherwise.
Make sure \f(CW\*(C`AllowEncodedSlashes On\*(C'\fR is in your httpd.conf file in order
for this to run smoothly.
.SH "AUTHOR"
.IX Header "AUTHOR"
Adam Jacob <adam@stalecoffee.org>, with lots of help from mst and jrockway
.PP
Marchex, Inc. paid me while I developed this module. (<http://www.marchex.com>)
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Tomas Doran (t0m) <bobtfish@bobtfish.net>
.PP
John Goulah
.PP
Christopher Laco
.PP
Daisuke Maki <daisuke@endeworks.jp>
.PP
Hans Dieter Pearcey
.PP
Brian Phillips <bphillips@cpan.org>
.PP
Dave Rolsky <autarch@urth.org>
.PP
Luke Saunders
.PP
Arthur Axel \*(L"fREW\*(R" Schmidt <frioux@gmail.com>
.PP
J. Shirley <jshirley@gmail.com>
.PP
Gavin Henry <ghenry@surevoip.co.uk>
.PP
Gerv http://www.gerv.net/
.PP
Colin Newell <colin@opusvl.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2006\-2012 the above named \s-1AUTHOR\s0 and \s-1CONTRIBUTORS\s0
.SH "LICENSE"
.IX Header "LICENSE"
You may distribute this code under the same terms as Perl itself.
