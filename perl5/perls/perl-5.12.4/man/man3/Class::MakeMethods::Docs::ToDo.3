.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MakeMethods::Docs::ToDo 3"
.TH MakeMethods::Docs::ToDo 3 "2004-09-07" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Class::MakeMethods::Docs::ToDo \- Ideas, problems, and suggestions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
There are lots of things that could be done to improve this module.
.SH "DISTRIBUTION ISSUES"
.IX Header "DISTRIBUTION ISSUES"
Issues about the distribution and supporting files, rather than the code:
.SS "Documentation"
.IX Subsection "Documentation"
.IP "\(bu" 4
Make sure that the documentation is broken up into appropriately-sized
chunks, and that people will know which section to look at.
.IP "\(bu" 4
As user questions arrive, add the answers as documentation points or examples.
.IP "\(bu" 4
Assemble annotated examples and tutorials, and either link to or distribute them.
.IP "\(bu" 4
Finish overhauling Template documentation.
.IP "\(bu" 4
Include Global and InsideOut uses in the \s-1EXAMPLES\s0 section
.IP "\(bu" 4
Template Internals: Finish documenting disk-based meta-method code-caching.
.SS "Tests"
.IX Subsection "Tests"
.IP "\(bu" 4
Use Devel::Coverage to measure test coverage, and fill in missing
cases.
.IP "\(bu" 4
Finish tests for Standard and Composite modules.
.SH "GENERAL ISSUES"
.IX Header "GENERAL ISSUES"
.IP "\(bu" 4
It does not appear to be possible to assign subroutine names to
closures within Perl. As a result, debugging output from Carp and
similar sources will show all generated methods as \*(L"\s-1\fIANON\s0()\fR\*(R" rather
than \*(L"\fIYourClass::methodname()\fR\*(R".
.Sp
\&\s-1UPDATE:\s0 There now seem to be fixes for this which should be integrated: See the new Sub::Name module and http://perlmonks.org/index.pl?node_id=304883
.IP "\(bu" 4
For scalar methods (and others) it would be nice to have a simple
bounds-checking interface to approve or reject (with an exception)
new values that were passed in.
.Sp
As pointed out by Terrence Brannon, the right interface to
adopt is probably that of Attribute::Types:
.Sp
.Vb 5
\&  use Class::MakeMethods::Standard::Hash (
\&    \*(Aqscalar\*(Aq => [ \*(Aqcount\*(Aq => { TYPE => \*(AqINTEGER\*(Aq } ],
\&    \*(Aqscalar\*(Aq => [ \*(Aqname\*(Aq => { TYPE => qr/^[A\-Z]\ew*$/ } ],
\&    \*(Aqscalar\*(Aq => [ \*(Aqaccount\*(Aq => { TYPE => &checksum_account_number } ]
\&  );
.Ve
.IP "\(bu" 4
Improve use of _diagnostic hooks for debugging. Add various \*(L"(Q)\*(R"
debug diagnostics.
.IP "\(bu" 4
Finish building Inheritable array and object accessors.
.IP "\(bu" 4
Finish building Composite::* packages.
.IP "\(bu" 4
Resolve DESTROY-time issues with Standard::Inheritable, Composite::Inheritable, and Template::InsideOut.
.IP "\(bu" 4
Add slice and splice functionality to Standard::*:hash and Composite::*:hash.
.SH "TEMPLATE CLASSES"
.IX Header "TEMPLATE CLASSES"
.SS "Template::Generic"
.IX Subsection "Template::Generic"
.IP "\(bu" 4
Allow untyped object accesors if \f(CW\*(C`class\*(C'\fR attribute is not set.
(Suggested in Jan\-01 \s-1NY\s0 Perl Seminar discussion.)
.IP "\(bu" 4
Standardize naming templates for array, hash, other method types.
.Sp
Deprecate verb_x methods? Or at last make them consistently available both ways.
.Sp
Make list methods consistent with hash_of_lists methods, in action, and
in name (x_verb).  Also for others (e.g., set_ clear_ boolean)
.IP "\(bu" 4
Should default object template provide auto-create behavior on \->\fIget()\fR?
.IP "\(bu" 4
Generalize the \*(L"Generic:scalar \-init_and_get\*(R" interface to support 
memoizing values for other accessor types.
.IP "\(bu" 4
Consider adding hash each and array iterator methods, using a closure 
to provide iteration.
.IP "\(bu" 4
Add support for tied arrays & scalars, a la tiedhash
.IP "\(bu" 4
Add string_multiple_index.
.IP "\(bu" 4
Extend index methods to support weak indexes with WeakRef. Perhaps
just have it accept a hash ref to use as the index, and then allow
people to pass in tied hashes?
.IP "\(bu" 4
Maybe make private or protected method croak if they were called by a
method_init method which was called by an outside package.
.Sp
Not entirely clear what the right semantics or security precautions are here...
.SS "Template::Generic Subclasses"
.IX Subsection "Template::Generic Subclasses"
.IP "\(bu" 4
Finish building code_or_scalar meta-method.
.IP "\(bu" 4
Finish building Class::MakeMethods::ClassInherit subclass.
.Sp
Need to work out how to capture changes for non-scalar values. For
example, if a subclass inherits an array accessor and then pops
it, is there some way to provide them with copy-on-write?
.IP "\(bu" 4
Add enumerated string/number type.
.Sp
Provide helper methods with map of associated values (ex \f(CW$o\fR\->port
= 80 ... \f(CW$o\fR\->port_readable eq '\s-1HTTP\s0' ). Cf. code for earlier
unpublished 'lookup' method type.
.IP "\(bu" 4
For StructBuiltin:
.Sp
Add \-fatal flag to die if core func returns false / undef
Add call method to recall method with alternative arguments.
Add \-nocall flag to not call core func on new.
.IP "\(bu" 4
Replace ClassName:static_hash_classname with Class:indexed_string.
.SS "Template Internals"
.IX Subsection "Template Internals"
.IP "\(bu" 4
Figure out which modules, if any, should actually be using AutoLoader.
Probably just Template::Generic?
.IP "\(bu" 4
Give users a way to do meta-method code-caching in Perl library
hierarchy, rather than in /tmp/auto or other user-specified
directory..
.Sp
Provide mechanism for pre-generating these at install time.
.Sp
Perhaps load these via do, rather than open/read/eval?
.Sp
Perhaps pre-generate expanded libs with all of the \-imports resolved?
.IP "\(bu" 4
Support generating code files and loading them as needed.
.Sp
This would be similar to Class::Classgen, except that we'd do the
generation at run-time the first time it was required, rather than
in a separate pass.
.Sp
For example, given the following declaration:
.Sp
.Vb 2
\&  package Foo::Bar;
\&  Class::MakeMethods::Template::Hash\->import(\-codecache=>\*(Aqauto\*(Aq, scalar=>\*(Aqfoo\*(Aq);
.Ve
.Sp
We should be able to write out the following file:
.Sp
.Vb 11
\&  cat \*(Aqauto/Foo/Bar/methods\-line\-2.pl\*(Aq
\&  # NOTE: Generated for Foo::Bar by the Class::MakeMethods module.
\&  # Changes made here will be lost when Foo::Bar is modified.
\&  package Foo::Bar;
\&  sub foo {
\&    my $self = shift;
\&    if ( scalar @_ ) {
\&      $self\->{\*(Aqfoo\*(Aq} = shift();
\&    }
\&    $self\->{\*(Aqfoo\*(Aq}
\&  }
.Ve
.Sp
Then on subsequent uses, we can just re-load the generated code:
.Sp
.Vb 1
\&  require "auto/Foo/Bar/methods\-line\-2.pl";
.Ve
.Sp
To do this, we need to:
.RS 4
.IP "\(bu" 4
Provide an option to select this if desired; maybe ... 
import('\-cache' => 'auto/', ...)?
.IP "\(bu" 4
Figure out which directory we can/should write into.
.IP "\(bu" 4
Re-evaluate the textual code templates, without generating the
closures. Substitute in any _STATIC_ATTR_ values. Make other _ATTR_
values point to some public lookup table or package scalar.
.IP "\(bu" 4
Notice if the source file (or Class::MakeMethods modules) has
been updated more recently than the generated file.
.RE
.RS 4
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
See Class::MakeMethods for general information about this distribution.
