.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "strictures 3"
.TH strictures 3 "2011-02-25" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
strictures \- turn on strict and make all warnings fatal
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use strictures 1;
.Ve
.PP
is equivalent to
.PP
.Vb 2
\&  use strict;
\&  use warnings FATAL => \*(Aqall\*(Aq;
.Ve
.PP
except when called from a file where \f(CW$0\fR matches:
.PP
.Vb 1
\&  /^x?t\e/.*(?:load|compile|coverage|use_ok).*\e.t$/
.Ve
.PP
and when either '.git' or '.svn' is present in the current directory (with
the intention of only forcing extra tests on the author side) \- or when the
\&\s-1PERL_STRICTURES_EXTRA\s0 environment variable is set, in which case
.PP
.Vb 1
\&  use strictures 1;
.Ve
.PP
is equivalent to
.PP
.Vb 5
\&  use strict;
\&  use warnings FATAL => \*(Aqall\*(Aq;
\&  no indirect \*(Aqfatal\*(Aq;
\&  no multidimensional;
\&  no bareword::filehandles;
.Ve
.PP
Note that _EXTRA may at some point add even more tests, with only a minor
version increase, but any changes to the effect of 'use strictures' in
normal mode will involve a major version bump.
.PP
Be aware: \s-1THIS\s0 \s-1MEANS\s0 \s-1THE\s0 \s-1EXTRA\s0 \s-1TEST\s0 \s-1MODULES\s0 \s-1ARE\s0 \s-1REQUIRED\s0 \s-1FOR\s0 \s-1AUTHORS\s0 \s-1OF\s0
\&\s-1STRICTURES\s0 \s-1USING\s0 \s-1CODE\s0 \- but not by end users thereof.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
I've been writing the equivalent of this module at the top of my code for
about a year now. I figured it was time to make it shorter.
.PP
Things like the importer in 'use Moose' don't help me because they turn
warnings on but don't make them fatal \- which from my point of view is
useless because I want an exception to tell me my code isn't warnings clean.
.PP
Any time I see a warning from my code, that indicates a mistake.
.PP
Any time my code encounters a mistake, I want a crash \- not spew to \s-1STDERR\s0
and then unknown (and probably undesired) subsequent behaviour.
.PP
I also want to ensure that obvious coding mistakes, like indirect object
syntax (and not so obvious mistakes that cause things to accidentally compile
as such) get caught, but not at the cost of an \s-1XS\s0 dependency and not at the
cost of blowing things up on another machine.
.PP
Therefore, strictures turns on indirect checking only when it thinks it's
running in a compilation (or pod coverage) test \- though if this causes
undesired behaviour this can be overridden by setting the
\&\s-1PERL_STRICTURES_EXTRA\s0 environment variable.
.PP
If additional useful author side checks come to mind, I'll add them to the
_EXTRA code path only \- this will result in a minor version increase (i.e.
1.000000 to 1.001000 (1.1.0) or similar). Any fixes only to the mechanism of
this code will result in a subversion increas (i.e. 1.000000 to 1.000001
(1.0.1)).
.PP
If the behaviour of 'use strictures' in normal mode changes in any way, that
will constitute a major version increase \- and the code already checks
when its version is tested to ensure that
.PP
.Vb 1
\&  use strictures 1;
.Ve
.PP
will continue to only introduce the current set of strictures even if 2.0 is
installed.
.SH "METHODS"
.IX Header "METHODS"
.SS "import"
.IX Subsection "import"
This method does the setup work described above in \*(L"\s-1DESCRIPTION\s0\*(R"
.SS "\s-1VERSION\s0"
.IX Subsection "VERSION"
This method traps the strictures\->\s-1\fIVERSION\s0\fR\|(1) call produced by a use line
with a version number on it and does the version check.
.SH "COMMUNITY AND SUPPORT"
.IX Header "COMMUNITY AND SUPPORT"
.SS "\s-1IRC\s0 channel"
.IX Subsection "IRC channel"
irc.perl.org #toolchain
.PP
(or bug 'mst' in query on there or freenode)
.SS "Git repository"
.IX Subsection "Git repository"
Gitweb is on http://git.shadowcat.co.uk/ and the clone \s-1URL\s0 is:
.PP
.Vb 1
\&  git clone git://git.shadowcat.co.uk/p5sagit/strictures.git
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
mst \- Matt S. Trout (cpan:MSTROUT) <mst@shadowcat.co.uk>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
None required yet. Maybe this module is perfect (hahahahaha ...).
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2010 the strictures \*(L"\s-1AUTHOR\s0\*(R" and \*(L"\s-1CONTRIBUTORS\s0\*(R"
as listed above.
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software and may be distributed under the same terms
as perl itself.
