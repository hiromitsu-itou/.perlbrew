.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Feed::Find 3"
.TH Feed::Find 3 "2011-01-29" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Feed::Find \- Syndication feed auto\-discovery
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Feed::Find;
\&    my @feeds = Feed::Find\->find(\*(Aqhttp://example.com/\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fIFeed::Find\fR implements feed auto-discovery for finding syndication feeds,
given a \s-1URI\s0. It (currently) passes all of the auto-discovery tests at
\&\fIhttp://diveintomark.org/tests/client/autodiscovery/\fR.
.PP
\&\fIFeed::Find\fR will discover the following feed formats:
.IP "\(bu" 4
\&\s-1RSS\s0 0.91
.IP "\(bu" 4
\&\s-1RSS\s0 1.0
.IP "\(bu" 4
\&\s-1RSS\s0 2.0
.IP "\(bu" 4
Atom
.SH "USAGE"
.IX Header "USAGE"
.SS "Feed::Find\->find($uri)"
.IX Subsection "Feed::Find->find($uri)"
Given a \s-1URI\s0 \fI\f(CI$uri\fI\fR, use a variety of techniques to find the feeds associated
with that page. If \fI\f(CI$uri\fI\fR itself points to a feed (i.e., if the
\&\fIContent-Type\fR of the response is a recognized feed type), returns \fI\f(CI$uri\fI\fR.
.PP
Returns a list of feed URIs.
.PP
The following techniques are used:
.IP "1. \fI<link>\fR tag auto-discovery" 4
.IX Item "1. <link> tag auto-discovery"
If the page contains any \fI<link>\fR tags in the \fI<head>\fR
section, these tags are examined for recognized feed content types. The
following content types are treated as feeds: \fIapplication/x.atom+xml\fR,
\&\fIapplication/atom+xml\fR, \fIapplication/xml\fR, \fItext/xml\fR,
\&\fIapplication/rss+xml\fR, and \fIapplication/rdf+xml\fR.
.IP "2. Scanning \fI<a>\fR tags" 4
.IX Item "2. Scanning <a> tags"
If the page does not contain any known \fI<link>\fR tags, the page is
then scanned for \fI<a>\fR tags for links to URIs with certain file
extensions. The following extensions are treated as feeds: \fI.rss\fR, \fI.xml\fR,
and \fI.rdf\fR.
.Sp
Note that this technique is employed \fBonly\fR if the first technique returns
no results.
.ie n .SS "Feed::Find\->find_in_html(\e$html [, $base_uri ])"
.el .SS "Feed::Find\->find_in_html(\e$html [, \f(CW$base_uri\fP ])"
.IX Subsection "Feed::Find->find_in_html($html [, $base_uri ])"
Given a reference to a string \fI\f(CI$html\fI\fR containing an \s-1HTML\s0 page, uses the
same techniques as described above in \fIfind\fR to find the feeds associated
with that page.
.PP
If you know the \s-1URI\s0 of the page, you should provide it in \fI\f(CI$base_uri\fI\fR, so
that relative links can be properly made absolute. \fIFeed::Find\fR will attempt
to determine the correct base \s-1URI\s0, but unless that \s-1URI\s0 is specified in the
\&\s-1HTML\s0 itself (in a \f(CW\*(C`<meta>\*(C'\fR tag), you'll need to supply it yourself.
.PP
Returns a list of feed URIs.
.SH "LICENSE"
.IX Header "LICENSE"
\&\fIFeed::Find\fR is free software; you may redistribute it and/or modify it
under the same terms as Perl itself.
.SH "AUTHOR & COPYRIGHT"
.IX Header "AUTHOR & COPYRIGHT"
Except where otherwise noted, \fIFeed::Find\fR is Copyright 2004 Benjamin
Trott, ben+cpan@stupidfool.org. All rights reserved.
