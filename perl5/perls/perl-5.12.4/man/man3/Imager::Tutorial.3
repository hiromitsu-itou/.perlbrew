.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Imager::Tutorial 3"
.TH Imager::Tutorial 3 "2011-06-06" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Imager::Tutorial \- an introduction to Imager.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Before you start"
.IX Subsection "Before you start"
If you have the necessary knowledge, install the image format
libraries you want Imager image file support for, and Imager itself,
otherwise arrange to have it done.
.PP
You will also want some sort of image viewer tool, whether an image
editor like Photoshop or the \s-1GIMP\s0, or a web browser.
.SS "Hello Boxes! \- A Simple Start"
.IX Subsection "Hello Boxes! - A Simple Start"
As with any perl program it's useful to start with a #! line, and to
enable strict mode:
.PP
.Vb 3
\&  #!/usr/bin/perl \-w
\&  # you might to \*(Aquse warnings;\*(Aq instead of the \-w above
\&  use strict;
.Ve
.PP
These lines will be omitted in further examples.
.PP
As with any module, you need to load it:
.PP
.Vb 1
\&  use Imager;
.Ve
.PP
Now create a image to draw on:
.PP
.Vb 1
\&  my $image = Imager\->new(xsize => 100, ysize => 100);
.Ve
.PP
and draw a couple of filled rectangles on it:
.PP
.Vb 4
\&  $image\->box(xmin => 0, ymin => 0, xmax => 99, ymax => 99,
\&              filled => 1, color => \*(Aqblue\*(Aq);
\&  $image\->box(xmin => 20, ymin => 20, xmax => 79, ymax => 79,
\&              filled => 1, color => \*(Aqgreen\*(Aq);
.Ve
.PP
Since the first box fills the whole image, it can be simplified to:
.PP
.Vb 1
\&  $image\->box(filled => 1, color => \*(Aqblue\*(Aq);
.Ve
.PP
and save it to a file:
.PP
.Vb 2
\&  $image\->write(file=>\*(Aqtutorial1.ppm\*(Aq)
\&      or die \*(AqCannot save tutorial1.ppm: \*(Aq, $image\->errstr;
.Ve
.PP
So our completed program is:
.PP
.Vb 1
\&  use Imager;
\&  
\&  my $image = Imager\->new(xsize => 100, ysize => 100);
\&  
\&  $image\->box(filled => 1, color => \*(Aqblue\*(Aq);
\&  $image\->box(xmin => 20, ymin => 20, xmax => 79, ymax => 79,
\&              filled => 1, color => \*(Aqgreen\*(Aq);
\&  
\&  $image\->write(file=>\*(Aqtutorial1.ppm\*(Aq)
\&      or die \*(AqCannot save tutorial1.ppm: \*(Aq, $image\->errstr;
.Ve
.SS "Adding some text"
.IX Subsection "Adding some text"
The first thing you need to draw text is a font object:
.PP
.Vb 5
\&  # use a different file, depending on the font support you have in
\&  # your installed Imager.
\&  my $font_filename = \*(Aqfontfiles/ImUgly.ttf\*(Aq;
\&  my $font = Imager::Font\->new(file=>$font_filename)
\&    or die "Cannot load $font_filename: ", Imager\->errstr;
.Ve
.PP
If you're on Windows, you can supply a face name instead:
.PP
.Vb 2
\&  my $font = Imager::Font\->new(face=>\*(AqArial Bold\*(Aq)
\&    or die "Cannot load \*(AqArial Bold: ", Imager\->errstr;
.Ve
.PP
and draw the text:
.PP
.Vb 2
\&  my $text = "Hello Boxes!";
\&  my $text_size = 12;
\&  
\&  $font\->align(string => $text,
\&               size => $text_size,
\&               color => \*(Aqred\*(Aq,
\&               x => $image\->getwidth/2,
\&               y => $image\->getheight/2,
\&               halign => \*(Aqcenter\*(Aq,
\&               valign => \*(Aqcenter\*(Aq,
\&               image => $image);
.Ve
.PP
So inserting this into our existing code we have:
.PP
.Vb 1
\&  use Imager;
\&  
\&  my $image = Imager\->new(xsize => 100, ysize => 100);
\&  
\&  $image\->box(xmin => 0, ymin => 0, xmax => 99, ymax => 99,
\&              filled => 1, color => \*(Aqblue\*(Aq);
\&  $image\->box(xmin => 20, ymin => 20, xmax => 79, ymax => 79,
\&              filled => 1, color => \*(Aqgreen\*(Aq);
\&  
\&  # use a different file, depending on the font support you have in
\&  # your installed Imager.
\&  my $font_filename = \*(Aqfontfiles/ImUgly.ttf\*(Aq;
\&  my $font = Imager::Font\->new(file=>$font_filename)
\&    or die "Cannot load $font_filename: ", Imager\->errstr;
\&  
\&  my $text = "Hello Boxes!";
\&  my $text_size = 12;
\&  
\&  $font\->align(string => $text,
\&               size => $text_size,
\&               color => \*(Aqred\*(Aq,
\&               x => $image\->getwidth/2,
\&               y => $image\->getheight/2,
\&               halign => \*(Aqcenter\*(Aq,
\&               valign => \*(Aqcenter\*(Aq,
\&               image => $image);
\&  
\&  $image\->write(file=>\*(Aqtutorial2.ppm\*(Aq)
\&      or die \*(AqCannot save tutorial2.ppm: \*(Aq, $image\->errstr;
.Ve
.SS "Using an existing image as a base"
.IX Subsection "Using an existing image as a base"
To load an image from a file, first create an empty image object:
.PP
.Vb 1
\&  my $read_image = Imager\->new;
.Ve
.PP
then call the read method:
.PP
.Vb 3
\&  my $image_source = shift; # from the command\-line
\&  $read_image\->read(file=>$image_source)
\&    or die "Cannot load $image_source: ", $image\->errstr;
.Ve
.PP
To keep to our working size, we'll scale the image:
.PP
.Vb 3
\&  # the scale() method always does a proportional scale, we don\*(Aqt want
\&  # that here
\&  my $scaled_image = $read_image\->scaleX(pixels=>100)\->scaleY(pixels=>100);
.Ve
.PP
draw our inner box on that, and save the result:
.PP
.Vb 2
\&  $scaled_image\->box(xmin => 20, ymin => 20, xmax => 79, ymax => 79,
\&              filled => 1, color => \*(Aqgreen\*(Aq);
\&
\&  $scaled_image\->write(file=>\*(Aqtutorial3.ppm\*(Aq)
\&      or die \*(AqCannot save tutorial3.ppm: \*(Aq, $image\->errstr;
.Ve
.PP
so the complete program is:
.PP
.Vb 1
\&  use Imager;
\&
\&  my $read_image = Imager\->new;
\&
\&  my $image_source = shift; # from the command\-line
\&  $read_image\->read(file=>$image_source)
\&    or die "Cannot load $image_source: ", $image\->errstr;
\&
\&  # the scale() method always does a proportional scale, we don\*(Aqt want
\&  # that here
\&  my $scaled_image = $read_image\->scaleX(pixels=>100)\->scaleY(pixels=>100);
\&
\&  $scaled_image\->box(xmin => 20, ymin => 20, xmax => 79, ymax => 79,
\&              filled => 1, color => \*(Aqgreen\*(Aq);
\&
\&  $scaled_image\->write(file=>\*(Aqtutorial3.ppm\*(Aq)
\&      or die \*(AqCannot save tutorial3.ppm: \*(Aq, $image\->errstr;
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Tony Cook <tonyc@cpan.org>
.SH "REVISION"
.IX Header "REVISION"
\&\f(CW$Revision\fR$
