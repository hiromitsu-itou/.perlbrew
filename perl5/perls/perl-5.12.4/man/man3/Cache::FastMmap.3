.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Cache::FastMmap 3"
.TH Cache::FastMmap 3 "2011-12-05" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Cache::FastMmap \- Uses an mmap'ed file to act as a shared memory interprocess cache
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Cache::FastMmap;
\&
\&  # Uses vaguely sane defaults
\&  $Cache = Cache::FastMmap\->new();
\&
\&  # $Value must be a reference...
\&  $Cache\->set($Key, $Value);
\&  $Value = $Cache\->get($Key);
\&
\&  $Cache = Cache::FastMmap\->new(raw_values => 1);
\&
\&  # $Value can\*(Aqt be a reference...
\&  $Cache\->set($Key, $Value);
\&  $Value = $Cache\->get($Key);
.Ve
.SH "ABSTRACT"
.IX Header "ABSTRACT"
A shared memory cache through an mmap'ed file. It's core is written
in C for performance. It uses fcntl locking to ensure multiple
processes can safely access the cache at the same time. It uses
a basic \s-1LRU\s0 algorithm to keep the most used entries in the cache.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
In multi-process environments (eg mod_perl, forking daemons, etc),
it's common to want to cache information, but have that cache
shared between processes. Many solutions already exist, and may
suit your situation better:
.IP "\(bu" 4
MLDBM::Sync \- acts as a database, data is not automatically
expired, slow
.IP "\(bu" 4
\&\s-1IPC::MM\s0 \- hash implementation is broken, data is not automatically
expired, slow
.IP "\(bu" 4
Cache::FileCache \- lots of features, slow
.IP "\(bu" 4
Cache::SharedMemoryCache \- lots of features, \s-1VERY\s0 slow. Uses
IPC::ShareLite which freeze/thaws \s-1ALL\s0 data at each read/write
.IP "\(bu" 4
\&\s-1DBI\s0 \- use your favourite \s-1RDBMS\s0. can perform well, need a
\&\s-1DB\s0 server running. very global. socket connection latency
.IP "\(bu" 4
Cache::Mmap \- similar to this module, in pure perl. slows down
with larger pages
.IP "\(bu" 4
BerkeleyDB \- very fast (data ends up mostly in shared memory
cache) but acts as a database overall, so data is not automatically
expired
.PP
In the case I was working on, I needed:
.IP "\(bu" 4
Automatic expiry and space management
.IP "\(bu" 4
Very fast access to lots of small items
.IP "\(bu" 4
The ability to fetch/store many items in one go
.PP
Which is why I developed this module. It tries to be quite
efficient through a number of means:
.IP "\(bu" 4
Core code is written in C for performance
.IP "\(bu" 4
It uses multiple pages within a file, and uses Fcntl to only lock
a page at a time to reduce contention when multiple processes access
the cache.
.IP "\(bu" 4
It uses a dual level hashing system (hash to find page, then hash
within each page to find a slot) to make most \f(CW\*(C`get()\*(C'\fR calls O(1) and
fast
.IP "\(bu" 4
On each \f(CW\*(C`set()\*(C'\fR, if there are slots and page space available, only
the slot has to be updated and the data written at the end of the used
data space. If either runs out, a re-organisation of the page is
performed to create new slots/space which is done in an efficient way
.PP
The class also supports read-through, and write-back or write-through
callbacks to access the real data if it's not in the cache, meaning that
code like this:
.PP
.Vb 5
\&  my $Value = $Cache\->get($Key);
\&  if (!defined $Value) {
\&    $Value = $RealDataSource\->get($Key);
\&    $Cache\->set($Key, $Value)
\&  }
.Ve
.PP
Isn't required, you instead specify in the constructor:
.PP
.Vb 6
\&  Cache::FastMmap\->new(
\&    ...
\&    context => $RealDataSourceHandle,
\&    read_cb => sub { $_[0]\->get($_[1]) },
\&    write_cb => sub { $_[0]\->set($_[1], $_[2]) },
\&  );
.Ve
.PP
And then:
.PP
.Vb 1
\&  my $Value = $Cache\->get($Key);
\&
\&  $Cache\->set($Key, $NewValue);
.Ve
.PP
Will just work and will be read/written to the underlying data source as
needed automatically.
.SH "PERFORMANCE"
.IX Header "PERFORMANCE"
If you're storing relatively large and complex structures into
the cache, then you're limited by the speed of the Storable module.
If you're storing simple structures, or raw data, then
Cache::FastMmap has noticeable performance improvements.
.PP
See <http://cpan.robm.fastmail.fm/cache_perf.html> for some
comparisons to other modules.
.SH "COMPATIBILITY"
.IX Header "COMPATIBILITY"
Cache::FastMmap uses mmap to map a file as the shared cache space,
and fcntl to do page locking. This means it should work on most
\&\s-1UNIX\s0 like operating systems.
.PP
Ash Berlin has written a Win32 layer using MapViewOfFile et al. to 
provide support for Win32 platform.
.SH "MEMORY SIZE"
.IX Header "MEMORY SIZE"
Because Cache::FastMmap mmap's a shared file into your processes memory
space, this can make each process look quite large, even though it's just
mmap'd memory that's shared between all processes that use the cache,
and may even be swapped out if the cache is getting low usage.
.PP
However, the \s-1OS\s0 will think your process is quite large, which might
mean you hit some BSD::Resource or 'ulimits' you set previously that you
thought were sane, but aren't anymore, so be aware.
.SH "CACHE FILES AND OS ISSUES"
.IX Header "CACHE FILES AND OS ISSUES"
Because Cache::FastMmap uses an mmap'ed file, when you put values into
the cache, you are actually \*(L"dirtying\*(R" pages in memory that belong to
the cache file. Your \s-1OS\s0 will want to write those dirty pages back to
the file on the actual physical disk, but the rate it does that at is
very \s-1OS\s0 dependent.
.PP
In Linux, you have some control over how the \s-1OS\s0 writes those pages
back using a number of parameters in /proc/sys/vm
.PP
.Vb 4
\&  dirty_background_ratio
\&  dirty_expire_centisecs
\&  dirty_ratio
\&  dirty_writeback_centisecs
.Ve
.PP
How you tune these depends heavily on your setup.
.PP
As an interesting point, if you use a highmem linux kernel, a change
between 2.6.16 and 2.6.20 made the kernel flush memory a \s-1LOT\s0 more.
There's details in this kernel mailing list thread:
<http://www.uwsg.iu.edu/hypermail/linux/kernel/0711.3/0804.html>
.PP
In most cases, people are not actually concerned about the persistence
of data in the cache, and so are happy to disable writing of any cache
data back to disk at all. Baically what they want is an in memory only
shared cache. The best way to do that is to use a \*(L"tmpfs\*(R" filesystem
and put all cache files on there.
.PP
For instance, all our machines have a /tmpfs mount point that we
create in /etc/fstab as:
.PP
.Vb 1
\&  none /tmpfs tmpfs defaults,noatime,size=1000M 0 0
.Ve
.PP
And we put all our cache files on there. The tmpfs filesystem is smart
enough to only use memory as required by files actually on the tmpfs,
so making it 1G in size doesn't actually use 1G of memory, it only uses
as much as the cache files we put on it. In all cases, we ensure that
we never run out of real memory, so the cache files effectively act 
just as named access points to shared memory.
.PP
Some people have suggested using anonymous mmaped memory. Unfortunately
we need a file descriptor to do the fcntl locking on, so we'd have
to create a separate file on a filesystem somewhere anyway. It seems
easier to just create an explicit \*(L"tmpfs\*(R" filesystem.
.SH "PAGE SIZE AND KEY/VALUE LIMITS"
.IX Header "PAGE SIZE AND KEY/VALUE LIMITS"
To reduce lock contention, Cache::FastMmap breaks up the file
into pages. When you get/set a value, it hashes the key to get a page,
then locks that page, and uses a hash table within the page to
get/store the actual key/value pair.
.PP
One consequence of this is that you cannot store values larger than
a page in the cache at all. Attempting to store values larger than
a page size will fail (the \fIset()\fR function will return false).
.PP
Also keep in mind that each page has it's own hash table, and that we
store the key and value data of each item. So if you are expecting to
store large values and/or keys in the cache, you should use page sizes
that are definitely larger than your largest key + value size + a few
kbytes for the overhead.
.SH "USAGE"
.IX Header "USAGE"
Because the cache uses shared memory through an mmap'd file, you have
to make sure each process connects up to the file. There's probably
two main ways to do this:
.IP "\(bu" 4
Create the cache in the parent process, and then when it forks, each
child will inherit the same file descriptor, mmap'ed memory, etc and
just work. This is the recommended way. (\s-1BEWARE:\s0 This only works under
\&\s-1UNIX\s0 as Win32 has no concept of forking)
.IP "\(bu" 4
Explicitly connect up in each forked child to the share file. In this
case, make sure the file already exists and the children connect with
init_file => 0 to avoid deleting the cache contents and possible
race corruption conditions. Also be careful that multiple children
may race to create the file at the same time, each overwriting and
corrupting content. Use a separate lock file if you must to ensure
only one child creates the file. (This is the only possible way under
Win32)
.PP
The first way is usually the easiest. If you're using the cache in a
Net::Server based module, you'll want to open the cache in the
\&\f(CW\*(C`pre_loop_hook\*(C'\fR, because that's executed before the fork, but after
the process ownership has changed and any chroot has been done.
.PP
In mod_perl, just open the cache at the global level in the appropriate
module, which is executed as the server is starting and before it
starts forking children, but you'll probably want to chmod or chown
the file to the permissions of the apache process.
.SH "METHODS"
.IX Header "METHODS"
.IP "\fInew(%Opts)\fR" 4
.IX Item "new(%Opts)"
Create a new Cache::FastMmap object.
.Sp
Basic global parameters are:
.RS 4
.IP "\(bu" 4
\&\fBshare_file\fR
.Sp
File to mmap for sharing of data.
default on unix: /tmp/sharefile\-$pid\-$time\-$random
default on windows: \f(CW%TEMP\fR%\esharefile\-$pid\-$time\-$random
.IP "\(bu" 4
\&\fBinit_file\fR
.Sp
Clear any existing values and re-initialise file. Useful to do in a
parent that forks off children to ensure that file is empty at the start
(default: 0)
.Sp
\&\fBNote:\fR This is quite important to do in the parent to ensure a
consistent file structure. The shared file is not perfectly transaction
safe, and so if a child is killed at the wrong instant, it might leave
the the cache file in an inconsistent state.
.IP "\(bu" 4
\&\fBraw_values\fR
.Sp
Store values as raw binary data rather than using Storable to free/thaw
data structures (default: 0)
.IP "\(bu" 4
\&\fBcompress\fR
.Sp
Compress the value (but not the key) before storing into the cache. If
you set this to 1, the module will attempt to require the Compress::Zlib
module and then use the \fImemGzip()\fR function on the value data before
storing into the cache, and \fImemGunzip()\fR when retrieving data from the
cache. Some initial testing shows that the uncompressing tends to be
very fast, though the compressing can be quite slow, so it's probably
best to use this option only if you know values in the cache are long
lived and have a high hit rate. (default: 0)
.IP "\(bu" 4
\&\fBenable_stats\fR
.Sp
Enable some basic statistics capturing. When enabled, every read to
the cache is counted, and every read to the cache that finds a value
in the cache is also counted. You can then retrieve these values
via the \fIget_statistics()\fR call. This causes every read action to
do a write on a page, which can cause some more \s-1IO\s0, so it's
disabled by default. (default: 0)
.IP "\(bu" 4
\&\fBexpire_time\fR
.Sp
Maximum time to hold values in the cache in seconds. A value of 0
means does no explicit expiry time, and values are expired only based
on \s-1LRU\s0 usage. Can be expressed as 1m, 1h, 1d for minutes/hours/days
respectively. (default: 0)
.RE
.RS 4
.Sp
You may specify the cache size as:
.IP "\(bu" 4
\&\fBcache_size\fR
.Sp
Size of cache. Can be expresses as 1k, 1m for kilobytes or megabytes
respectively. Automatically guesses page size/page count values.
.RE
.RS 4
.Sp
Or specify explicit page size/page count values. If none of these are
specified, the values page_size = 64k and num_pages = 89 are used.
.IP "\(bu" 4
\&\fBpage_size\fR
.Sp
Size of each page. Must be a power of 2 between 4k and 1024k. If not,
is rounded to the nearest value.
.IP "\(bu" 4
\&\fBnum_pages\fR
.Sp
Number of pages. Should be a prime number for best hashing
.RE
.RS 4
.Sp
The cache allows the use of callbacks for reading/writing data to an
underlying data store.
.IP "\(bu" 4
\&\fBcontext\fR
.Sp
Opaque reference passed as the first parameter to any callback function
if specified
.IP "\(bu" 4
\&\fBread_cb\fR
.Sp
Callback to read data from the underlying data store.  Called as:
.Sp
.Vb 1
\&  $read_cb\->($context, $Key)
.Ve
.Sp
Should return the value to use. This value will be saved in the cache
for future retrievals. Return undef if there is no value for the
given key
.IP "\(bu" 4
\&\fBwrite_cb\fR
.Sp
Callback to write data to the underlying data store.
Called as:
.Sp
.Vb 1
\&  $write_cb\->($context, $Key, $Value, $ExpiryTime)
.Ve
.Sp
In 'write_through' mode, it's always called as soon as a \fIset(...)\fR
is called on the Cache::FastMmap class. In 'write_back' mode, it's
called when a value is expunged from the cache if it's been changed
by a \fIset(...)\fR rather than read from the underlying store with the
\&\fIread_cb\fR above.
.Sp
Note: Expired items do result in the \fIwrite_cb\fR being
called if 'write_back' caching is enabled and the item has been
changed. You can check the \f(CW$ExpiryTime\fR against \f(CW\*(C`time()\*(C'\fR if you only
want to write back values which aren't expired.
.Sp
Also remember that \fIwrite_cb\fR may be called in a different process
to the one that placed the data in the cache in the first place
.IP "\(bu" 4
\&\fBdelete_cb\fR
.Sp
Callback to delete data from the underlying data store.  Called as:
.Sp
.Vb 1
\&  $delete_cb\->($context, $Key)
.Ve
.Sp
Called as soon as \fIremove(...)\fR is called on the Cache::FastMmap class
.IP "\(bu" 4
\&\fBcache_not_found\fR
.Sp
If set to true, then if the \fIread_cb\fR is called and it returns
undef to say nothing was found, then that information is stored
in the cache, so that next time a \fIget(...)\fR is called on that
key, undef is returned immediately rather than again calling
the \fIread_cb\fR
.IP "\(bu" 4
\&\fBwrite_action\fR
.Sp
Either 'write_back' or 'write_through'. (default: write_through)
.IP "\(bu" 4
\&\fBallow_recursive\fR
.Sp
If you're using a callback function, then normally the cache is not
re-enterable, and attempting to call a get/set on the cache will
cause an error. By setting this to one, the cache will unlock any
pages before calling the callback. During the unlock time, other
processes may change data in current cache page, causing possible
unexpected effects. You shouldn't set this unless you know you
want to be able to recall to the cache within a callback.
(default: 0)
.IP "\(bu" 4
\&\fBempty_on_exit\fR
.Sp
When you have 'write_back' mode enabled, then
you really want to make sure all values from the cache are expunged
when your program exits so any changes are written back.
.Sp
The trick is that we only want to do this in the parent process,
we don't want any child processes to empty the cache when they exit.
So if you set this, it takes the \s-1PID\s0 via $$, and only calls
empty in the \s-1DESTROY\s0 method if $$ matches the pid we captured
at the start. (default: 0)
.IP "\(bu" 4
\&\fBunlink_on_exit\fR
.Sp
Unlink the share file when the cache is destroyed.
.Sp
As with empty_on_exit, this will only unlink the file if the
\&\s-1DESTROY\s0 occurs in the same \s-1PID\s0 that the cache was created in
so that any forked children don't unlink the file.
.Sp
This value defaults to 1 if the share_file specified does
not already exist. If the share_file specified does already
exist, it defaults to 0.
.IP "\(bu" 4
\&\fBcatch_deadlocks\fR
.Sp
Sets an alarm(10) before each page is locked via fcntl(F_SETLKW) to catch
any deadlock. This used to be the default behaviour, but it's not really
needed in the default case and could clobber sub-second Time::HiRes
alarms setup by other code. Defaults to 0.
.RE
.RS 4
.RE
.IP "\fIget($Key, [ \e%Options ])\fR" 4
.IX Item "get($Key, [ %Options ])"
Search cache for given Key. Returns undef if not found. If
\&\fIread_cb\fR specified and not found, calls the callback to try
and find the value for the key, and if found (or 'cache_not_found'
is set), stores it into the cache and returns the found value.
.Sp
\&\fI\f(CI%Options\fI\fR is optional, and is used by \fIget_and_set()\fR to control
the locking behaviour. For now, you should probably ignore it
unless you read the code to understand how it works
.ie n .IP "\fIset($Key, \fI$Value\fI, [ \e%Options ])\fR" 4
.el .IP "\fIset($Key, \f(CI$Value\fI, [ \e%Options ])\fR" 4
.IX Item "set($Key, $Value, [ %Options ])"
Store specified key/value pair into cache
.Sp
\&\fI\f(CI%Options\fI\fR is optional, and is used by \fIget_and_set()\fR to control
the locking behaviour. For now, you should probably ignore it
unless you read the code to understand how it works
.Sp
This method returns true if the value was stored in the cache,
false otherwise. See the \s-1PAGE\s0 \s-1SIZE\s0 \s-1AND\s0 \s-1KEY/VALUE\s0 \s-1LIMITS\s0 section
for more details.
.ie n .IP "\fIget_and_set($Key, \fI$Sub\fI)\fR" 4
.el .IP "\fIget_and_set($Key, \f(CI$Sub\fI)\fR" 4
.IX Item "get_and_set($Key, $Sub)"
Atomically retrieve and set the value of a Key.
.Sp
The page is locked while retrieving the \f(CW$Key\fR and is unlocked only after
the value is set, thus guaranteeing the value does not change betwen
the get and set operations.
.Sp
\&\f(CW$Sub\fR is a reference to a subroutine that is called to calculate the
new value to store. \f(CW$Sub\fR gets \f(CW$Key\fR and the current value
as parameters, and
should return the new value to set in the cache for the given \f(CW$Key\fR.
.Sp
For example, to atomically increment a value in the cache, you
can just use:
.Sp
.Vb 1
\&  $Cache\->get_and_set($Key, sub { return ++$_[1]; });
.Ve
.Sp
In scalar context, the return value from this function is the *new* value
stored back into the cache.
.Sp
In list context, a two item array is returned; the new value stored
back into the cache and a boolean that's true if the value was stored
in the cache, false otherwise. See the \s-1PAGE\s0 \s-1SIZE\s0 \s-1AND\s0 \s-1KEY/VALUE\s0 \s-1LIMITS\s0
section for more details.
.Sp
Notes:
.RS 4
.IP "\(bu" 4
Do not perform any get/set operations from the callback sub, as these
operations lock the page and you may end up with a dead lock!
.IP "\(bu" 4
If your sub does a die/throws an exception, the page will correctly
be unlocked (1.15 onwards)
.RE
.RS 4
.RE
.IP "\fIremove($Key, [ \e%Options ])\fR" 4
.IX Item "remove($Key, [ %Options ])"
Delete the given key from the cache
.Sp
\&\fI\f(CI%Options\fI\fR is optional, and is used by \fIget_and_remove()\fR to control
the locking behaviour. For now, you should probably ignore it
unless you read the code to understand how it works
.IP "\fIget_and_remove($Key)\fR" 4
.IX Item "get_and_remove($Key)"
Atomically retrieve value of a Key while removing it from the cache.
.Sp
The page is locked while retrieving the \f(CW$Key\fR and is unlocked only after
the value is removed, thus guaranteeing the value stored by someone else
isn't removed by us.
.IP "\fI\fIclear()\fI\fR" 4
.IX Item "clear()"
Clear all items from the cache
.Sp
Note: If you're using callbacks, this has no effect
on items in the underlying data store. No delete
callbacks are made
.IP "\fI\fIpurge()\fI\fR" 4
.IX Item "purge()"
Clear all expired items from the cache
.Sp
Note: If you're using callbacks, this has no effect
on items in the underlying data store. No delete
callbacks are made, and no write callbacks are made
for the expired data
.IP "\fIempty($OnlyExpired)\fR" 4
.IX Item "empty($OnlyExpired)"
Empty all items from the cache, or if \f(CW$OnlyExpired\fR is
true, only expired items.
.Sp
Note: If 'write_back' mode is enabled, any changed items
are written back to the underlying store. Expired items are
written back to the underlying store as well.
.IP "\fIget_keys($Mode)\fR" 4
.IX Item "get_keys($Mode)"
Get a list of keys/values held in the cache. May immediately be out of
date because of the shared access nature of the cache
.Sp
If \f(CW$Mode\fR == 0, an array of keys is returned
.Sp
If \f(CW$Mode\fR == 1, then an array of hashrefs, with 'key',
\&'last_access', 'expire_time' and 'flags' keys is returned
.Sp
If \f(CW$Mode\fR == 2, then hashrefs also contain 'value' key
.IP "\fIget_statistics($Clear)\fR" 4
.IX Item "get_statistics($Clear)"
Returns a two value list of (nreads, nreadhits). This
only works if you passed enable_stats in the constructor
.Sp
nreads is the total number of read attempts done on the
cache since it was created
.Sp
nreadhits is the total number of read attempts done on
the cache since it was created that found the key/value
in the cache
.Sp
If \f(CW$Clear\fR is true, the values are reset immediately after
they are retrieved
.ie n .IP "\fImulti_get($PageKey, [ \fI$Key1\fI, \f(CI$Key2\fI, ... ])\fR" 4
.el .IP "\fImulti_get($PageKey, [ \f(CI$Key1\fI, \f(CI$Key2\fI, ... ])\fR" 4
.IX Item "multi_get($PageKey, [ $Key1, $Key2, ... ])"
The two multi_xxx routines act a bit differently to the
other routines. With the multi_get, you pass a separate
PageKey value and then multiple keys. The PageKey value
is hashed, and that page locked. Then that page is
searched for each key. It returns a hash ref of
Key => Value items found in that page in the cache.
.Sp
The main advantage of this is just a speed one, if you
happen to need to search for a lot of items on each call.
.Sp
For instance, say you have users and a bunch of pieces
of separate information for each user. On a particular
run, you need to retrieve a sub-set of that information
for a user. You could do lots of \fIget()\fR calls, or you
could use the 'username' as the page key, and just
use one \fImulti_get()\fR and \fImulti_set()\fR call instead.
.Sp
A couple of things to note:
.RS 4
.IP "1." 4
This makes \fImulti_get()\fR/\fImulti_set()\fR and \fIget()\fR/\fIset()\fR
incompatible. Don't mix calls to the two, because
you won't find the data you're expecting
.IP "2." 4
The writeback and callback modes of operation do
not work with \fImulti_get()\fR/\fImulti_set()\fR. Don't attempt
to use them together.
.RE
.RS 4
.RE
.ie n .IP "\fImulti_set($PageKey, { \fI$Key1\fI =\fR $Value1, $Key2 => $Value2, ... }, [ \e%Options ])>" 4
.el .IP "\fImulti_set($PageKey, { \f(CI$Key1\fI =\fR \f(CW$Value1\fR, \f(CW$Key2\fR => \f(CW$Value2\fR, ... }, [ \e%Options ])>" 4
.IX Item "multi_set($PageKey, { $Key1 = $Value1, $Key2 => $Value2, ... }, [ %Options ])>"
Store specified key/value pair into cache
.SH "INTERNAL METHODS"
.IX Header "INTERNAL METHODS"
.ie n .IP "\fI_expunge_all($Mode, \fI$WB\fI)\fR" 4
.el .IP "\fI_expunge_all($Mode, \f(CI$WB\fI)\fR" 4
.IX Item "_expunge_all($Mode, $WB)"
Expunge all items from the cache
.Sp
Expunged items (that have not expired) are written
back to the underlying store if write_back is enabled
.ie n .IP "\fI_expunge_page($Mode, \fI$WB\fI, \f(CI$Len\fI)\fR" 4
.el .IP "\fI_expunge_page($Mode, \f(CI$WB\fI, \f(CI$Len\fI)\fR" 4
.IX Item "_expunge_page($Mode, $WB, $Len)"
Expunge items from the current page to make space for
\&\f(CW$Len\fR bytes key/value items
.Sp
Expunged items (that have not expired) are written
back to the underlying store if write_back is enabled
.IP "\fI_lock_page($Page)\fR" 4
.IX Item "_lock_page($Page)"
Lock a given page in the cache, and return an object
reference that when DESTROYed, unlocks the page
.SH "INCOMPATIBLE CHANGES"
.IX Header "INCOMPATIBLE CHANGES"
.IP "\(bu" 4
From 1.15
.RS 4
.IP "\(bu" 4
Default share_file name is no-longer /tmp/sharefile, but /tmp/sharefile\-$pid\-$time.
This ensures that different runs/processes don't interfere with each other, but
means you may not connect up to the file you expect. You should be choosing an
explicit name in most cases.
.Sp
On Unix systems, you can pass in the environment variable \s-1TMPDIR\s0 to
override the default directory of /tmp
.IP "\(bu" 4
The new option unlink_on_exit defaults to true if you pass a filename for the
share_file which doesn't already exist. This means if you have one process that
creates the file, and another that expects the file to be there, by default it
won't be.
.Sp
Otherwise the defaults seem sensible to cleanup unneeded share files rather than
leaving them around to accumulate.
.RE
.RS 4
.RE
.IP "\(bu" 4
From 1.29
.RS 4
.IP "\(bu" 4
Default share_file name is no longer /tmp/sharefile\-$pid\-$time 
but /tmp/sharefile\-$pid\-$time\-$random.
.RE
.RS 4
.RE
.IP "\(bu" 4
From 1.31
.RS 4
.IP "\(bu" 4
Before 1.31, if you were using raw_values => 0 mode, then the write_cb
would be called with raw frozen data, rather than the thawed object.
From 1.31 onwards, it correctly calls write_cb with the thawed object
value (eg what was passed to the \->\fIset()\fR call in the first place)
.RE
.RS 4
.RE
.IP "\(bu" 4
From 1.36
.RS 4
.IP "\(bu" 4
Before 1.36, an alarm(10) would be set before each attempt to lock
a page. The only purpose of this was to detect deadlocks, which
should only happen if the Cache::FastMmap code was buggy, or a
callback function in \fIget_and_set()\fR made another call into
Cache::FastMmap.
.Sp
However this added unnecessary extra system calls for every lookup,
and for users using Time::HiRes, it could clobber any existing
alarms that had been set with sub-second resolution.
.Sp
So this has now been made an optional feature via the catch_deadlocks
option passed to new.
.RE
.RS 4
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
MLDBM::Sync, \s-1IPC::MM\s0, Cache::FileCache, Cache::SharedMemoryCache,
\&\s-1DBI\s0, Cache::Mmap, BerkeleyDB
.PP
Latest news/details can also be found at:
.PP
<http://cpan.robm.fastmail.fm/cachefastmmap/>
.PP
Available on github at:
.PP
https://github.com/robmueller/cache\-fastmmap/ <https://github.com/robmueller/cache-fastmmap/>
.SH "AUTHOR"
.IX Header "AUTHOR"
Rob Mueller <mailto:cpan@robm.fastmail.fm>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2003\-2011 by Opera Software Australia Pty Ltd
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
