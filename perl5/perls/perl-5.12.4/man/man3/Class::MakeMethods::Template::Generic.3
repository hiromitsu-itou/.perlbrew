.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MakeMethods::Template::Generic 3"
.TH MakeMethods::Template::Generic 3 "2004-09-07" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Class::MakeMethods::Template::Generic \- Templates for common meta\-method types
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&  package MyObject;
\&  use Class::MakeMethods (
\&    \*(AqTemplate::Hash:new\*(Aq       => [ \*(Aqnew\*(Aq ],
\&    \*(AqTemplate::Hash:scalar\*(Aq    => [ \*(Aqfoo\*(Aq ]
\&    \*(AqTemplate::Static:scalar\*(Aq  => [ \*(Aqbar\*(Aq ]
\&  );
\&  
\&  package main;
\&
\&  my $obj = MyObject\->new( foo => "Foozle", bar => "Bozzle" );
\&  print $obj\->foo();
\&  $obj\->bar("Bamboozle");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package provides a variety of abstract interfaces for constructors
and accessor methods, which form a common foundation for meta-methods
provided by the Hash, Scalar, Flyweight, Static, PackageVar, and
ClassVar implementations.
.PP
Generally speaking, the Generic meta-methods define calling interfaces
and behaviors which are bound to differently scoped data by each
of those subclasses.
.SS "new Constructor"
.IX Subsection "new Constructor"
There are several types of hash-based object constructors to choose from.
.PP
Each of these methods creates and returns a reference to a new
blessed instance. They differ in how their (optional) arguments
are interpreted to set initial values, and in how they operate when
called as class or instance methods.
.PP
\&\fBInterfaces\fR: The following interfaces are supported.
.IP "\-with_values," 4
.IX Item "-with_values,"
Provides the with_values behavior.
.IP "\-with_init" 4
.IX Item "-with_init"
Provides the with_init behavior.
.IP "\-with_methods" 4
.IX Item "-with_methods"
Provides the with_methods behavior.
.IP "\-new_and_init" 4
.IX Item "-new_and_init"
Provides the with_init behavior for \fI*\fR, and the general purpose method_init behavior as an init method.
.IP "\-copy_with_values" 4
.IX Item "-copy_with_values"
Provides the copy behavior.
.PP
\&\fBBehaviors\fR: The following types of constructor methods are available.
.IP "with_values" 4
.IX Item "with_values"
Creates and blesses a new instance.
.Sp
If arguments are passed they are included in the instance, otherwise it will be empty.
.Sp
Returns the new instance.
.Sp
May be called as a class or instance method.
.IP "with_methods" 4
.IX Item "with_methods"
Creates, blesses, and returns a new instance.
.Sp
The arguments are treated as a hash of method\-name/argument\-value
pairs, with each such pair causing a call \f(CW\*(C`$self\->name($value)\*(C'\fR.
.IP "with_init" 4
.IX Item "with_init"
Creates and blesses a new instance, then calls a method named \f(CW\*(C`init\*(C'\fR,
passing along any arguments that were initially given.
.Sp
Returns the new instance.
.Sp
The \fIinit\fR() method should be defined in the class declaring these methods.
.Sp
May be called as a class or instance method.
.IP "and_then_init" 4
.IX Item "and_then_init"
Creates a new instance using method\-name/argument\-value pairs, like \f(CW\*(C`with_methods\*(C'\fR, but then calls a method named \f(CW\*(C`init\*(C'\fR before returning the new object. The \f(CW\*(C`init\*(C'\fR method does not receive any arguments.
.Sp
The \fIinit\fR() method should be defined in the class declaring these methods.
.IP "instance_with_methods" 4
.IX Item "instance_with_methods"
If called as a class method, creates, blesses, and returns a new
instance. If called as an object method, operates on and returns
the existing instance.
.Sp
Accepts name-value pair arguments, or a reference to hash of such
pairs, and calls the named method for each with the supplied value
as a single argument. (See the Universal method_init behavior for
more discussion of this pattern.)
.IP "copy_with values" 4
.IX Item "copy_with values"
Produce a copy of an instance. Can not be called as a class method.
.Sp
The copy is a *shallow* copy; any references will be shared by the
instance upon which the method is called and the returned newborn.
.Sp
If a list of key-value pairs is passed as arguments to the method,
they are added to the copy, overwriting any values with the same
key that may have been copied from the original.
.IP "copy_with_methods" 4
.IX Item "copy_with_methods"
Produce a copy of an instance. Can not be called as a class method.
.Sp
The copy is a *shallow* copy; any references will be shared by the
instance upon which the method is called and the returned newborn.
.Sp
Accepts name-value pair arguments, or a reference to hash of such
pairs, and calls the named method on the copy for each with the
supplied value as a single argument before the copy is returned.
.IP "copy_instance_with_values" 4
.IX Item "copy_instance_with_values"
If called as a class method, creates, blesses, and returns a new
instance. If called as an object method, produces and returns a
copy of an instance.
.Sp
The copy is a *shallow* copy; any references will be shared by the
instance upon which the method is called and the returned newborn.
.Sp
If a list of key-value pairs is passed as arguments to the method,
they are added to the copy, overwriting any values with the same
key that may have been copied from the original.
.IP "copy_instance_with_methods" 4
.IX Item "copy_instance_with_methods"
If called as a class method, creates, blesses, and returns a new
instance. If called as an object method, produces and returns a
copy of an instance.
.Sp
The copy is a *shallow* copy; any references will be shared by the
instance upon which the method is called and the returned newborn.
.Sp
Accepts name-value pair arguments, or a reference to hash of such
pairs, and calls the named method on the copy for each with the supplied value as
a single argument before the copy is returned.
.PP
\&\fBParameters\fR: The following parameters are supported:
.IP "init_method" 4
.IX Item "init_method"
The name of the method to call after creating a new instance. Defaults to 'init'.
.SS "scalar Accessor"
.IX Subsection "scalar Accessor"
A generic scalar-value accessor meta-method which serves as an
abstraction for basic \*(L"get_set\*(R" methods and numerous related
interfaces
.PP
.Vb 5
\&  use Class::MakeMethods \-MakerClass => "...", 
\&        scalar => [ \*(Aqfoo\*(Aq, \*(Aqbar\*(Aq ];
\&  ...
\&  $self\->foo( \*(Aqmy new foo value\*(Aq );
\&  print $self\->foo();
.Ve
.PP
(Note that while you can use the scalar methods to store references to
various data structures, there are other meta-methods defined below that
may be more useful for managing references to arrays, hashes, and objects.)
.PP
\&\fBInterfaces\fR: The following calling interfaces are available.
.IP "get_set (default)" 4
.IX Item "get_set (default)"
Provides get_set method for \fI*\fR.
.Sp
Example: Create method foo, which sets the value of 'foo' for this
instance if an argument is passed in, and then returns the value
whether or not it's been changed:
.Sp
.Vb 2
\&  use Class::MakeMethods \-MakerClass => "...", 
\&    scalar => [ \*(Aqfoo\*(Aq ];
.Ve
.IP "get_protected_set" 4
.IX Item "get_protected_set"
Provides an get_set accessor for \fI*\fR that croaks if a new value
is passed in from a package that is not a subclass of the declaring
one.
.IP "get_private_set" 4
.IX Item "get_private_set"
Provides an get_set accessor for \fI*\fR that croaks if a new value
is passed in from a package other than the declaring one.
.IP "read_only" 4
.IX Item "read_only"
Provides an accessor for \fI*\fR that does not modify its value. (Its
initial value would have to be set by some other means.)
.IP "eiffel" 4
.IX Item "eiffel"
Provides get behavior as \fI*\fR, and set behavior as set_\fI*\fR.
.Sp
Example: Create methods bar which returns the value of 'bar' for
this instance (takes no arguments), and set_bar, which sets the
value of 'bar' (no return):
.Sp
.Vb 2
\&  use Class::MakeMethods \-MakerClass => "...", 
\&    scalar => [ \-\-eiffel => \*(Aqbar\*(Aq ];
.Ve
.IP "java" 4
.IX Item "java"
Provides get behavior as get\fI*\fR, and set behavior as set\fI*\fR.
.Sp
Example: Create methods getBaz which returns the value of 'Baz'
for this instance (takes no arguments), and setBaz, which sets the
value for this instance (no return):
.Sp
.Vb 2
\&  use Class::MakeMethods \-MakerClass => "...", 
\&    scalar => [ \-\-java => \*(AqBaz\*(Aq ];
.Ve
.IP "init_and_get" 4
.IX Item "init_and_get"
Creates methods which cache their results in a hash key.
.Sp
Provides the get_init behavior for \fI*\fR, and an delete behavior for clear_\fI*\fR. 
Specifies default value for init_method parameter of init_\fI*\fR.
.IP "with_clear" 4
.IX Item "with_clear"
Provides get_set behavior for \fI*\fR, and a clear_\fI*\fR method.
.PP
\&\fBBehaviors\fR: The following types of accessor methods are available.
.IP "get_set" 4
.IX Item "get_set"
If no argument is provided, returns the value of the current instance. The value defaults to undef.
.Sp
If an argument is provided, it is stored as the value of the current
instance (even if the argument is undef), and that value is returned.
.Sp
Also available as get_protected_set and get_private_set, which are
available for public read-only access, but have access control
limitations.
.IP "get" 4
.IX Item "get"
Returns the value from the current instance.
.IP "set" 4
.IX Item "set"
Sets the value for the current instance. If called with no arguments,
the value is set to undef. Does not return a value.
.IP "clear" 4
.IX Item "clear"
Sets value to undef.
.IP "get_set_chain" 4
.IX Item "get_set_chain"
Like get_set, but if called with an argument, returns the object it was called on. This allows a series of mutators to be called as follows:
.Sp
.Vb 5
\&  package MyObject;
\&  use Class::MakeMethods (
\&    \*(AqTemplate::Hash:scalar \-\-get_set_chain\*(Aq => \*(Aqfoo bar baz\*(Aq
\&  );
\&  ...
\&  
\&  my $obj = MyObject\->new\->foo(\*(AqFoozle\*(Aq);
\&  $obj\->bar("none")\->baz("Brazil");
\&  print $obj\->foo, $obj\->bar, $obj\->baz;
.Ve
.IP "get_set_prev" 4
.IX Item "get_set_prev"
Like get_set, but if called with an argument, returns the previous value before it was changed to the new one.
.IP "get_init" 4
.IX Item "get_init"
If the value is currently undefined, calls the init_method. Returns the value.
.PP
\&\fBParameters\fR: The following parameters are supported:
.IP "init_method" 4
.IX Item "init_method"
The name of a method to be called to initialize this meta-method.
.Sp
Only used by the get_init behavior.
.SS "string Accessor"
.IX Subsection "string Accessor"
A generic scalar-value accessor meta-method which serves as an
abstraction for basic \*(L"get_set\*(R" methods and numerous related
interfaces
.PP
.Vb 5
\&  use Class::MakeMethods \-MakerClass => "...", 
\&        string => [ \*(Aqfoo\*(Aq, \*(Aqbar\*(Aq ];
\&  ...
\&  $self\->foo( \*(Aqmy new foo value\*(Aq );
\&  print $self\->foo();
.Ve
.PP
This meta-method extends the scalar meta-method, and supports the same interfaces and parameters.
.PP
However, it generally treats values as strings, and can not be used to store references.
.PP
\&\fBInterfaces\fR: In addition to those provided by \f(CW\*(C`scalar\*(C'\fR, the following calling interfaces are available.
.IP "\-get_concat" 4
.IX Item "-get_concat"
Provides the get_concat behavior for \fI*\fR, and a clear_\fI*\fR method.
.Sp
Example:
.Sp
.Vb 2
\&  use Class::MakeMethods
\&    get_concat => { name => \*(Aqwords\*(Aq, join => ", " };
\&
\&  $obj\->words(\*(Aqfoo\*(Aq);
\&  $obj\->words(\*(Aqbar\*(Aq);
\&  $obj\->words() eq \*(Aqfoo, bar\*(Aq;
.Ve
.PP
\&\fBBehaviors\fR: In addition to those provided by \f(CW\*(C`scalar\*(C'\fR, the following types of accessor methods are available.
.IP "concat" 4
.IX Item "concat"
Concatenates the argument value with the existing value.
.IP "get_concat" 4
.IX Item "get_concat"
Like get_set except sets do not clear out the original value, but instead
concatenate the new value to the existing one.
.PP
\&\fBParameters\fR: In addition to those provided by \f(CW\*(C`scalar\*(C'\fR, the following parameters are supported.
.IP "join" 4
.IX Item "join"
If the join parameter is defined, each time the get_concat behavior
is invoked, it will glue its argument onto any existing value with
the join string as the separator. The join field is applied \fIbetween\fR
values, not prior to the first or after the last. Defaults to undefined
.SS "string_index"
.IX Subsection "string_index"
.Vb 1
\&  string_index => [ qw / foo bar baz / ]
.Ve
.PP
Creates string accessor methods, like string above, but also
maintains a static hash index in which each object is stored under
the value of the field when the slot is set.
.PP
This is a unique index, so only one object can have a given key.
If an object has a slot set to a value which another object is
already set to the object currently set to that value has that slot
set to undef and the new object will be put into the hash under
that value.
.PP
Objects with undefined values are not stored in the index.
.PP
Note that to free items from memory, you must clear these values!
.PP
\&\fBMethods\fR:
.IP "\(bu" 4
The method find_x is defined which if called with any arguments
returns a list of the objects stored under those values in the
hash. Called with no arguments, it returns a reference to the hash.
.PP
\&\fBProfiles\fR:
.IP "\(bu" 4
find_or_new
.Sp
.Vb 1
\&  \*(Aqstring_index \-find_or_new\*(Aq => [ qw / foo bar baz / ]
.Ve
.Sp
Just like string_index except the find_x method is defined to call the new
method to create an object if there is no object already stored under
any of the keys you give as arguments.
.SS "number Accessor"
.IX Subsection "number Accessor"
A generic scalar-value accessor meta-method which serves as an
abstraction for basic \*(L"get_set\*(R" methods and numerous related
interfaces
.PP
.Vb 5
\&  use Class::MakeMethods \-MakerClass => "...", 
\&        string => [ \*(Aqfoo\*(Aq, \*(Aqbar\*(Aq ];
\&  ...
\&  $self\->foo( 23 );
\&  print $self\->foo();
.Ve
.PP
This meta-method extends the scalar meta-method, and supports the same interfaces and parameters.
.PP
However, it generally treats values as numbers, and can not be used to store strings or references.
.PP
\&\fBInterfaces\fR: In addition to those provided by \f(CW\*(C`scalar\*(C'\fR, the following calling interfaces are available.
.IP "\-counter" 4
.IX Item "-counter"
Provides the numeric get_set behavior for \fI*\fR, and numeric \fI*\fR_incr and \fI*\fR_reset methods.
.PP
\&\fBBehaviors\fR: In addition to those provided by \f(CW\*(C`scalar\*(C'\fR, the following types of accessor methods are available.
.IP "get_set" 4
.IX Item "get_set"
The get_set behavior is similar to the default scalar behavior except that empty values are treated as zero.
.IP "increment" 4
.IX Item "increment"
If no argument is provided, increments the \fIhash_key\fR value by 1.
If an argument is provided, the value is incremented by that amount.
Returns the increased value.
.IP "clear" 4
.IX Item "clear"
Sets the value to zero.
.SS "boolean Accessor"
.IX Subsection "boolean Accessor"
A generic scalar-value accessor meta-method which serves as an abstraction for basic \*(L"get_set\*(R" methods and numerous related interfaces
.PP
.Vb 6
\&  use Class::MakeMethods \-MakerClass => "...", 
\&        string => [ \*(Aqfoo\*(Aq, \*(Aqbar\*(Aq ];
\&  ...
\&  $self\->foo( 1 );
\&  print $self\->foo();
\&  $self\->clear_foo;
.Ve
.PP
This meta-method extends the scalar meta-method, and supports the
same interfaces and parameters. However, it generally treats values
as true-or-false flags, and can not be used to store strings,
numbers, or references.
.PP
\&\fBInterfaces\fR:
.IP "flag_set_clear (default)" 4
.IX Item "flag_set_clear (default)"
Provides the get_set behavior for \fI*\fR, and set_\fI*\fR and clear_\fI*\fR methods to set the value to true or false.
.PP
\&\fBBehaviors\fR: In addition to those provided by \f(CW\*(C`scalar\*(C'\fR, the following types of accessor methods are available.
.IP "get_set" 4
.IX Item "get_set"
The get_set behavior is similar to the get_set scalar behavior
except that empty or false values are treated as zero, and true
values are treated as zero.
.IP "set_true" 4
.IX Item "set_true"
Sets the value to one.
.IP "set_false" 4
.IX Item "set_false"
Sets the value to zero.
=back
.SS "bits Accessor"
.IX Subsection "bits Accessor"
A generic accessor for bit-field values.
.PP
The difference between 'Template::Generic:bits' and
\&'Template::Generic:boolean' is that all flags created with this
meta-method are stored in a single vector for space efficiency.
.PP
\&\fBInterfaces\fR: The following calling interfaces are available.
.IP "default" 4
.IX Item "default"
Provides get_set behavior for \fI*\fR, a set_\fI*\fR method which sets
the value to true and a clear_\fI*\fR method which sets the value to
false.
.Sp
Also defines methods named bits, bit_fields, and bit_dump with the
behaviors below. These methods are shared across all of the boolean
meta-methods defined by a single class.
.IP "class_methods" 4
.IX Item "class_methods"
\&.
.PP
\&\fBBasic Behaviors\fR: The following types of bit-level accessor methods are available.
.IP "get_set" 4
.IX Item "get_set"
Returns the value of the named flag.  If called with an argument, it first
sets the named flag to the truth-value of the argument.
.IP "set_true" 4
.IX Item "set_true"
Sets the value to true.
.IP "set_false" 4
.IX Item "set_false"
Sets the value to false.
.PP
\&\fBGroup Methods\fR: The following types of methods manipulate the overall vector value.
.IP "bits" 4
.IX Item "bits"
Returns the vector containing all of the bit fields (remember however
that a vector containing all 0 bits is still true).
.IP "bit_dump" 4
.IX Item "bit_dump"
Returns a hash of the flag\-name/flag\-value pairs.
.IP "bits_size" 4
.IX Item "bits_size"
Returns the number of bits that can fit into the current vector.
.IP "bits_complement" 4
.IX Item "bits_complement"
Returns the twos-complement of the vector.
.IP "bit_pos_get" 4
.IX Item "bit_pos_get"
Takes a single argument and returns the value of the bit stored in that position.
.IP "bit_pos_set" 4
.IX Item "bit_pos_set"
Takes two arguments and sets the bit stored in the position of the first argument to the value of the second argument.
.PP
\&\fBClass Methods\fR: The following types of class methods are available.
.IP "bit_names" 4
.IX Item "bit_names"
Returns a list of all the flags by name.
.SS "array Accessor"
.IX Subsection "array Accessor"
Creates accessor methods for manipulating arrays of values.
.PP
\&\fBInterfaces\fR: The following calling interfaces are available.
.IP "default" 4
.IX Item "default"
Provides get_set behavior for \fI*\fR, and \fIverb\fR_\fI*\fR methods for the non-get behaviors below.
.IP "minimal" 4
.IX Item "minimal"
Provides get_set behavior for \fI*\fR, and \fI*\fR_\fIverb\fR methods for clear behavior.
.IP "get_set_items" 4
.IX Item "get_set_items"
Provides the get_set_items for \fI*\fR.
.IP "x_verb" 4
.IX Item "x_verb"
Provides get_push behavior for \fI*\fR, and \fI*\fR_\fIverb\fR methods for the non-get behaviors below.
.IP "get_set_ref" 4
.IX Item "get_set_ref"
Provides the get_set_ref for \fI*\fR.
.IP "get_set_ref_help" 4
.IX Item "get_set_ref_help"
Provides the get_set_ref for \fI*\fR, and \fIverb\fR_\fI*\fR methods for the non-get behaviors below.
.PP
\&\fBBehaviors\fR: The following types of accessor methods are available.
.IP "get_set_items" 4
.IX Item "get_set_items"
Called with no arguments returns a reference to the array stored in the slot.
.Sp
Called with one simple scalar argument it treats the argument as an index
and returns the value stored under that index.
.Sp
Called with more than one argument, treats them as a series of index/value
pairs and adds them to the array.
.IP "get_push" 4
.IX Item "get_push"
If arguments are passed, these values are pushed on to the list; if a single array ref is passed, its values are used as the arguments.
.Sp
This method returns the list of values stored in the slot. In an array
context it returns them as an array and in a scalar context as a
reference to the array.
.IP "get_set_ref" 4
.IX Item "get_set_ref"
If arguments are passed, these values are placed on the list, replacing the current contents; if a single array ref is passed, its values are used as the arguments.
.Sp
This method returns the list of values stored in the slot. In an array
context it returns them as an array and in a scalar context as a
reference to the array.
.IP "get_set" 4
.IX Item "get_set"
If arguments are passed, these values are placed on the list, replacing the current contents.
.Sp
This method returns the list of values stored in the slot. In an array
context it returns them as an array and in a scalar context as a
reference to the array.
.IP "push" 4
.IX Item "push"
Append items to tail.
.IP "pop" 4
.IX Item "pop"
Remove an item from the tail.
.IP "shift" 4
.IX Item "shift"
Remove an item from the front.
.IP "unshift" 4
.IX Item "unshift"
Prepend items to front.
.IP "splice" 4
.IX Item "splice"
Remove or replace items.
.IP "clear" 4
.IX Item "clear"
Remove all items.
.IP "count" 4
.IX Item "count"
Returns the number of item in the list.
.SS "hash Accessor"
.IX Subsection "hash Accessor"
Creates accessor methods for manipulating hashes of key-value pairs.
.PP
\&\fBInterfaces\fR: The following calling interfaces are available.
.IP "default" 4
.IX Item "default"
Provides get_set behavior for \fI*\fR, and \fI*\fR_\fIverb\fR methods for most of the other behaviors below.
.IP "get_set_items" 4
.IX Item "get_set_items"
Provides the get_set_items for \fI*\fR.
.PP
\&\fBBehaviors\fR: The following types of accessor methods are available.
.IP "get_set_items" 4
.IX Item "get_set_items"
Called with no arguments returns a reference to the hash stored.
.Sp
Called with one simple scalar argument it treats the argument as a key
and returns the value stored under that key.
.Sp
Called with more than one argument, treats them as a series of key/value
pairs and adds them to the hash.
.IP "get_push" 4
.IX Item "get_push"
Called with no arguments returns the hash stored, as a hash
in a list context or as a reference in a scalar context.
.Sp
Called with one simple scalar argument it treats the argument as a key
and returns the value stored under that key.
.Sp
Called with one array reference argument, the array elements
are considered to be be keys of the hash. x returns the list of values
stored under those keys (also known as a \fIhash slice\fR.)
.Sp
Called with one hash reference argument, the keys and values of the
hash are added to the hash.
.Sp
Called with more than one argument, treats them as a series of key/value
pairs and adds them to the hash.
.IP "get_set" 4
.IX Item "get_set"
Like get_push, except if called with more then one argument, empties
the current hash items before adding those arguments to the hash.
.IP "push" 4
.IX Item "push"
Called with one hash reference argument, the keys and values of the
hash are added to the hash.
.Sp
Called with more than one argument, treats them as a series of key/value
pairs and adds them to the hash.
.IP "keys" 4
.IX Item "keys"
Returns a list of the keys of the hash.
.IP "values" 4
.IX Item "values"
Returns a list of the values in the hash.
.IP "tally" 4
.IX Item "tally"
Takes a list of arguments and for each scalar in the list increments the
value stored in the hash and returns a list of the current (after the
increment) values.
.IP "exists" 4
.IX Item "exists"
Takes a single key, returns whether that key exists in the hash.
.IP "delete" 4
.IX Item "delete"
Takes a list, deletes each key from the hash, and returns the corresponding values.
.IP "clear" 4
.IX Item "clear"
Resets hash to empty.
.SS "tiedhash Accessor"
.IX Subsection "tiedhash Accessor"
A variant of Generic:hash which initializes the hash by tieing it to a caller-specified package.
.PP
See the documentation on \f(CW\*(C`Generic:hash\*(C'\fR for interfaces and behaviors.
.PP
\&\fBParameters\fR: The following parameters \fImust\fR be provided:
.IP "tie" 4
.IX Item "tie"
\&\fIRequired\fR. The name of the class to tie to.
\&\fIMake sure you have \f(CI\*(C`use\*(C'\fId the required class\fR.
.IP "args" 4
.IX Item "args"
\&\fIRequired\fR. Additional arguments for the tie, as an array ref.
.PP
Example:
.PP
.Vb 2
\&  use Class::MakeMethods
\&    tie_hash => [ hits => { tie => q/Tie::RefHash/, args => [] } ];
\&
\&  use Class::MakeMethods
\&    tie_hash => [ [qw(hits errors)] => { tie => q/Tie::RefHash/, args => [] } ];
\&
\&  use Class::MakeMethods
\&    tie_hash => [ { name => hits, tie => q/Tie::RefHash/, args => [] } ];
.Ve
.SS "hash_of_arrays Accessor"
.IX Subsection "hash_of_arrays Accessor"
Creates accessor methods for manipulating hashes of array-refs.
.PP
\&\fBInterfaces\fR: The following calling interfaces are available.
.IP "default" 4
.IX Item "default"
Provides get behavior for \fI*\fR, and \fI*\fR_\fIverb\fR methods for the other behaviors below.
.PP
\&\fBBehaviors\fR: The following types of accessor methods are available.
.IP "get" 4
.IX Item "get"
Returns all the values for all the given keys, in order.  If no keys are
given, returns all the values (in an unspecified key order).
.Sp
The result is returned as an arrayref in scalar context.  This arrayref
is \fInot\fR part of the data structure; messing with it will not affect
the contents directly (even if a single key was provided as argument.)
.Sp
If any argument is provided which is an arrayref, then the members of
that array are used as keys.  Thus, the trivial empty-key case may be
utilized with an argument of [].
.IP "keys" 4
.IX Item "keys"
Returns the keys of the hash.  As an arrayref in scalar context.
.IP "exists" 4
.IX Item "exists"
Takes a list of keys, and returns whether all of the key exists in the hash
(i.e., the \f(CW\*(C`and\*(C'\fR of whether the individual keys exist).
.IP "delete" 4
.IX Item "delete"
Takes a list, deletes each key from the hash.
.IP "push" 4
.IX Item "push"
Takes a key, and some values.  Pushes the values onto the list denoted
by the key.  If the first argument is an arrayref, then each element of
that arrayref is treated as a key and the elements pushed onto each
appropriate list.
.IP "pop" 4
.IX Item "pop"
Takes a list of keys, and pops each one.  Returns the list of popped
elements.  undef is returned in the list for each key that is has an
empty list.
.IP "unshift" 4
.IX Item "unshift"
Like push, only the from the other end of the lists.
.IP "shift" 4
.IX Item "shift"
Like pop, only the from the other end of the lists.
.IP "splice" 4
.IX Item "splice"
Takes a key, offset, length, and a values list.  Splices the list named
by the key.  Anything from the offset argument (inclusive) may be
omitted.  See \*(L"splice\*(R" in perlfunc.
.IP "clear" 4
.IX Item "clear"
Takes a list of keys.  Resets each named list to empty (but does not
delete the keys.)
.IP "count" 4
.IX Item "count"
Takes a list of keys.  Returns the sum of the number of elements for
each named list.
.IP "index" 4
.IX Item "index"
Takes a key, and a list of indices.  Returns a list of each item at the
corresponding index in the list of the given key.  Uses undef for
indices beyond range.
.IP "remove" 4
.IX Item "remove"
Takes a key, and a list of indices.  Removes each corresponding item
from the named list.  The indices are effectively looked up at the point
of call \*(-- thus removing indices 3, 1 from list (a, b, c, d) will
remove (d) and (b).
.IP "sift" 4
.IX Item "sift"
Takes a key, and a set of named arguments, which may be a list or a hash
ref.  Removes list members based on a grep-like approach.
.RS 4
.IP "filter" 4
.IX Item "filter"
The filter function used (as a coderef).  Is passed two arguments, the
value compared against, and the value in the list that is potential for
grepping out.  If returns true, the value is removed.  Default is \f(CW\*(C`sub { $_[0] == $_[1] }\*(C'\fR.
.IP "keys" 4
.IX Item "keys"
The list keys to sift through (as an arrayref).  Unknown keys are
ignored.  Default: all the known keys.
.IP "values" 4
.IX Item "values"
The values to sift out (as an arrayref).  Default: \f(CW\*(C`[undef]\*(C'\fR
.RE
.RS 4
.RE
.SS "object Accessor"
.IX Subsection "object Accessor"
Creates accessor methods for manipulating references to objects.
.PP
In addition to creating a method to get and set the object reference,
the meta-method can also define forwarded methods that automatically
pass calls onto the object stored in that slot; see the description of the  'delegate' parameter below.
.PP
\&\fBInterfaces\fR: The following calling interfaces are available.
.IP "default" 4
.IX Item "default"
Provides get_set behavior for \fI*\fR, clear behavior for 'delete_*',
and forwarding methods for any values in the method's 'delegate'
or 'soft_delegate' parameters.
.IP "get_and_set" 4
.IX Item "get_and_set"
Provides named get method, set_\fIx\fR and clear_\fIx\fR methods.
.IP "get_init_and_set" 4
.IX Item "get_init_and_set"
Provides named get_init method, set_\fIx\fR and clear_\fIx\fR methods.
.PP
\&\fBBehaviors\fR: The following types of accessor methods are available.
.IP "get_set" 4
.IX Item "get_set"
The get_set method, if called with a reference to an object of the
given class as the first argument, stores it.
.Sp
If called with any other arguments, creates and stores a new object, passing the arguemnts to the \fInew()\fR method for the object.
.Sp
If called without arguments, returns the current value, which may be undefined if one has not been stored yet.
.IP "get_set_init" 4
.IX Item "get_set_init"
The get_set_init method, if called with a reference to an object of the
given class as the first argument, stores it.
.Sp
If the slot is not filled yet it creates an object by calling the given
new method of the given class. Any arguments passed to the get_set_init
method are passed on to new.
.Sp
In all cases the object now stored is returned.
.IP "get_init" 4
.IX Item "get_init"
If the instance is empty, creates and stores a new one. Returns the instance.
.IP "get" 4
.IX Item "get"
Returns the current value, which may be undefined if one has not been stored yet.
.IP "set" 4
.IX Item "set"
If called with a reference to an object of the given class as the first argument, stores it.
.Sp
If called with any other arguments, creates and stores a new object, passing the arguments to the \fInew()\fR method.
.Sp
If called without arguments, creates and stores a new object, without any arguments to the \fInew()\fR method.
.IP "clear" 4
.IX Item "clear"
Removes the reference value.
.IP "\fIforwarding\fR" 4
.IX Item "forwarding"
If a 'delegate' or 'soft_delegate' parameter is provided, methods
with those names are created that are forwarded directly to the
object in the slot, as described below.
.PP
\&\fBParameters\fR: The following parameters are supported:
.IP "class" 4
.IX Item "class"
\&\fIRequired\fR. The type of object that will be stored.
.IP "new_method" 4
.IX Item "new_method"
The name of the method to call on the above class to create a new instance. Defaults to 'new'.
.IP "delegate" 4
.IX Item "delegate"
The methods to forward to the object. Can contain a method name,
a string of space-spearated method names, or an array of method
names. This type of method will croak if it is called when the
target object is not defined.
.IP "soft_delegate" 4
.IX Item "soft_delegate"
The methods to forward to the object, if it is present. Can contain
a method name, a string of space-spearated method names, or an
array of method names. This type of method will return nothing if
it is called when the target object is not defined.
.SS "instance Accessor"
.IX Subsection "instance Accessor"
Creates methods to handle an instance of the calling class.
.PP
\&\s-1PROFILES\s0
.IP "default" 4
.IX Item "default"
Provides named get method, and \fIverb\fR_\fIx\fR set, new, and clear methods.
.IP "\-implicit_new" 4
.IX Item "-implicit_new"
Provides named get_init method, and \fIverb\fR_\fIx\fR set, and clear methods.
.IP "\-x_verb" 4
.IX Item "-x_verb"
Provides named get method, and \fIx\fR_\fIverb\fR set, new, and clear methods.
.PP
\&\fBBehaviors\fR: The following types of accessor methods are available.
.IP "get" 4
.IX Item "get"
Returns the value of the instance parameter, which may be undefined if one has not been stored yet.
.IP "get_init" 4
.IX Item "get_init"
If the instance is empty, creates and stores a new one. Returns the instance.
.IP "set" 4
.IX Item "set"
Takes a single argument and sets the instance to that value.
.IP "new" 4
.IX Item "new"
Creates and stores a new instance.
.IP "clear" 4
.IX Item "clear"
Sets the instance parameter to undef.
.PP
\&\fBParameters\fR: The following parameters are supported:
.IP "instance" 4
.IX Item "instance"
Holds the instance reference. Defaults to undef
.IP "new_method" 4
.IX Item "new_method"
The name of the method to call when creating a new instance. Defaults to 'new'.
.SS "array_of_objects Accessor"
.IX Subsection "array_of_objects Accessor"
Creates accessor methods for manipulating references to arrays of object references.
.PP
Operates like \f(CW\*(C`Generic:array\*(C'\fR, but prior to adding any item to
the array, it first checks to see if it is an instance of the
designated class, and if not passes it as an argument to that
class's new method and stores the result instead.
.PP
Forwarded methods return a list of the results returned
by \f(CW\*(C`map\*(C'\fRing the method over each object in the array.
.PP
See the documentation on \f(CW\*(C`Generic:array\*(C'\fR for interfaces and behaviors.
.PP
\&\fBParameters\fR: The following parameters are supported:
.IP "class" 4
.IX Item "class"
\&\fIRequired\fR. The type of object that will be stored.
.IP "delegate" 4
.IX Item "delegate"
The methods to forward to the object. Can contain a method name, a string of space-spearated method names, or an array of method names.
.IP "new_method" 4
.IX Item "new_method"
The name of the method to call on the above class to create a new instance. Defaults to 'new'.
.SS "code Accessor"
.IX Subsection "code Accessor"
Creates accessor methods for manipulating references to subroutines.
.PP
\&\fBInterfaces\fR: The following calling interfaces are available.
.IP "default" 4
.IX Item "default"
Provides the call_set functionality.
.IP "method" 4
.IX Item "method"
Provides the call_method functionality.
.PP
\&\fBBehaviors\fR: The following types of accessor methods are available.
.IP "call_set" 4
.IX Item "call_set"
If called with one argument which is a \s-1CODE\s0 reference, it installs that
code in the slot. Otherwise it runs the code stored in the slot with
whatever arguments (including none) were passed in.
.IP "call_method" 4
.IX Item "call_method"
Just like \fBcall_set\fR, except the code is called like a method, with \f(CW$self\fR
as its first argument. Basically, you are creating a method which can be
different for each object.
.SS "code_or_scalar Accessor"
.IX Subsection "code_or_scalar Accessor"
Creates accessor methods for manipulating either strings or references to subroutines.
.PP
You can store any scalar value; code refs are executed when you retrieve the value, while other scalars are returned as-is.
.PP
\&\fBInterfaces\fR: The following calling interfaces are available.
.IP "default" 4
.IX Item "default"
Provides the call_set functionality.
.IP "method" 4
.IX Item "method"
Provides the call_method functionality.
.IP "eiffel" 4
.IX Item "eiffel"
Provides the named get_method, and a helper set_* method.
.PP
\&\fBBehaviors\fR: The following types of accessor methods are available.
.IP "get_set_call" 4
.IX Item "get_set_call"
If called with an argument, either a \s-1CODE\s0 reference or some other scalar, it installs that code in the slot. Otherwise, if the current value  runs the code stored in the slot with
whatever arguments (including none) were passed in.
.IP "get_set_method" 4
.IX Item "get_set_method"
Just like \fBcall_set\fR, except the code is called like a method, with \f(CW$self\fR
as its first argument. Basically, you are creating a method which can be
different for each object.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
See Class::MakeMethods for general information about this distribution.
.PP
See Class::MakeMethods::Template for information about this family of subclasses.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 933:" 4
.IX Item "Around line 933:"
You forgot a '=back' before '=head2'
