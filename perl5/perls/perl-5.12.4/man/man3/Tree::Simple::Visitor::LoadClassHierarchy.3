.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Tree::Simple::Visitor::LoadClassHierarchy 3"
.TH Tree::Simple::Visitor::LoadClassHierarchy 3 "2005-07-14" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Tree::Simple::Visitor::LoadClassHierarchy \- A Visitor for loading class hierarchies into a Tree::Simple hierarchy
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Tree::Simple::Visitor::LoadClassHierarchy;
\&  
\&  # create an visitor
\&  my $visitor = Tree::Simple::Visitor::LoadClassHierarchy\->new();
\&  
\&  # set class as an instance, or
\&  $visitor\->setClass($class);
\&  
\&  # as a package name
\&  $visitor\->setClass("My::Class");
\&  
\&  # pass our visitor to the tree
\&  $tree\->accept($visitor);
\&  
\&  # the $tree now mirrors the inheritance hierarchy of the $class
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This visitor will traverse a class's inheritance hierarchy (through the \f(CW@ISA\fR arrays) and create a Tree::Simple hierarchy which mirrors it.
.SH "METHODS"
.IX Header "METHODS"
.IP "\fBnew\fR" 4
.IX Item "new"
There are no arguments to the constructor the object will be in its default state. You can use the \f(CW\*(C`setNodeFilter\*(C'\fR method to customize its behavior.
.IP "\fBincludeTrunk ($boolean)\fR" 4
.IX Item "includeTrunk ($boolean)"
Setting the \f(CW$boolean\fR value to true (\f(CW1\fR) will cause the node value of the \f(CW$tree\fR object passed into \f(CW\*(C`visit\*(C'\fR to be set with the root value found in the class heirarchy. Setting it to false (\f(CW0\fR), or not setting it, will result in the first value in the class heirarchy creating a new node level.
.IP "\fBincludeMethods ($boolean)\fR" 4
.IX Item "includeMethods ($boolean)"
Setting the \f(CW$boolean\fR value to true (\f(CW1\fR) will cause methods to be added as a children of the class node. Setting it to false (\f(CW0\fR), or not setting it, will result in this not happening.
.Sp
\&\fB\s-1NOTE:\s0\fR Methods are sorted ascii-betically before they are added to the tree. This allows a more predictable heirarchy.
.IP "\fBsetClass ($class)\fR" 4
.IX Item "setClass ($class)"
The argument \f(CW$class\fR should be either a class name or an instance, it is then used as the root from which to determine the class hierarchy.
.IP "\fBsetNodeFilter ($filter_function)\fR" 4
.IX Item "setNodeFilter ($filter_function)"
This method accepts a \s-1CODE\s0 reference as its \f(CW$filter_function\fR argument and throws an exception if it is not a code reference. This code reference is used to filter the tree nodes as they are created, the \f(CW$filter_function\fR is passed the node value extracted from the hash prior to it being inserted into the tree being built. The \f(CW$filter_function\fR is expected to return the value desired for inclusion into the tree.
.IP "\fBvisit ($tree)\fR" 4
.IX Item "visit ($tree)"
This is the method that is used by Tree::Simple's \f(CW\*(C`accept\*(C'\fR method. It can also be used on its own, it requires the \f(CW$tree\fR argument to be a Tree::Simple object (or derived from a Tree::Simple object), and will throw and exception otherwise.
.Sp
The \f(CW$tree\fR argument which is passed to \f(CW\*(C`visit\*(C'\fR must be a leaf node. This is because this Visitor will create all the sub-nodes for this tree. If the tree is not a leaf, an exception is thrown. We do not require the tree to be a root though, and this Visitor will not affect any nodes above the \f(CW$tree\fR argument.
.SH "TO DO"
.IX Header "TO DO"
.ie n .IP "Improve the ""includeMethods"" functionality" 4
.el .IP "Improve the \f(CWincludeMethods\fR functionality" 4
.IX Item "Improve the includeMethods functionality"
I am not sure the tree this creates is the optimal tree for this situation. It is sufficient for now, until I have more of an \fIactual\fR need for this functionality.
.ie n .IP "Add ""includeFullSymbolTable"" functionality" 4
.el .IP "Add \f(CWincludeFullSymbolTable\fR functionality" 4
.IX Item "Add includeFullSymbolTable functionality"
This would traverse the full symbol tables and produce a detailed tree of everything it finds. This takes a lot more work, and as I have no current need for it, it remains in the \s-1TO\s0 \s-1DO\s0 list.
.SH "BUGS"
.IX Header "BUGS"
None that I am aware of. Of course, if you find a bug, let me know, and I will be sure to fix it.
.SH "CODE COVERAGE"
.IX Header "CODE COVERAGE"
See the \fB\s-1CODE\s0 \s-1COVERAGE\s0\fR section in Tree::Simple::VisitorFactory for more inforamtion.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
These Visitor classes are all subclasses of \fBTree::Simple::Visitor\fR, which can be found in the \fBTree::Simple\fR module, you should refer to that module for more information.
.SH "AUTHOR"
.IX Header "AUTHOR"
stevan little, <stevan@iinteractive.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2004, 2005 by Infinity Interactive, Inc.
.PP
<http://www.iinteractive.com>
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
