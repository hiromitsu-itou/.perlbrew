.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MIME::Types 3"
.TH MIME::Types 3 "2012-01-12" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MIME::Types \- Definition of MIME types
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 2
\& MIME::Types
\&   is a Exporter
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\& use MIME::Types;
\& my $mimetypes = MIME::Types\->new;
\& my MIME::Type $def = $mimetypes\->type(\*(Aqtext/plain\*(Aq);
\& my MIME::Type $def = $mimetypes\->mimeTypeOf(\*(Aqgif\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1MIME\s0 types are used in \s-1MIME\s0 compliant lines, for instance as part
of e\-mail and \s-1HTTP\s0 traffic, to indicate the type of content which is
transmitted.  Sometimes real knowledge about a mime-type is need.
.PP
This module maintains a set of MIME::Type objects, which
each describe one known mime type.  There are many types defined
by RFCs and vendors, so the list is long but not complete.  Please
don't hestitate to ask to add additional information.
.PP
If you wish to get access to the \f(CW\*(C`mime.types\*(C'\fR files, which are
available on various places in \s-1UNIX\s0 and Linux systems, then have a
look at File::TypeInfo.
.SS "MIME::Types and mod_perl"
.IX Subsection "MIME::Types and mod_perl"
This module uses a \s-1DATA\s0 handle to read all the types at first
instantiation, which doesn't play nicely with mod_perl and fork.
.PP
When you use this module with mod_perl, add this to \f(CW\*(C`startup.pl\*(C'\fR
.PP
.Vb 2
\&   use MIME::Types;
\&   BEGIN { MIME::Types\->new() }
.Ve
.PP
Now, the type definitions will get parsed before the processes are spawned.
.SS "MIME::Types and daemons (fork)"
.IX Subsection "MIME::Types and daemons (fork)"
If your program uses fork (usually for a daemon), then the situation
is a bit like with mod_perl before: you want to have the type table
initialized before you start forking. So, first call
.PP
.Vb 1
\&   my $mt = MIME::Types\->new;
.Ve
.PP
Later, each time you create this object (you may, of course, also reuse
the object you create here) you will get access to the same global table
of types.
.SH "METHODS"
.IX Header "METHODS"
.SS "Instantiation"
.IX Subsection "Instantiation"
.IP "MIME::Types\->\fBnew\fR(\s-1OPTIONS\s0)" 4
.IX Item "MIME::Types->new(OPTIONS)"
Create a new \f(CW\*(C`MIME::Types\*(C'\fR object which manages the data.  In the current
implementation, it does not matter whether you create this object often
within your program, but in the future this may change.
.Sp
.Vb 2
\& \-Option       \-\-Default
\&  only_complete  <false>
.Ve
.RS 4
.IP "only_complete => \s-1BOOLEAN\s0" 2
.IX Item "only_complete => BOOLEAN"
Only include complete \s-1MIME\s0 type definitions: requires at least one known
extension.  This will reduce the number of entries \-\-and with that the
amount of memory consumed\*(-- considerably.
.Sp
In your program you have to decide: the first time that you call
the creator (\f(CW\*(C`new\*(C'\fR) determines whether you get the full or the partial
information.
.RE
.RS 4
.RE
.SS "Knowledge"
.IX Subsection "Knowledge"
.ie n .IP "$obj\->\fBaddType\fR(\s-1TYPE\s0, ...)" 4
.el .IP "\f(CW$obj\fR\->\fBaddType\fR(\s-1TYPE\s0, ...)" 4
.IX Item "$obj->addType(TYPE, ...)"
Add one or more TYPEs to the set of known types.  Each \s-1TYPE\s0 is a
\&\f(CW\*(C`MIME::Type\*(C'\fR which must be experimental: either the main-type or
the sub-type must start with \f(CW\*(C`x\-\*(C'\fR.
.Sp
Please inform the maintainer of this module when registered types
are missing.  Before version MIME::Types version 1.14, a warning
was produced when an unknown \s-1IANA\s0 type was added.  This has been
removed, because some people need that to get their application
to work locally... broken applications...
.ie n .IP "$obj\->\fBextensions\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBextensions\fR()" 4
.IX Item "$obj->extensions()"
Returns a list of all defined extensions.
.ie n .IP "$obj\->\fBmimeTypeOf\fR(\s-1FILENAME\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBmimeTypeOf\fR(\s-1FILENAME\s0)" 4
.IX Item "$obj->mimeTypeOf(FILENAME)"
Returns the \f(CW\*(C`MIME::Type\*(C'\fR object which belongs to the \s-1FILENAME\s0 (or simply
its filename extension) or \f(CW\*(C`undef\*(C'\fR if the file type is unknown.  The extension
is used, and considered case-insensitive.
.Sp
In some cases, more than one type is known for a certain filename extension.
In that case, one of the alternatives is chosen at random.
.Sp
example: use of \fImimeTypeOf()\fR
.Sp
.Vb 2
\& my MIME::Types $types = MIME::Types\->new;
\& my MIME::Type  $mime = $types\->mimeTypeOf(\*(Aqgif\*(Aq);
\&
\& my MIME::Type  $mime = $types\->mimeTypeOf(\*(Aqjpg\*(Aq);
\& print $mime\->isBinary;
.Ve
.ie n .IP "$obj\->\fBtype\fR(\s-1STRING\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBtype\fR(\s-1STRING\s0)" 4
.IX Item "$obj->type(STRING)"
Return the \f(CW\*(C`MIME::Type\*(C'\fR which describes the type related to \s-1STRING\s0.  One
type may be described more than once.  Different extensions is use for
this type, and different operating systems may cause more than one
\&\f(CW\*(C`MIME::Type\*(C'\fR object to be defined.  In scalar context, only the first
is returned.
.ie n .IP "$obj\->\fBtypes\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtypes\fR()" 4
.IX Item "$obj->types()"
Returns a list of all defined mime-types
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
The next functions are provided for backward compatibility with MIME::Types
versions 0.06 and below.  This code originates from Jeff Okamoto
\&\fIokamoto@corp.hp.com\fR and others.
.IP "\fBby_mediatype\fR(\s-1TYPE\s0)" 4
.IX Item "by_mediatype(TYPE)"
This function takes a media type and returns a list or anonymous array of
anonymous three-element arrays whose values are the file name suffix used to
identify it, the media type, and a content encoding.
.Sp
\&\s-1TYPE\s0 can be a full type name (contains '/', and will be matched in full),
a partial type (which is used as regular expression) or a real regular
expression.
.IP "\fBby_suffix\fR(FILENAME|SUFFIX)" 4
.IX Item "by_suffix(FILENAME|SUFFIX)"
Like \f(CW\*(C`mimeTypeOf\*(C'\fR, but does not return an \f(CW\*(C`MIME::Type\*(C'\fR object. If the file
+type is unknown, both the returned media type and encoding are empty strings.
.Sp
example: use of function \fIby_suffix()\fR
.Sp
.Vb 2
\& use MIME::Types \*(Aqby_suffix\*(Aq;
\& my ($mediatype, $encoding) = by_suffix \*(Aqimage.gif\*(Aq;
\&
\& my $refdata =  by_suffix \*(Aqimage.gif\*(Aq;
\& my ($mediatype, $encoding) = @$refdata;
.Ve
.IP "\fBimport_mime_types\fR()" 4
.IX Item "import_mime_types()"
This method has been removed: mime-types are only useful if understood
by many parties.  Therefore, the \s-1IANA\s0 assigns names which can be used.
In the table kept by this \f(CW\*(C`MIME::Types\*(C'\fR module all these names, plus
the most often used termporary names are kept.  When names seem to be
missing, please contact the maintainer for inclussion.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of MIME-Types distribution version 1.34,
built on January 12, 2012. Website: \fIhttp://perl.overmeer.net/mimetypes/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 1999,2001\-2012 by Mark Overmeer. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
