.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Catalyst::Controller::ActionRole 3"
.TH Catalyst::Controller::ActionRole 3 "2010-08-26" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::Controller::ActionRole \- Apply roles to action instances
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    package MyApp::Controller::Foo;
\&
\&    use Moose;
\&    use namespace::autoclean;
\&
\&    BEGIN { extends \*(AqCatalyst::Controller::ActionRole\*(Aq }
\&
\&    sub bar : Local Does(\*(AqMoo\*(Aq) { ... }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module allows to apply Moose::Roles to the \f(CW\*(C`Catalyst::Action\*(C'\fRs for
different controller methods.
.PP
For that a \f(CW\*(C`Does\*(C'\fR attribute is provided. That attribute takes an argument,
that determines the role, which is going to be applied. If that argument is
prefixed with \f(CW\*(C`+\*(C'\fR, it is assumed to be the full name of the role. If it's
prefixed with \f(CW\*(C`~\*(C'\fR, the name of your application followed by
\&\f(CW\*(C`::ActionRole::\*(C'\fR is prepended. If it isn't prefixed with \f(CW\*(C`+\*(C'\fR or \f(CW\*(C`~\*(C'\fR,
the role name will be searched for in \f(CW@INC\fR according to the rules for
role prefix searching.
.PP
It's possible to to apply roles to \fBall\fR actions of a controller without
specifying the \f(CW\*(C`Does\*(C'\fR keyword in every action definition:
.PP
.Vb 1
\&    package MyApp::Controller::Bar
\&
\&    use Moose;
\&    use namespace::autoclean;
\&
\&    BEGIN { extends \*(AqCatalyst::Controller::ActionRole\*(Aq }
\&
\&    _\|_PACKAGE_\|_\->config(
\&        action_roles => [\*(AqFoo\*(Aq, \*(Aq~Bar\*(Aq],
\&    );
\&
\&    # Has Catalyst::ActionRole::Foo and MyApp::ActionRole::Bar applied.
\&    #
\&    # If MyApp::ActionRole::Foo exists and is loadable, it will take
\&    # precedence over Catalyst::ActionRole::Foo.
\&    #
\&    # If MyApp::ActionRole::Bar exists and is loadable, it will be loaded,
\&    # but even if it doesn\*(Aqt exist Catalyst::ActionRole::Bar will not be loaded.
\&    sub moo : Local { ... }
.Ve
.PP
Additionally, roles can be applied to selected actions without specifying
\&\f(CW\*(C`Does\*(C'\fR using \*(L"action\*(R" in Catalyst::Controller and configured with
\&\*(L"action_args\*(R" in Catalyst::Controller:
.PP
.Vb 1
\&    package MyApp::Controller::Baz;
\&
\&    use Moose;
\&    use namespace::autoclean;
\&
\&    BEGIN { extends \*(AqCatalyst::Controller::ActionRole\*(Aq }
\&
\&    _\|_PACKAGE_\|_\->config(
\&        action_roles => [qw( Foo )],
\&        action       => {
\&            some_action    => { Does => [qw( ~Bar )] },
\&            another_action => { Does => [qw( +MyActionRole::Baz )] },
\&        },
\&        action_args  => {
\&            another_action => { customarg => \*(Aqarg1\*(Aq },
\&        }
\&    );
\&
\&    # has Catalyst::ActionRole::Foo and MyApp::ActionRole::Bar applied
\&    sub some_action : Local { ... }
\&
\&    # has Catalyst::ActionRole::Foo and MyActionRole::Baz applied
\&    # and associated action class would get additional arguments passed
\&    sub another_action : Local { ... }
.Ve
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "_action_role_prefix"
.IX Subsection "_action_role_prefix"
This class attribute stores an array reference of role prefixes to search for
role names in if they aren't prefixed with \f(CW\*(C`+\*(C'\fR or \f(CW\*(C`~\*(C'\fR. It defaults to
\&\f(CW\*(C`[ \*(AqCatalyst::ActionRole::\*(Aq ]\*(C'\fR.  See \*(L"role prefix searching\*(R".
.SS "_action_roles"
.IX Subsection "_action_roles"
This attribute stores an array reference of role names that will be applied to
every action of this controller. It can be set by passing a \f(CW\*(C`action_roles\*(C'\fR
argument to the constructor. The same expansions as for \f(CW\*(C`Does\*(C'\fR will be
performed.
.SH "METHODS"
.IX Header "METHODS"
.SS "gather_action_roles(\e%action_args)"
.IX Subsection "gather_action_roles(%action_args)"
Gathers the list of roles to apply to an action with the given \f(CW%action_args\fR.
.SH "ROLE PREFIX SEARCHING"
.IX Header "ROLE PREFIX SEARCHING"
Roles specified with no prefix are looked up under a set of role prefixes.  The
first prefix is always \f(CW\*(C`MyApp::ActionRole::\*(C'\fR (with \f(CW\*(C`MyApp\*(C'\fR replaced as
appropriate for your application); the following prefixes are taken from the
\&\f(CW\*(C`_action_role_prefix\*(C'\fR attribute.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.IP "\(bu" 4
Hans Dieter Pearcey <hdp@weftsoar.net>
.IP "\(bu" 4
Alex J. G. BurzyXski <ajgb@ajgb.net>
.IP "\(bu" 4
John Napiorkowski <jjn1056@yahoo.com>
.IP "\(bu" 4
William King <william.king@quentustech.com>
.IP "\(bu" 4
Tomas Doran <bobtfish@bobtfish.net>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2010 by Florian Ragwitz.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
