.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Carp::REPL 3"
.TH Carp::REPL 3 "2010-04-06" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Carp::REPL \- read\-eval\-print\-loop on die and/or warn
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
The intended way to use this module is through the command line.
.PP
.Vb 2
\&    perl \-MCarp::REPL tps\-report.pl
\&        Can\*(Aqt call method "cover_sheet" without a package or object reference at tps\-report.pl line 6019.
\&
\&    # instead of exiting, you get a REPL!
\&
\&    $ $form
\&    27B/6
\&
\&    $ $self\->get_form
\&    27B/6
\&
\&    $ "ah ha! there\*(Aqs my bug, I thought get_form returned an object"
\&    ah ha! there\*(Aqs my bug, I thought get_form returned an object
.Ve
.SH "USAGE"
.IX Header "USAGE"
.ie n .SS """\-MCarp::REPL"""
.el .SS "\f(CW\-MCarp::REPL\fP"
.IX Subsection "-MCarp::REPL"
.ie n .SS """\-MCarp::REPL=warn"""
.el .SS "\f(CW\-MCarp::REPL=warn\fP"
.IX Subsection "-MCarp::REPL=warn"
Works as command line argument. This automatically installs the die handler for
you, so if you receive a fatal error you get a \s-1REPL\s0 before the universe
explodes. Specifying \f(CW\*(C`=warn\*(C'\fR also installs a warn handler for finding those
mysterious warnings.
.ie n .SS """use Carp::REPL;"""
.el .SS "\f(CWuse Carp::REPL;\fP"
.IX Subsection "use Carp::REPL;"
.ie n .SS """use Carp::REPL \*(Aqwarn\*(Aq;"""
.el .SS "\f(CWuse Carp::REPL \*(Aqwarn\*(Aq;\fP"
.IX Subsection "use Carp::REPL warn;"
Same as above.
.ie n .SS """use Carp::REPL \*(Aqnodie\*(Aq;"""
.el .SS "\f(CWuse Carp::REPL \*(Aqnodie\*(Aq;\fP"
.IX Subsection "use Carp::REPL nodie;"
Loads the module without installing the die handler. Use this if you just want
to run \f(CW\*(C`Carp::REPL::repl\*(C'\fR on your own terms.
.ie n .SS """use Carp::REPL \*(Aqtest\*(Aq;"""
.el .SS "\f(CWuse Carp::REPL \*(Aqtest\*(Aq;\fP"
.IX Subsection "use Carp::REPL test;"
.ie n .SS """\-MCarp::REPL=test"""
.el .SS "\f(CW\-MCarp::REPL=test\fP"
.IX Subsection "-MCarp::REPL=test"
Load a \s-1REPL\s0 on test failure! (as long as it uses \*(L"ok\*(R" in Test::More)
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "repl"
.IX Subsection "repl"
This module's interface consists of exactly one function: repl. This is
provided so you may install your own \f(CW$SIG{_\|_DIE_\|_}\fR handler if you have no
alternatives.
.PP
It takes the same arguments as die, and returns no useful value. In fact, don't
even depend on it returning at all!
.PP
One useful place for calling this manually is if you just want to check the
state of things without having to throw a fake error. You can also change any
variables and those changes will be seen by the rest of your program.
.PP
.Vb 1
\&    use Carp::REPL \*(Aqrepl\*(Aq;
\&
\&    sub involved_calculation {
\&        # ...
\&        $d = maybe_zero();
\&        # ...
\&        repl(); # $d = 1
\&        $sum += $n / $d;
\&        # ...
\&    }
.Ve
.PP
Unfortunately if you instead go with the usual \f(CW\*(C`\-MCarp::REPL\*(C'\fR, then
\&\f(CW$SIG{_\|_DIE_\|_}\fR will be invoked and there's no general way to recover. But you
can still change variables to poke at things.
.SH "COMMANDS"
.IX Header "COMMANDS"
Note that this is not supposed to be a full-fledged debugger. A few commands
are provided to aid you in finding out what went awry. See
Devel::ebug if you're looking for a serious debugger.
.IP "\(bu" 4
:u
.Sp
Moves one frame up in the stack.
.IP "\(bu" 4
:d
.Sp
Moves one frame down in the stack.
.IP "\(bu" 4
:top
.Sp
Moves to the top frame of the stack.
.IP "\(bu" 4
:bottom
.Sp
Moves to the bottom frame of the stack.
.IP "\(bu" 4
:t
.Sp
Redisplay the stack trace.
.IP "\(bu" 4
:e
.Sp
Display the current lexical environment.
.IP "\(bu" 4
:l
.Sp
List eleven lines of source code of the current frame.
.IP "\(bu" 4
:q
.Sp
Close the \s-1REPL\s0. (\f(CW\*(C`^D\*(C'\fR also works)
.SH "VARIABLES"
.IX Header "VARIABLES"
.IP "\(bu" 4
\&\f(CW$_REPL\fR
.Sp
This represents the Devel::REPL object.
.IP "\(bu" 4
\&\f(CW$_a\fR
.Sp
This represents the arguments passed to the subroutine at the current frame in
the call stack. Modifications are ignored (how would that work anyway?
Re-invoke the sub?)
.SH "CAVEATS"
.IX Header "CAVEATS"
Dynamic scope probably produces unexpected results. I don't see any easy (or
even difficult!) solution to this. Therefore it's a caveat and not a bug. :)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Devel::REPL, Devel::ebug, Enbugger, CGI::Inspect
.SH "AUTHOR"
.IX Header "AUTHOR"
Shawn M Moore, \f(CW\*(C`<sartak at gmail.com>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-carp\-repl at rt.cpan.org\*(C'\fR, or through the web interface at
http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Carp\-REPL <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Carp-REPL>.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Thanks to Nelson Elhage and Jesse Vincent for the idea.
.PP
Thanks to Matt Trout and Stevan Little for their advice.
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2007\-2008 Best Practical Solutions.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
