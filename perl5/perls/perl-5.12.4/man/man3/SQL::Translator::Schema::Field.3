.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SQL::Translator::Schema::Field 3"
.TH SQL::Translator::Schema::Field 3 "2011-05-05" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SQL::Translator::Schema::Field \- SQL::Translator field object
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  use SQL::Translator::Schema::Field;
\&  my $field = SQL::Translator::Schema::Field\->new(
\&      name  => \*(Aqfoo\*(Aq,
\&      table => $table,
\&  );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`SQL::Translator::Schema::Field\*(C'\fR is the field object.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
Object constructor.
.PP
.Vb 4
\&  my $field = SQL::Translator::Schema::Field\->new(
\&      name  => \*(Aqfoo\*(Aq,
\&      table => $table,
\&  );
.Ve
.SS "comments"
.IX Subsection "comments"
Get or set the comments on a field.  May be called several times to 
set and it will accumulate the comments.  Called in an array context,
returns each comment individually; called in a scalar context, returns
all the comments joined on newlines.
.PP
.Vb 3
\&  $field\->comments(\*(Aqfoo\*(Aq);
\&  $field\->comments(\*(Aqbar\*(Aq);
\&  print join( \*(Aq, \*(Aq, $field\->comments ); # prints "foo, bar"
.Ve
.SS "data_type"
.IX Subsection "data_type"
Get or set the field's data type.
.PP
.Vb 1
\&  my $data_type = $field\->data_type(\*(Aqinteger\*(Aq);
.Ve
.SS "sql_data_type"
.IX Subsection "sql_data_type"
Constant from \s-1DBI\s0 package representing this data type. See \*(L"\s-1DBI\s0 Constants\*(R" in \s-1DBI\s0
for more details.
.SS "default_value"
.IX Subsection "default_value"
Get or set the field's default value.  Will return undef if not defined
and could return the empty string (it's a valid default value), so don't 
assume an error like other methods.
.PP
.Vb 1
\&  my $default = $field\->default_value(\*(Aqfoo\*(Aq);
.Ve
.SS "extra"
.IX Subsection "extra"
Get or set the field's \*(L"extra\*(R" attibutes (e.g., \*(L"\s-1ZEROFILL\s0\*(R" for MySQL).
Accepts a hash(ref) of name/value pairs to store;  returns a hash.
.PP
.Vb 2
\&  $field\->extra( qualifier => \*(AqZEROFILL\*(Aq );
\&  my %extra = $field\->extra;
.Ve
.SS "foreign_key_reference"
.IX Subsection "foreign_key_reference"
Get or set the field's foreign key reference;
.PP
.Vb 1
\&  my $constraint = $field\->foreign_key_reference( $constraint );
.Ve
.SS "is_auto_increment"
.IX Subsection "is_auto_increment"
Get or set the field's \f(CW\*(C`is_auto_increment\*(C'\fR attribute.
.PP
.Vb 1
\&  my $is_auto = $field\->is_auto_increment(1);
.Ve
.SS "is_foreign_key"
.IX Subsection "is_foreign_key"
Returns whether or not the field is a foreign key.
.PP
.Vb 1
\&  my $is_fk = $field\->is_foreign_key;
.Ve
.SS "is_nullable"
.IX Subsection "is_nullable"
Get or set whether the field can be null.  If not defined, then 
returns \*(L"1\*(R" (assumes the field can be null).  The argument is evaluated
by Perl for True or False, so the following are eqivalent:
.PP
.Vb 3
\&  $is_nullable = $field\->is_nullable(0);
\&  $is_nullable = $field\->is_nullable(\*(Aq\*(Aq);
\&  $is_nullable = $field\->is_nullable(\*(Aq0\*(Aq);
.Ve
.PP
While this is technically a field constraint, it's probably easier to
represent this as an attribute of the field.  In order keep things
consistent, any other constraint on the field (unique, primary, and
foreign keys; checks) are represented as table constraints.
.SS "is_primary_key"
.IX Subsection "is_primary_key"
Get or set the field's \f(CW\*(C`is_primary_key\*(C'\fR attribute.  Does not create
a table constraint (should it?).
.PP
.Vb 1
\&  my $is_pk = $field\->is_primary_key(1);
.Ve
.SS "is_unique"
.IX Subsection "is_unique"
Determine whether the field has a \s-1UNIQUE\s0 constraint or not.
.PP
.Vb 1
\&  my $is_unique = $field\->is_unique;
.Ve
.SS "is_valid"
.IX Subsection "is_valid"
Determine whether the field is valid or not.
.PP
.Vb 1
\&  my $ok = $field\->is_valid;
.Ve
.SS "name"
.IX Subsection "name"
Get or set the field's name.
.PP
.Vb 1
\& my $name = $field\->name(\*(Aqfoo\*(Aq);
.Ve
.PP
The field object will also stringify to its name.
.PP
.Vb 1
\& my $setter_name = "set_$field";
.Ve
.PP
Errors (\*(L"No field name\*(R") if you try to set a blank name.
.SS "full_name"
.IX Subsection "full_name"
Read only method to return the fields name with its table name pre-pended.
e.g. \*(L"person.foo\*(R".
.SS "order"
.IX Subsection "order"
Get or set the field's order.
.PP
.Vb 1
\&  my $order = $field\->order(3);
.Ve
.SS "schema"
.IX Subsection "schema"
Shortcut to get the fields schema ($field\->table\->schema) or undef if it
doesn't have one.
.PP
.Vb 1
\&  my $schema = $field\->schema;
.Ve
.SS "size"
.IX Subsection "size"
Get or set the field's size.  Accepts a string, array or arrayref of
numbers and returns a string.
.PP
.Vb 4
\&  $field\->size( 30 );
\&  $field\->size( [ 255 ] );
\&  $size = $field\->size( 10, 2 );
\&  print $size; # prints "10,2"
\&
\&  $size = $field\->size( \*(Aq10, 2\*(Aq );
\&  print $size; # prints "10,2"
.Ve
.SS "table"
.IX Subsection "table"
Get or set the field's table object. As the table object stringifies this can
also be used to get the table name.
.PP
.Vb 2
\&  my $table = $field\->table;
\&  print "Table name: $table";
.Ve
.SS ""
.IX Subsection ""
Returns the field exactly as the parser found it
.SS "equals"
.IX Subsection "equals"
Determines if this field is the same as another
.PP
.Vb 1
\&  my $isIdentical = $field1\->equals( $field2 );
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Ken Youens-Clark <kclark@cpan.org>.
