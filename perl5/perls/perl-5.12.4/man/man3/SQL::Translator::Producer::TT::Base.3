.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SQL::Translator::Producer::TT::Base 3"
.TH SQL::Translator::Producer::TT::Base 3 "2011-05-05" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SQL::Translator::Producer::TT::Base \- TT (Template Toolkit) based Producer base
class.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& # Create a producer using a template in the _\|_DATA_\|_ section.
\& package SQL::Translator::Producer::Foo;
\&
\& use base qw/SQL::Translator::Producer::TT::Base/;
\&
\& # Convert produce call into a method call on our new class
\& sub produce { return _\|_PACKAGE_\|_\->new( translator => shift )\->run; };
\&
\& # Configure the Template object.
\& sub tt_config { ( INTERPOLATE => 1 ); }
\&
\& # Extra vars to add to the template
\& sub tt_vars { ( foo => "bar" ); }
\&
\& # Put template in DATA section (or use file with ttfile producer arg)
\& _\|_DATA_\|_
\& Schema
\&
\& Database: [% schema.database %]
\& Foo: $foo
\& ...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A base class producer designed to be sub-classed to create new \s-1TT\s0 based
producers cheaply \- by simply giving the template to use and sprinkling in some
extra template variables and config.
.PP
You can find an introduction to this module in SQL::Translator::Manual.
.PP
The 1st thing the module does is convert the produce sub routine call we get
from SQL::Translator into a method call on an object, which we can then
sub-class. This is done with the following code which needs to appear in \fBall\fR
sub classes.
.PP
.Vb 2
\& # Convert produce call into an object method call
\& sub produce { return _\|_PACKAGE_\|_\->new( translator => shift )\->run; };
.Ve
.PP
See \*(L"\s-1PRODUCER\s0 \s-1OBJECT\s0\*(R" below for details.
.PP
The upshot of this is we can make new template producers by sub classing this
base class, adding the above snippet and a template.
The module also provides a number of hooks into the templating process,
see \*(L"\s-1SUB\s0 \s-1CLASS\s0 \s-1HOOKS\s0\*(R" for details.
.PP
See the \s-1SYNOPSIS\s0 above for an example of creating a simple producer using
a single template stored in the producers \s-1DATA\s0 section.
.SH "SUB CLASS HOOKS"
.IX Header "SUB CLASS HOOKS"
Sub-classes can override these methods to control the templating by giving
the template source, adding variables and giving config to the Tempate object.
.SS "tt_config"
.IX Subsection "tt_config"
.Vb 1
\& sub tt_config { ( INTERPOLATE => 1 ); }
.Ve
.PP
Return hash of Template config to add to that given to the Template \f(CW\*(C`new\*(C'\fR
method.
.SS "tt_schema"
.IX Subsection "tt_schema"
.Vb 2
\& sub tt_schema { "foo.tt"; }
\& sub tt_schema { local $/ = undef; \e<DATA>; }
.Ve
.PP
The template to use, return a file name or a scalar ref of \s-1TT\s0
source, or an IO::Handle. See Template for details, as the return from
this is passed on to it's \f(CW\*(C`produce\*(C'\fR method.
.PP
The default implimentation uses the producer arg \f(CW\*(C`ttfile\*(C'\fR as a filename to read
the template from. If the arg isn't there it will look for a \f(CW\*(C`_\|_DATA_\|_\*(C'\fR section
in the class, reading it as template source if found. Returns undef if both
these fail, causing the produce call to fail with a 'no template!' error.
.SS "tt_vars"
.IX Subsection "tt_vars"
.Vb 1
\& sub tt_vars { ( foo => "bar" ); }
.Ve
.PP
Return hash of template vars to use in the template. Nothing added here
by default, but see tt_default_vars for the variables you get for free.
.SS "tt_default_vars"
.IX Subsection "tt_default_vars"
Return a hash-ref of the default vars given to the template.
You wouldn't normally over-ride this, just inherit the default implimentation,
to get the \f(CW\*(C`translator\*(C'\fR & \f(CW\*(C`schema\*(C'\fR variables, then over-ride tt_vars to add
your own.
.PP
The current default variables are:
.IP "schema" 4
.IX Item "schema"
The schema to template.
.IP "translator" 4
.IX Item "translator"
The SQL::Translator object.
.SS "pre_process_schema"
.IX Subsection "pre_process_schema"
\&\s-1WARNING:\s0 This method is Experimental so may change!
.PP
Called with the SQL::Translator::Schema object and should return one (it
doesn't have to be the same one) that will become the \f(CW\*(C`schema\*(C'\fR varibale used 
in the template.
.PP
Gets called from tt_default_vars.
.SH "PRODUCER OBJECT"
.IX Header "PRODUCER OBJECT"
The rest of the methods in the class set up a sub-classable producer object.
You normally just inherit them.
.SS "new"
.IX Subsection "new"
.Vb 1
\& my $tt_producer = TT::Base\->new( translator => $translator );
.Ve
.PP
Construct a new \s-1TT\s0 Producer object. Takes a single, named arg of the
SQL::Translator object running the translation. Dies if this is not given.
.SS "translator"
.IX Subsection "translator"
Return the SQL::Translator object.
.SS "schema"
.IX Subsection "schema"
Return the SQL::Translator::Schema we are translating. This is equivilent
to \f(CW\*(C`$tt_producer\->translator\->schema\*(C'\fR.
.SS "run"
.IX Subsection "run"
Called to actually produce the output, calling the sub class hooks. Returns the
produced text.
.SS "args"
.IX Subsection "args"
Util wrapper method around \f(CW\*(C`TT::Base\->translator\->producer_args\*(C'\fR for
(mostley) readonly access to the producer args. How it works depends on the
number of arguments you give it and the context.
.PP
.Vb 5
\& No args \- Return hashref (the actual hash in Translator) or hash of args.
\& 1 arg   \- Return value of the arg with the passed name.
\& 2+ args \- List of names. In list context returns values of the given arg
\&           names, returns as a hashref in scalar context. Any names given
\&           that don\*(Aqt exist in the args are returned as undef.
.Ve
.PP
This is still a bit messy but is a handy way to access the producer args when
you use your own to drive the templating.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perl,
SQL::Translator,
Template.
.SH "TODO"
.IX Header "TODO"
\&\- Add support for a sqlf template repository, set as an \s-1INCLUDE_PATH\s0,
so that sub-classes can easily include file based templates using relative
paths.
.PP
\&\- Pass in template vars from the producer args and command line.
.PP
\&\- Merge in TT::Table.
.PP
\&\- Hooks to pre-process the schema and post-process the output.
.SH "AUTHOR"
.IX Header "AUTHOR"
Mark Addison <grommit@users.sourceforge.net>.
