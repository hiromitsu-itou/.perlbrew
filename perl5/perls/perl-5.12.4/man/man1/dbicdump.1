.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBICDUMP 1"
.TH DBICDUMP 1 "2011-11-01" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
dbicdump \- Dump a schema using DBIx::Class::Schema::Loader
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  dbicdump <configuration_file>
\&  dbicdump [\-I <lib\-path>] [\-o <loader_option>=<value> ] \e
\&                <schema_class> <connect_info>
.Ve
.PP
Examples:
.PP
.Vb 1
\&  $ dbicdump schema.conf
\&
\&  $ dbicdump \-o dump_directory=./lib \e
\&    \-o components=\*(Aq["InflateColumn::DateTime"]\*(Aq \e
\&    MyApp::Schema dbi:SQLite:./foo.db
\&
\&  $ dbicdump \-o dump_directory=./lib \e
\&    \-o components=\*(Aq["InflateColumn::DateTime"]\*(Aq \e
\&    MyApp::Schema dbi:SQLite:./foo.db \*(Aq{ quote_char => "\e"" }\*(Aq
\&
\&  $ dbicdump \-Ilib \-o dump_directory=./lib \e
\&    \-o components=\*(Aq["InflateColumn::DateTime"]\*(Aq \e
\&    \-o preserve_case=1 \e
\&    MyApp::Schema dbi:mysql:database=foo user pass \*(Aq{ quote_char => "\`" }\*(Aq
\&
\&  $ dbicdump \-o dump_directory=./lib \e
\&    \-o components=\*(Aq["InflateColumn::DateTime"]\*(Aq \e
\&    MyApp::Schema \*(Aqdbi:mysql:database=foo;host=domain.tld;port=3306\*(Aq user pass
.Ve
.PP
On Windows that would be:
.PP
.Vb 4
\&  $ dbicdump \-o dump_directory=.\elib ^
\&    \-o components="[q{InflateColumn::DateTime}]" ^
\&    \-o preserve_case=1 ^
\&    MyApp::Schema dbi:mysql:database=foo user pass "{ quote_char => q{\`} }"
.Ve
.PP
Configuration files must have schema_class and connect_info sections,
an example of a general config file is as follows:
.PP
.Vb 1
\&    schema_class MyApp::Schema
\&
\&    lib /extra/perl/libs
\&    
\&    # connection string
\&    <connect_info>
\&        dsn     dbi:mysql:example
\&        user    root
\&        pass    secret
\&    </connect_info>
\&    
\&    # dbic loader options
\&    <loader_options>
\&        components  InflateColumn::DateTime
\&        components  TimeStamp
\&    </loader_options>
.Ve
.PP
Using a config file requires Config::Any installed.
.PP
The optional \f(CW\*(C`lib\*(C'\fR key is equivalent to the \f(CW\*(C`\-I\*(C'\fR option.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Dbicdump generates a DBIx::Class schema using
\&\*(L"make_schema_at\*(R" in DBIx::Class::Schema::Loader and dumps it to disk.
.PP
You can pass any DBIx::Class::Schema::Loader::Base constructor option using
\&\f(CW\*(C`\-o <option>=<value>\*(C'\fR. For convenience, option names will have \f(CW\*(C`\-\*(C'\fR
replaced with \f(CW\*(C`_\*(C'\fR and values that look like references or quote-like
operators will be \f(CW\*(C`eval\*(C'\fR\-ed before being passed to the constructor.
.PP
The \f(CW\*(C`dump_directory\*(C'\fR option defaults to the current directory if not
specified.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
DBIx::Class::Schema::Loader, DBIx::Class.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dagfinn Ilmari Manns?ker \f(CW\*(C`<ilmari@ilmari.org>\*(C'\fR
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Caelum: Rafael Kitover <rkitover@cpan.org>
.PP
alnewkirk: Al Newkirk <awncorp@cpan.org>
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
